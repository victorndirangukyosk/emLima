/*!
 * kwikbasket
 * KwikBasket Landing Page
 * 
 * @author KwikBasket
 * @version 1.0.0
 * Copyright 2020. MIT licensed.
 */
!function(e,t,a,s){"use strict";function o(){navigator.geolocation?(console.log(1),navigator.geolocation.getCurrentPosition(i,null,{enableHighAccuracy:!0,timeout:5e3,maximumAge:0})):(console.log(2),console.log("Geolocation is not supported by this browser."))}function i(t){console.log("showPositionOnly"),console.log(t),e("#lat").val(t.coords.latitude),e("#lng").val(t.coords.longitude),console.log(t.coords.latitude),console.log(t.coords.longitude)}o(),e(function(){e(a).scroll(function(){var t=e(".fixed-top");t.toggleClass("scrolled",e(this).scrollTop()>t.height())}),e(".nav-link, .navbar-brand").click(function(){var t=e(this).attr("href");e("html, body").animate({scrollTop:e(t).offset().top},700)}),ScrollOut(),gsap.to(".anim-from-top",{opacity:1,y:0,duration:.5,ease:"elastic"}),gsap.to(".anim-from-bottom",{y:0,duration:.5}),e(a).delegate("#login-button","click",function(a){o(),a.preventDefault();const s=e("#login-button");var i=e("#lat").val(),r=e("#lng").val();const n=e("#login-email").val(),l=e("#login-password").val();n.length>0&&l.length>0?(s.text("PLEASE WAIT"),s.toggleClass("disabled"),e.ajax({url:"index.php?path=account/login/login",type:"post",data:{email:n,password:l,login_latitude:i,login_longitude:r,login_mode:"web"},dataType:"json",success:function(a){a.status?null!=a.redirect?t.location.href=a.redirect:"1"==a.temppassword?(location=e(".base_url").attr("href")+"/changepass",console.log(e(".base_url"))):location=e(".base_url").attr("href"):(iziToast.error({position:"topRight",message:a.error_warning}),s.text("LOGIN"),s.toggleClass("disabled"))}})):iziToast.warning({position:"topRight",message:"Please enter your email and password"})}),e("#register-phone").keyup(function(e){/\D/g.test(this.value)&&(this.value=this.value.replace(/\D/g,""))}),e(a).delegate("#register-button","click",function(t){t.preventDefault();const a=e("#register-first-name").val(),s=e("#register-last-name").val(),o=e("#register-email").val(),i=e("#register-phone").val(),r=e("#register-company-name").val(),n=e("#register-company-address").val(),l=e("#register-business-type").val(),c=e("#register-building-name").val(),g=e("#register-address-line").val(),p=e("#register-location").val(),u=e("#register-password").val(),d=e("#register-password-confirm").val(),m=e("#registration-view"),v=e("#otp-view"),h=e("#register-button"),f=e("#register-form")[0],b=f.reportValidity();b&&(d!==u?iziToast.warning({position:"topRight",message:"Passwords do no match"}):""==grecaptcha.getResponse()?iziToast.warning({position:"topRight",message:"Please complete captcha"}):(h.text("PLEASE WAIT"),h.toggleClass("disabled"),e.ajax({url:"index.php?path=account/register/register_send_otp",type:"POST",dataType:"json",data:{firstname:a,lastname:s,email:o,telephone:i,company_name:r,company_address:n,customer_group_id:l,house_building:c,address:g,location:p,password:u,confirm:d},success:function(e){h.text("SIGN UP"),h.toggleClass("disabled"),e.status?(iziToast.success({position:"topRight",message:e.success_message}),m.hide(),v.show()):iziToast.warning({position:"topRight",title:"Oops",message:e.error_warning})}})))}),e(a).delegate("#otp-verify-button","click",function(a){a.preventDefault();const s=e("#register-first-name").val(),o=e("#register-last-name").val(),i=e("#register-email").val(),r=e("#register-phone").val(),n=e("#register-company-name").val(),l=e("#register-company-address").val(),c=e("#register-business-type").val(),g=e("#register-building-name").val(),p=e("#register-address-line").val(),u=e("#register-location").val(),d=e("#register-password").val(),m=e("#register-password-confirm").val(),v=e("#otp-value").val(),h=e("#otp-verify-button");v.length>3?(h.text("PLEASE WAIT"),h.toggleClass("disabled"),e.ajax({url:"index.php?path=account/register/register_verify_otp",type:"POST",dataType:"json",data:{firstname:s,lastname:o,email:i,telephone:r,company_name:n,company_address:l,customer_group_id:c,house_building:g,address:p,location:u,password:d,confirm:m,signup_otp:v},success:function(a){h.text("VERIFY"),h.toggleClass("disabled"),e("#otp-value").val(""),a.status?(iziToast.success({timeout:!1,position:"topRight",message:a.success_message}),setTimeout(function(){t.location=e(".base_url").attr("href")},3e3)):iziToast.warning({position:"topRight",message:"We couldn't verify your account. Please check the OTP"})}})):iziToast.error({position:"topRight",message:"Please enter a valid OTP"})}),e(a).delegate("#careers-submit-button","click",function(t){t.preventDefault();const a=e("#careers-first-name").val(),s=e("#careers-last-name").val(),o=e("#careers-designation").val(),i=e("#careers-about-yourself").val(),r=e("#careers-job-id").val(),n=e("#careers-cover-letter").val(),l=e("#careers-form")[0],c=l.reportValidity(),g=e("#careers-submit-button");c&&(""==grecaptcha.getResponse()?iziToast.warning({position:"topRight",message:"Please complete captcha"}):(g.text("PLEASE WAIT"),g.toggleClass("disabled"),e.ajax({url:"index.php?path=common/home/savecareers",type:"POST",dataType:"json",data:{firstname:a,lastname:s,role:o,yourself:i,job_id:r,cover:n},success:function(t){g.toggleClass("disabled"),t.status?(iziToast.success({position:"topRight",message:t.success_message}),e("#careers-form")[0].reset(),g.text("SUBMIT")):iziToast.warning({position:"topRight",title:"Oops",message:t.error_warning})}})))}),e(a).delegate("#partner-registration-button","click",function(t){t.preventDefault();const a=e("#partner-first-name").val(),s=e("#partner-last-name").val(),o=e("#partner-designation").val(),i=e("#partner-company-name").val(),r=e("#partner-email").val(),n=e("#partner-phone").val(),l=e("#partner-description").val(),c=e("#partner-registration-form")[0],g=c.reportValidity(),p=e("#partner-registration-button");g&&(""==grecaptcha.getResponse()?iziToast.warning({position:"topRight",message:"Please complete captcha"}):(p.text("PLEASE WAIT"),p.toggleClass("disabled"),e.ajax({url:"index.php?path=common/home/savepartner",type:"POST",dataType:"json",data:{firstname:a,lastname:s,designation:o,company:i,email:r,phone:n,description:l},success:function(t){p.toggleClass("disabled"),t.status?(iziToast.success({position:"topRight",message:t.success_message}),e("#partner-registration-form")[0].reset()):iziToast.warning({position:"topRight",title:"Oops",message:t.error_warning})}})))}),e("#forgot-password-btn").click(function(t){t.preventDefault(),e("#login-view").hide(),e("#forgot-password-view").show()}),e("#password-reset-button").click(function(t){t.preventDefault();const a=e("#reset-password-email").val(),s=e("#password-reset-button");0==a.length?iziToast.warning({position:"topRight",message:"Please enter your account email"}):(s.text("PLEASE WAIT"),s.toggleClass("disabled"),e.ajax({url:"index.php?path=account/forgotten",type:"POST",dataType:"json",data:{email:a},success:function(t){s.text("RESET PASSWORD"),s.toggleClass("disabled"),e("#reset-password-email").val(""),t.status?iziToast.success({timeout:!1,position:"topRight",message:t.text_message}):iziToast.warning({position:"topRight",message:"We couldn't find an account with that email address"})}}))}),e("#farmer-register-button").click(function(t){t.preventDefault();e("#farmer-first-name").val(),e("#farmer-last-name").val(),e("#farmer-email").val(),e("#farmer-phone").val(),e("#farmer-type").val(),e("#farmer-location").val(),e("farmer-produce-grown").val(),e("#farmer-register-button");""==grecaptcha.getResponse()?iziToast.warning({position:"topRight",message:"Please complete captcha"}):e("#farmer-registration-form")[0].reportValidity()&&(iziToast.success({position:"topRight",message:"Thanks for registering. We'll get in touch"}),e("#farmer-registration-form")[0].reset())}),e("#careers-job-category, #careers-job-type, #careers-job-location").change(function(){var t="index.php?path=common/home/careers",a=e("#careers-job-category").val();a&&"All Job Category"!=a&&(t+="&filter_category="+encodeURIComponent(a));var s=e("#careers-job-type").val();s&&"All Job Type"!=s&&(t+="&filter_type="+encodeURIComponent(s));var o=e("#careers-job-location").val();o&&"All Job Location"!=o&&(t+="&filter_location="+encodeURIComponent(o)),location=t})});e("#lat"),e("#lng")}(jQuery,window,document);
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNjcmlwdHMuanMiXSwibmFtZXMiOlsiJCIsIndpbmRvdyIsImRvY3VtZW50IiwidW5kZWZpbmVkIiwiZ2V0TG9jYXRpb25Pbmx5IiwibmF2aWdhdG9yIiwiZ2VvbG9jYXRpb24iLCJjb25zb2xlIiwibG9nIiwiZ2V0Q3VycmVudFBvc2l0aW9uIiwic2hvd1Bvc2l0aW9uT25seSIsImVuYWJsZUhpZ2hBY2N1cmFjeSIsInRpbWVvdXQiLCJtYXhpbXVtQWdlIiwicG9zaXRpb24iLCJ2YWwiLCJjb29yZHMiLCJsYXRpdHVkZSIsImxvbmdpdHVkZSIsInNjcm9sbCIsIiRuYXYiLCJ0b2dnbGVDbGFzcyIsInRoaXMiLCJzY3JvbGxUb3AiLCJoZWlnaHQiLCJjbGljayIsInNlY3Rpb25UbyIsImF0dHIiLCJhbmltYXRlIiwib2Zmc2V0IiwidG9wIiwiU2Nyb2xsT3V0IiwiZ3NhcCIsInRvIiwib3BhY2l0eSIsInkiLCJkdXJhdGlvbiIsImVhc2UiLCJkZWxlZ2F0ZSIsImUiLCJwcmV2ZW50RGVmYXVsdCIsImxvZ2luQnV0dG9uIiwibG9naW5fbGF0aXR1ZGUiLCJsb2dpbl9sb25naXR1ZGUiLCJlbWFpbCIsInBhc3N3b3JkIiwibGVuZ3RoIiwidGV4dCIsImFqYXgiLCJ1cmwiLCJ0eXBlIiwiZGF0YSIsImxvZ2luX21vZGUiLCJkYXRhVHlwZSIsInN1Y2Nlc3MiLCJqc29uIiwibG9jYXRpb24iLCJocmVmIiwiaXppVG9hc3QiLCJlcnJvciIsIm1lc3NhZ2UiLCJ3YXJuaW5nIiwia2V5dXAiLCJ0ZXN0IiwidmFsdWUiLCJyZXBsYWNlIiwiZmlyc3ROYW1lIiwibGFzdE5hbWUiLCJwaG9uZSIsImNvbXBhbnlOYW1lIiwiY29tcGFueUFkZHJlc3MiLCJidXNpbmVzc1R5cGUiLCJidWlsZGluZ05hbWUiLCJhZGRyZXNzTGluZSIsInBhc3N3b3JkQ29uZmlybWF0aW9uIiwicmVnaXN0cmF0aW9uVmlldyIsIm90cFZpZXciLCJyZWdpc3RlckJ1dHRvbiIsInJlZ2lzdGVyRm9ybSIsImZvcm1Jc1ZhbGlkIiwicmVwb3J0VmFsaWRpdHkiLCJncmVjYXB0Y2hhIiwiZ2V0UmVzcG9uc2UiLCJmaXJzdG5hbWUiLCJsYXN0bmFtZSIsInRlbGVwaG9uZSIsImNvbXBhbnlfbmFtZSIsImNvbXBhbnlfYWRkcmVzcyIsImN1c3RvbWVyX2dyb3VwX2lkIiwiaG91c2VfYnVpbGRpbmciLCJhZGRyZXNzIiwiY29uZmlybSIsImhpZGUiLCJzaG93IiwidGl0bGUiLCJvdHAiLCJ2ZXJpZnlCdXR0b24iLCJzaWdudXBfb3RwIiwic2V0VGltZW91dCIsInJvbGUiLCJ5b3Vyc2VsZiIsImpvYl9pZCIsImNvdmVyIiwicmVzZXQiLCJkZXNpZ25hdGlvbiIsImNvbXBhbnkiLCJkZXNjcmlwdGlvbiIsInJlc2V0QnV0dG9uIiwiY2hhbmdlIiwiZmlsdGVyX2NhdGVnb3J5IiwiZW5jb2RlVVJJQ29tcG9uZW50IiwiZmlsdGVyX3R5cGUiLCJmaWx0ZXJfbG9jYXRpb24iLCJqUXVlcnkiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7O0NBQUEsU0FBQUEsRUFBQUMsRUFBQUMsRUFBQUMsR0FFQSxZQStlQSxTQUFBQyxLQUVBQyxVQUFBQyxhQUVBQyxRQUFBQyxJQUFBLEdBRUFILFVBQUFDLFlBQUFHLG1CQUVBQyxFQUlBLE1BTUFDLG9CQUFBLEVBRUFDLFFBQUEsSUFFQUMsV0FBQSxNQU1BTixRQUFBQyxJQUFBLEdBRUFELFFBQUFDLElBQUEsa0RBU0EsUUFBQUUsR0FBQUksR0FDQVAsUUFBQUMsSUFBQSxvQkFDQUQsUUFBQUMsSUFBQU0sR0FDQWQsRUFBQSxRQUFBZSxJQUFBRCxFQUFBRSxPQUFBQyxVQUNBakIsRUFBQSxRQUFBZSxJQUFBRCxFQUFBRSxPQUFBRSxXQUNBWCxRQUFBQyxJQUFBTSxFQUFBRSxPQUFBQyxVQUNBVixRQUFBQyxJQUFBTSxFQUFBRSxPQUFBRSxXQTNoQkFkLElBQ0FKLEVBQUEsV0FFQUEsRUFBQUUsR0FBQWlCLE9BQUEsV0FDQSxHQUFBQyxHQUFBcEIsRUFBQSxhQUNBb0IsR0FBQUMs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RUFBQSx5QkFBQWUsS0FFQThGLElBQUEsb0JBQUFBLElBQ0E1RCxHQUFBLG9CQUFBNkQsbUJBQUFELEdBR0EsSUFBQUUsR0FBQS9HLEVBQUEscUJBQUFlLEtBRUFnRyxJQUFBLGdCQUFBQSxJQUNBOUQsR0FBQSxnQkFBQTZELG1CQUFBQyxHQUdBLElBQUFDLEdBQUFoSCxFQUFBLHlCQUFBZSxLQUVBaUcsSUFBQSxvQkFBQUEsSUFDQS9ELEdBQUEsb0JBQUE2RCxtQkFBQUUsSUFFQXhELFNBQUFQLEtBTUFqRCxHQUFBLFFBQ0FBLEVBQUEsU0FrREFpSCxPQUFBaEgsT0FBQUMiLCJmaWxlIjoic2NyaXB0cy5taW4uanMiLCJzb3VyY2VzQ29udGVudCI6WyIoZnVuY3Rpb24gKCQsIHdpbmRvdywgZG9jdW1lbnQsIHVuZGVmaW5lZCkge1xyXG5cclxuICAgICd1c2Ugc3RyaWN0JztcclxuICAgIGdldExvY2F0aW9uT25seSgpO1xyXG4gICAgJChmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgLy8gQ2hhbmdlIG5hdmJhciBzdHlsZSBvbiBzY3JvbGxcclxuICAgICAgICAkKGRvY3VtZW50KS5zY3JvbGwoZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICB2YXIgJG5hdiA9ICQoJy5maXhlZC10b3AnKTtcclxuICAgICAgICAgICAgJG5hdi50b2dnbGVDbGFzcygnc2Nyb2xsZWQnLCAkKHRoaXMpLnNjcm9sbFRvcCgpID4gJG5hdi5oZWlnaHQoKSk7XHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIC8vIE5hdiBsaW5rcyBzY3JvbGwgYW5pbWF0aW9uXHJcbiAgICAgICAgJCgnLm5hdi1saW5rLCAubmF2YmFyLWJyYW5kJykuY2xpY2soZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICB2YXIgc2VjdGlvblRvID0gJCh0aGlzKS5hdHRyKCdocmVmJyk7XHJcbiAgICAgICAgICAgICQoJ2h0bWwsIGJvZHknKS5hbmltYXRlKHtcclxuICAgICAgICAgICAgICAgIHNjcm9sbFRvcDogJChzZWN0aW9uVG8pLm9mZnNldCgpLnRvcFxyXG4gICAgICAgICAgICB9LCA3MDApO1xyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICAvLyBMYW5kaW5nIHBhZ2Ugc2Nyb2xsIGFuaW1hdGlvbnNcclxuICAgICAgICBTY3JvbGxPdXQoKTtcclxuXHJcbiAgICAgICAgLy8gSGVybyBzZWN0aW9uIGFuaW1hdGlvblxyXG4gICAgICAgIGdzYXAudG8oJy5hbmltLWZyb20tdG9wJywge1xyXG4gICAgICAgICAgICBvcGFjaXR5OiAxLFxyXG4gICAgICAgICAgICB5OiAwLFxyXG4gICAgICAgICAgICBkdXJhdGlvbjogLjUsXHJcbiAgICAgICAgICAgIGVhc2U6ICdlbGFzdGljJ1xyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICBnc2FwLnRvKCcuYW5pbS1mcm9tLWJvdHRvbScsIHtcclxuICAgICAgICAgICAgeTogMCxcclxuICAgICAgICAgICAgZHVyYXRpb246IC41XHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIC8vIEN1c3RvbWVyIExvZ2luXHJcbiAgICAgICAgJChkb2N1bWVudCkuZGVsZWdhdGUoJyNsb2dpbi1idXR0b24nLCAnY2xpY2snLCBmdW5jdGlvbiAoZSkge1xyXG4gICAgICAgICAgICBnZXRMb2NhdGlvbk9ubHkoKTtcclxuICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBjb25zdCBsb2dpbkJ1dHRvbiA9ICQoJyNsb2dpbi1idXR0b24nKTtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgbG9naW5fbGF0aXR1ZGUgPSAkKCcjbGF0JykudmFsKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIGxvZ2luX2xvbmdpdHVkZSA9ICQoJyNsbmcnKS52YWwoKTtcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCBlbWFpbCA9ICQoJyNsb2dpbi1lbWFpbCcpLnZhbCgpO1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHBhc3N3b3JkID0gJCgnI2xvZ2luLXBhc3N3b3JkJykudmFsKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGVtYWlsLmxlbmd0aCA+IDAgJiYgcGFzc3dvcmQubGVuZ3RoID4gMCkge1xyXG4gICAgICAgICAgICAgICAgbG9naW5CdXR0b24udGV4dCgnUExFQVNFIFdBSVQnKTtcclxuICAgICAgICAgICAgICAgIGxvZ2luQnV0dG9uLnRvZ2dsZUNsYXNzKCdkaXNhYmxlZCcpO1xyXG4gICAgICAgICAgICAgICAgJC5hamF4KHtcclxuICAgICAgICAgICAgICAgICAgICB1cmw6ICdpbmRleC5waHA/cGF0aD1hY2NvdW50L2xvZ2luL2xvZ2luJyxcclxuICAgICAgICAgICAgICAgICAgICB0eXBlOiAncG9zdCcsXHJcbiAgICAgICAgICAgICAgICAgICAgZGF0YToge2VtYWlsOiBlbWFpbCwgcGFzc3dvcmQ6IHBhc3N3b3JkLCBsb2dpbl9sYXRpdHVkZTpsb2dpbl9sYXRpdHVkZSwgbG9naW5fbG9uZ2l0dWRlOmxvZ2luX2xvbmdpdHVkZSwgbG9naW5fbW9kZTond2ViJ30sXHJcbiAgICAgICAgICAgICAgICAgICAgZGF0YVR5cGU6ICdqc29uJyxcclxuICAgICAgICAgICAgICAgICAgICBzdWNjZXNzOiBmdW5jdGlvbiAoanNvbikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoanNvblsnc3RhdHVzJ10pIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChqc29uWydyZWRpcmVjdCddICE9IG51bGwpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB3aW5kb3cubG9jYXRpb24uaHJlZiA9IGpzb25bJ3JlZGlyZWN0J107XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGpzb25bJ3RlbXBwYXNzd29yZCddID09ICcxJykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxvY2F0aW9uID0gJCgnLmJhc2VfdXJsJykuYXR0cignaHJlZicpICsgJy9jaGFuZ2VwYXNzJztcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZygkKCcuYmFzZV91cmwnKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxvY2F0aW9uID0gJCgnLmJhc2VfdXJsJykuYXR0cignaHJlZicpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaXppVG9hc3QuZXJyb3Ioe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBvc2l0aW9uOiAndG9wUmlnaHQnLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1lc3NhZ2U6IGpzb25bJ2Vycm9yX3dhcm5pbmcnXVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsb2dpbkJ1dHRvbi50ZXh0KCdMT0dJTicpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbG9naW5CdXR0b24udG9nZ2xlQ2xhc3MoJ2Rpc2FibGVkJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIGl6aVRvYXN0Lndhcm5pbmcoe1xyXG4gICAgICAgICAgICAgICAgICAgIHBvc2l0aW9uOiAndG9wUmlnaHQnLFxyXG4gICAgICAgICAgICAgICAgICAgIG1lc3NhZ2U6ICdQbGVhc2UgZW50ZXIgeW91ciBlbWFpbCBhbmQgcGFzc3dvcmQnXHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICAvLyBDdXN0b21lciBSZWdpc3RyYXRpb25cclxuXHJcbiAgICAgICAgJCgnI3JlZ2lzdGVyLXBob25lJykua2V5dXAoZnVuY3Rpb24gKGUpIHtcclxuICAgICAgICAgICAgaWYgKC9cXEQvZy50ZXN0KHRoaXMudmFsdWUpKSB7XHJcbiAgICAgICAgICAgICAgICAvLyBGaWx0ZXIgb3V0IG5vbi1kaWdpdHMgZnJvbSBpbnB1dCB2YWx1ZVxyXG4gICAgICAgICAgICAgICAgdGhpcy52YWx1ZSA9IHRoaXMudmFsdWUucmVwbGFjZSgvXFxEL2csICcnKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICAkKGRvY3VtZW50KS5kZWxlZ2F0ZSgnI3JlZ2lzdGVyLWJ1dHRvbicsICdjbGljaycsIGZ1bmN0aW9uIChlKSB7XHJcbiAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcclxuXHJcbiAgICAgICAgICAgIGNvbnN0IGZpcnN0TmFtZSA9ICQoJyNyZWdpc3Rlci1maXJzdC1uYW1lJykudmFsKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgbGFzdE5hbWUgPSAkKCcjcmVnaXN0ZXItbGFzdC1uYW1lJykudmFsKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgZW1haWwgPSAkKCcjcmVnaXN0ZXItZW1haWwnKS52YWwoKTtcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCBwaG9uZSA9ICQoJyNyZWdpc3Rlci1waG9uZScpLnZhbCgpO1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGNvbXBhbnlOYW1lID0gJCgnI3JlZ2lzdGVyLWNvbXBhbnktbmFtZScpLnZhbCgpO1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGNvbXBhbnlBZGRyZXNzID0gJCgnI3JlZ2lzdGVyLWNvbXBhbnktYWRkcmVzcycpLnZhbCgpO1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGJ1c2luZXNzVHlwZSA9ICQoJyNyZWdpc3Rlci1idXNpbmVzcy10eXBlJykudmFsKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgYnVpbGRpbmdOYW1lID0gJCgnI3JlZ2lzdGVyLWJ1aWxkaW5nLW5hbWUnKS52YWwoKTtcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCBhZGRyZXNzTGluZSA9ICQoJyNyZWdpc3Rlci1hZGRyZXNzLWxpbmUnKS52YWwoKTtcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCBsb2NhdGlvbiA9ICQoJyNyZWdpc3Rlci1sb2NhdGlvbicpLnZhbCgpO1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHBhc3N3b3JkID0gJCgnI3JlZ2lzdGVyLXBhc3N3b3JkJykudmFsKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgcGFzc3dvcmRDb25maXJtYXRpb24gPSAkKCcjcmVnaXN0ZXItcGFzc3dvcmQtY29uZmlybScpLnZhbCgpO1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHJlZ2lzdHJhdGlvblZpZXcgPSAkKCcjcmVnaXN0cmF0aW9uLXZpZXcnKTtcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCBvdHBWaWV3ID0gJCgnI290cC12aWV3Jyk7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgcmVnaXN0ZXJCdXR0b24gPSAkKCcjcmVnaXN0ZXItYnV0dG9uJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgcmVnaXN0ZXJGb3JtID0gJCgnI3JlZ2lzdGVyLWZvcm0nKVswXTtcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCBmb3JtSXNWYWxpZCA9IHJlZ2lzdGVyRm9ybS5yZXBvcnRWYWxpZGl0eSgpO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChmb3JtSXNWYWxpZCkge1xyXG4gICAgICAgICAgICAgICAgaWYgKHBhc3N3b3JkQ29uZmlybWF0aW9uICE9PSBwYXNzd29yZCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGl6aVRvYXN0Lndhcm5pbmcoe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBwb3NpdGlvbjogJ3RvcFJpZ2h0JyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgbWVzc2FnZTogJ1Bhc3N3b3JkcyBkbyBubyBtYXRjaCdcclxuICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGdyZWNhcHRjaGEuZ2V0UmVzcG9uc2UoKSA9PSAnJykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpemlUb2FzdC53YXJuaW5nKHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBvc2l0aW9uOiAndG9wUmlnaHQnLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbWVzc2FnZTogJ1BsZWFzZSBjb21wbGV0ZSBjYXB0Y2hhJ1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZWdpc3RlckJ1dHRvbi50ZXh0KCdQTEVBU0UgV0FJVCcpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZWdpc3RlckJ1dHRvbi50b2dnbGVDbGFzcygnZGlzYWJsZWQnKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICQuYWpheCh7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB1cmw6ICdpbmRleC5waHA/cGF0aD1hY2NvdW50L3JlZ2lzdGVyL3JlZ2lzdGVyX3NlbmRfb3RwJyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6ICdQT1NUJyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGFUeXBlOiAnanNvbicsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZmlyc3RuYW1lOiBmaXJzdE5hbWUsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGFzdG5hbWU6IGxhc3ROYW1lLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVtYWlsOiBlbWFpbCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0ZWxlcGhvbmU6IHBob25lLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbXBhbnlfbmFtZTogY29tcGFueU5hbWUsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29tcGFueV9hZGRyZXNzOiBjb21wYW55QWRkcmVzcyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjdXN0b21lcl9ncm91cF9pZDogYnVzaW5lc3NUeXBlLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGhvdXNlX2J1aWxkaW5nOiBidWlsZGluZ05hbWUsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYWRkcmVzczogYWRkcmVzc0xpbmUsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbG9jYXRpb246IGxvY2F0aW9uLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBhc3N3b3JkOiBwYXNzd29yZCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25maXJtOiBwYXNzd29yZENvbmZpcm1hdGlvblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN1Y2Nlc3M6IGZ1bmN0aW9uIChqc29uKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVnaXN0ZXJCdXR0b24udGV4dCgnU0lHTiBVUCcpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlZ2lzdGVyQnV0dG9uLnRvZ2dsZUNsYXNzKCdkaXNhYmxlZCcpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoanNvblsnc3RhdHVzJ10pIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaXppVG9hc3Quc3VjY2Vzcyh7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwb3NpdGlvbjogJ3RvcFJpZ2h0JyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1lc3NhZ2U6IGpzb25bJ3N1Y2Nlc3NfbWVzc2FnZSddXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVnaXN0cmF0aW9uVmlldy5oaWRlKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG90cFZpZXcuc2hvdygpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGl6aVRvYXN0Lndhcm5pbmcoe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcG9zaXRpb246ICd0b3BSaWdodCcsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aXRsZTogJ09vcHMnLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbWVzc2FnZToganNvblsnZXJyb3Jfd2FybmluZyddXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIC8vIE9UUCBWZXJpZmljYXRpb25cclxuICAgICAgICAkKGRvY3VtZW50KS5kZWxlZ2F0ZSgnI290cC12ZXJpZnktYnV0dG9uJywgJ2NsaWNrJywgZnVuY3Rpb24gKGUpIHtcclxuICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xyXG5cclxuICAgICAgICAgICAgY29uc3QgZmlyc3ROYW1lID0gJCgnI3JlZ2lzdGVyLWZpcnN0LW5hbWUnKS52YWwoKTtcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCBsYXN0TmFtZSA9ICQoJyNyZWdpc3Rlci1sYXN0LW5hbWUnKS52YWwoKTtcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCBlbWFpbCA9ICQoJyNyZWdpc3Rlci1lbWFpbCcpLnZhbCgpO1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHBob25lID0gJCgnI3JlZ2lzdGVyLXBob25lJykudmFsKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgY29tcGFueU5hbWUgPSAkKCcjcmVnaXN0ZXItY29tcGFueS1uYW1lJykudmFsKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgY29tcGFueUFkZHJlc3MgPSAkKCcjcmVnaXN0ZXItY29tcGFueS1hZGRyZXNzJykudmFsKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgYnVzaW5lc3NUeXBlID0gJCgnI3JlZ2lzdGVyLWJ1c2luZXNzLXR5cGUnKS52YWwoKTtcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCBidWlsZGluZ05hbWUgPSAkKCcjcmVnaXN0ZXItYnVpbGRpbmctbmFtZScpLnZhbCgpO1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGFkZHJlc3NMaW5lID0gJCgnI3JlZ2lzdGVyLWFkZHJlc3MtbGluZScpLnZhbCgpO1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGxvY2F0aW9uID0gJCgnI3JlZ2lzdGVyLWxvY2F0aW9uJykudmFsKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgcGFzc3dvcmQgPSAkKCcjcmVnaXN0ZXItcGFzc3dvcmQnKS52YWwoKTtcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCBwYXNzd29yZENvbmZpcm1hdGlvbiA9ICQoJyNyZWdpc3Rlci1wYXNzd29yZC1jb25maXJtJykudmFsKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3Qgb3RwID0gJCgnI290cC12YWx1ZScpLnZhbCgpO1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHZlcmlmeUJ1dHRvbiA9ICQoJyNvdHAtdmVyaWZ5LWJ1dHRvbicpO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChvdHAubGVuZ3RoID4gMykge1xyXG4gICAgICAgICAgICAgICAgdmVyaWZ5QnV0dG9uLnRleHQoJ1BMRUFTRSBXQUlUJyk7XHJcbiAgICAgICAgICAgICAgICB2ZXJpZnlCdXR0b24udG9nZ2xlQ2xhc3MoJ2Rpc2FibGVkJyk7XHJcblxyXG4gICAgICAgICAgICAgICAgJC5hamF4KHtcclxuICAgICAgICAgICAgICAgICAgICB1cmw6ICdpbmRleC5waHA/cGF0aD1hY2NvdW50L3JlZ2lzdGVyL3JlZ2lzdGVyX3ZlcmlmeV9vdHAnLFxyXG4gICAgICAgICAgICAgICAgICAgIHR5cGU6ICdQT1NUJyxcclxuICAgICAgICAgICAgICAgICAgICBkYXRhVHlwZTogJ2pzb24nLFxyXG4gICAgICAgICAgICAgICAgICAgIGRhdGE6IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZmlyc3RuYW1lOiBmaXJzdE5hbWUsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGxhc3RuYW1lOiBsYXN0TmFtZSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgZW1haWw6IGVtYWlsLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB0ZWxlcGhvbmU6IHBob25lLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb21wYW55X25hbWU6IGNvbXBhbnlOYW1lLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb21wYW55X2FkZHJlc3M6IGNvbXBhbnlBZGRyZXNzLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBjdXN0b21lcl9ncm91cF9pZDogYnVzaW5lc3NUeXBlLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBob3VzZV9idWlsZGluZzogYnVpbGRpbmdOYW1lLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBhZGRyZXNzOiBhZGRyZXNzTGluZSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgbG9jYXRpb246IGxvY2F0aW9uLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBwYXNzd29yZDogcGFzc3dvcmQsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbmZpcm06IHBhc3N3b3JkQ29uZmlybWF0aW9uLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBzaWdudXBfb3RwOiBvdHBcclxuICAgICAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgICAgIHN1Y2Nlc3M6IGZ1bmN0aW9uIChqc29uKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZlcmlmeUJ1dHRvbi50ZXh0KCdWRVJJRlknKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdmVyaWZ5QnV0dG9uLnRvZ2dsZUNsYXNzKCdkaXNhYmxlZCcpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAkKCcjb3RwLXZhbHVlJykudmFsKCcnKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChqc29uWydzdGF0dXMnXSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaXppVG9hc3Quc3VjY2Vzcyh7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGltZW91dDogZmFsc2UsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcG9zaXRpb246ICd0b3BSaWdodCcsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbWVzc2FnZToganNvblsnc3VjY2Vzc19tZXNzYWdlJ11cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdpbmRvdy5sb2NhdGlvbiA9ICQoJy5iYXNlX3VybCcpLmF0dHIoJ2hyZWYnKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sIDMwMDApXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpemlUb2FzdC53YXJuaW5nKHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwb3NpdGlvbjogJ3RvcFJpZ2h0JyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtZXNzYWdlOiAnV2UgY291bGRuXFwndCB2ZXJpZnkgeW91ciBhY2NvdW50LiBQbGVhc2UgY2hlY2sgdGhlIE9UUCdcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBpemlUb2FzdC5lcnJvcih7XHJcbiAgICAgICAgICAgICAgICAgICAgcG9zaXRpb246ICd0b3BSaWdodCcsXHJcbiAgICAgICAgICAgICAgICAgICAgbWVzc2FnZTogJ1BsZWFzZSBlbnRlciBhIHZhbGlkIE9UUCdcclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICQoZG9jdW1lbnQpLmRlbGVnYXRlKCcjY2FyZWVycy1zdWJtaXQtYnV0dG9uJywgJ2NsaWNrJywgZnVuY3Rpb24gKGUpIHtcclxuICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGZpcnN0TmFtZSA9ICQoJyNjYXJlZXJzLWZpcnN0LW5hbWUnKS52YWwoKTtcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCBsYXN0TmFtZSA9ICQoJyNjYXJlZXJzLWxhc3QtbmFtZScpLnZhbCgpO1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHJvbGUgPSAkKCcjY2FyZWVycy1kZXNpZ25hdGlvbicpLnZhbCgpO1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHlvdXJzZWxmID0gJCgnI2NhcmVlcnMtYWJvdXQteW91cnNlbGYnKS52YWwoKTtcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCBqb2JfaWQgPSAkKCcjY2FyZWVycy1qb2ItaWQnKS52YWwoKTtcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCBjb3ZlciA9ICQoJyNjYXJlZXJzLWNvdmVyLWxldHRlcicpLnZhbCgpO1xyXG4gICAgICAgICAgICAgICAgICAgIC8vIGNvbnN0IGN2X3BhdGggPSAkKCcjY2FyZWVycy1jdi1wYXRoJykudmFsKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgcmVnaXN0ZXJGb3JtID0gJCgnI2NhcmVlcnMtZm9ybScpWzBdO1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGZvcm1Jc1ZhbGlkID0gcmVnaXN0ZXJGb3JtLnJlcG9ydFZhbGlkaXR5KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgcmVnaXN0ZXJCdXR0b24gPSAkKCcjY2FyZWVycy1zdWJtaXQtYnV0dG9uJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGZvcm1Jc1ZhbGlkKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoZ3JlY2FwdGNoYS5nZXRSZXNwb25zZSgpID09ICcnKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaXppVG9hc3Qud2FybmluZyh7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHBvc2l0aW9uOiAndG9wUmlnaHQnLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBtZXNzYWdlOiAnUGxlYXNlIGNvbXBsZXRlIGNhcHRjaGEnXHJcbiAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIHJlZ2lzdGVyQnV0dG9uLnRleHQoJ1BMRUFTRSBXQUlUJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgcmVnaXN0ZXJCdXR0b24udG9nZ2xlQ2xhc3MoJ2Rpc2FibGVkJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgJC5hamF4KHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdXJsOiAnaW5kZXgucGhwP3BhdGg9Y29tbW9uL2hvbWUvc2F2ZWNhcmVlcnMnLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiAnUE9TVCcsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGRhdGFUeXBlOiAnanNvbicsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGRhdGE6IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZpcnN0bmFtZTogZmlyc3ROYW1lLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbGFzdG5hbWU6IGxhc3ROYW1lLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcm9sZTogcm9sZSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHlvdXJzZWxmOiB5b3Vyc2VsZixcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGpvYl9pZDogam9iX2lkLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY292ZXI6IGNvdmVyLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy9jdl9wYXRoOiBjdl9wYXRoa1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBzdWNjZXNzOiBmdW5jdGlvbiAoanNvbikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVnaXN0ZXJCdXR0b24udG9nZ2xlQ2xhc3MoJ2Rpc2FibGVkJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoanNvblsnc3RhdHVzJ10pIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpemlUb2FzdC5zdWNjZXNzKHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcG9zaXRpb246ICd0b3BSaWdodCcsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1lc3NhZ2U6IGpzb25bJ3N1Y2Nlc3NfbWVzc2FnZSddXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJCgnI2NhcmVlcnMtZm9ybScpWzBdLnJlc2V0KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVnaXN0ZXJCdXR0b24udGV4dCgnU1VCTUlUJyk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpemlUb2FzdC53YXJuaW5nKHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcG9zaXRpb246ICd0b3BSaWdodCcsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRpdGxlOiAnT29wcycsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1lc3NhZ2U6IGpzb25bJ2Vycm9yX3dhcm5pbmcnXVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgJChkb2N1bWVudCkuZGVsZWdhdGUoJyNwYXJ0bmVyLXJlZ2lzdHJhdGlvbi1idXR0b24nLCAnY2xpY2snLCBmdW5jdGlvbiAoZSkge1xyXG4gICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgZmlyc3ROYW1lID0gJCgnI3BhcnRuZXItZmlyc3QtbmFtZScpLnZhbCgpO1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGxhc3ROYW1lID0gJCgnI3BhcnRuZXItbGFzdC1uYW1lJykudmFsKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgZGVzaWduYXRpb24gPSAkKCcjcGFydG5lci1kZXNpZ25hdGlvbicpLnZhbCgpO1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGNvbXBhbnkgPSAkKCcjcGFydG5lci1jb21wYW55LW5hbWUnKS52YWwoKTtcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCBlbWFpbCA9ICQoJyNwYXJ0bmVyLWVtYWlsJykudmFsKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgcGhvbmUgPSAkKCcjcGFydG5lci1waG9uZScpLnZhbCgpO1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGRlc2NyaXB0aW9uID0gJCgnI3BhcnRuZXItZGVzY3JpcHRpb24nKS52YWwoKTtcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCByZWdpc3RlckZvcm0gPSAkKCcjcGFydG5lci1yZWdpc3RyYXRpb24tZm9ybScpWzBdO1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGZvcm1Jc1ZhbGlkID0gcmVnaXN0ZXJGb3JtLnJlcG9ydFZhbGlkaXR5KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgcmVnaXN0ZXJCdXR0b24gPSAkKCcjcGFydG5lci1yZWdpc3RyYXRpb24tYnV0dG9uJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGZvcm1Jc1ZhbGlkKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoZ3JlY2FwdGNoYS5nZXRSZXNwb25zZSgpID09ICcnKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaXppVG9hc3Qud2FybmluZyh7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHBvc2l0aW9uOiAndG9wUmlnaHQnLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBtZXNzYWdlOiAnUGxlYXNlIGNvbXBsZXRlIGNhcHRjaGEnXHJcbiAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIHJlZ2lzdGVyQnV0dG9uLnRleHQoJ1BMRUFTRSBXQUlUJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgcmVnaXN0ZXJCdXR0b24udG9nZ2xlQ2xhc3MoJ2Rpc2FibGVkJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgJC5hamF4KHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdXJsOiAnaW5kZXgucGhwP3BhdGg9Y29tbW9uL2hvbWUvc2F2ZXBhcnRuZXInLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiAnUE9TVCcsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGRhdGFUeXBlOiAnanNvbicsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGRhdGE6IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZpcnN0bmFtZTogZmlyc3ROYW1lLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbGFzdG5hbWU6IGxhc3ROYW1lLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZGVzaWduYXRpb246IGRlc2lnbmF0aW9uLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29tcGFueTogY29tcGFueSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVtYWlsOiBlbWFpbCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBob25lOiBwaG9uZSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRlc2NyaXB0aW9uOiBkZXNjcmlwdGlvblxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBzdWNjZXNzOiBmdW5jdGlvbiAoanNvbikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVnaXN0ZXJCdXR0b24udG9nZ2xlQ2xhc3MoJ2Rpc2FibGVkJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoanNvblsnc3RhdHVzJ10pIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpemlUb2FzdC5zdWNjZXNzKHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcG9zaXRpb246ICd0b3BSaWdodCcsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1lc3NhZ2U6IGpzb25bJ3N1Y2Nlc3NfbWVzc2FnZSddXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJCgnI3BhcnRuZXItcmVnaXN0cmF0aW9uLWZvcm0nKVswXS5yZXNldCgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpemlUb2FzdC53YXJuaW5nKHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcG9zaXRpb246ICd0b3BSaWdodCcsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRpdGxlOiAnT29wcycsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1lc3NhZ2U6IGpzb25bJ2Vycm9yX3dhcm5pbmcnXVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgJCgnI2ZvcmdvdC1wYXNzd29yZC1idG4nKS5jbGljayhmdW5jdGlvbiAoZSkge1xyXG4gICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XHJcblxyXG4gICAgICAgICAgICAkKCcjbG9naW4tdmlldycpLmhpZGUoKTtcclxuICAgICAgICAgICAgJCgnI2ZvcmdvdC1wYXNzd29yZC12aWV3Jykuc2hvdygpO1xyXG5cclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgJCgnI3Bhc3N3b3JkLXJlc2V0LWJ1dHRvbicpLmNsaWNrKGZ1bmN0aW9uIChlKSB7XHJcbiAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcclxuXHJcbiAgICAgICAgICAgIGNvbnN0IGVtYWlsID0gJCgnI3Jlc2V0LXBhc3N3b3JkLWVtYWlsJykudmFsKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgcmVzZXRCdXR0b24gPSAkKCcjcGFzc3dvcmQtcmVzZXQtYnV0dG9uJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGVtYWlsLmxlbmd0aCA9PSAwKSB7XHJcbiAgICAgICAgICAgICAgICBpemlUb2FzdC53YXJuaW5nKHtcclxuICAgICAgICAgICAgICAgICAgICBwb3NpdGlvbjogJ3RvcFJpZ2h0JyxcclxuICAgICAgICAgICAgICAgICAgICBtZXNzYWdlOiAnUGxlYXNlIGVudGVyIHlvdXIgYWNjb3VudCBlbWFpbCdcclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgcmVzZXRCdXR0b24udGV4dCgnUExFQVNFIFdBSVQnKTtcclxuICAgICAgICAgICAgICAgIHJlc2V0QnV0dG9uLnRvZ2dsZUNsYXNzKCdkaXNhYmxlZCcpO1xyXG5cclxuICAgICAgICAgICAgICAgICQuYWpheCh7XHJcbiAgICAgICAgICAgICAgICAgICAgdXJsOiAnaW5kZXgucGhwP3BhdGg9YWNjb3VudC9mb3Jnb3R0ZW4nLFxyXG4gICAgICAgICAgICAgICAgICAgIHR5cGU6ICdQT1NUJyxcclxuICAgICAgICAgICAgICAgICAgICBkYXRhVHlwZTogJ2pzb24nLFxyXG4gICAgICAgICAgICAgICAgICAgIGRhdGE6IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZW1haWw6IGVtYWlsXHJcbiAgICAgICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgICAgICBzdWNjZXNzOiBmdW5jdGlvbiAoanNvbikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXNldEJ1dHRvbi50ZXh0KCdSRVNFVCBQQVNTV09SRCcpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXNldEJ1dHRvbi50b2dnbGVDbGFzcygnZGlzYWJsZWQnKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgJCgnI3Jlc2V0LXBhc3N3b3JkLWVtYWlsJykudmFsKCcnKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChqc29uWydzdGF0dXMnXSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaXppVG9hc3Quc3VjY2Vzcyh7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGltZW91dDogZmFsc2UsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcG9zaXRpb246ICd0b3BSaWdodCcsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbWVzc2FnZToganNvblsndGV4dF9tZXNzYWdlJ11cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaXppVG9hc3Qud2FybmluZyh7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcG9zaXRpb246ICd0b3BSaWdodCcsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbWVzc2FnZTogJ1dlIGNvdWxkblxcJ3QgZmluZCBhbiBhY2NvdW50IHdpdGggdGhhdCBlbWFpbCBhZGRyZXNzJ1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICAkKCcjZmFybWVyLXJlZ2lzdGVyLWJ1dHRvbicpLmNsaWNrKGZ1bmN0aW9uIChlKSB7XHJcbiAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcclxuXHJcbiAgICAgICAgICAgIGNvbnN0IGZpcnN0TmFtZSA9ICQoJyNmYXJtZXItZmlyc3QtbmFtZScpLnZhbCgpO1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGxhc3ROYW1lID0gJCgnI2Zhcm1lci1sYXN0LW5hbWUnKS52YWwoKTtcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCBlbWFpbCA9ICQoJyNmYXJtZXItZW1haWwnKS52YWwoKTtcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCBwaG9uZSA9ICQoJyNmYXJtZXItcGhvbmUnKS52YWwoKTtcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCBmYXJtZXJUeXBlID0gJCgnI2Zhcm1lci10eXBlJykudmFsKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgZmFybUxvY2F0aW9uID0gJCgnI2Zhcm1lci1sb2NhdGlvbicpLnZhbCgpO1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHByb2R1Y2VEZXNjcmlwdGlvbiA9ICQoJ2Zhcm1lci1wcm9kdWNlLWdyb3duJykudmFsKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgcmVnaXN0ZXJCdXR0b24gPSAkKCcjZmFybWVyLXJlZ2lzdGVyLWJ1dHRvbicpO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChncmVjYXB0Y2hhLmdldFJlc3BvbnNlKCkgPT0gJycpIHtcclxuICAgICAgICAgICAgICAgIGl6aVRvYXN0Lndhcm5pbmcoe1xyXG4gICAgICAgICAgICAgICAgICAgIHBvc2l0aW9uOiAndG9wUmlnaHQnLFxyXG4gICAgICAgICAgICAgICAgICAgIG1lc3NhZ2U6ICdQbGVhc2UgY29tcGxldGUgY2FwdGNoYSdcclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgaWYgKCQoJyNmYXJtZXItcmVnaXN0cmF0aW9uLWZvcm0nKVswXS5yZXBvcnRWYWxpZGl0eSgpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaXppVG9hc3Quc3VjY2Vzcyh7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHBvc2l0aW9uOiAndG9wUmlnaHQnLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBtZXNzYWdlOiAnVGhhbmtzIGZvciByZWdpc3RlcmluZy4gV2VcXCdsbCBnZXQgaW4gdG91Y2gnXHJcbiAgICAgICAgICAgICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICQoJyNmYXJtZXItcmVnaXN0cmF0aW9uLWZvcm0nKVswXS5yZXNldCgpO1xyXG4gICAgICAgICAgICAgICAgICAgIC8vIHJlZ2lzdGVyQnV0dG9uLnRleHQoJ1BMRUFTRSBXQUlUJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgLy8gcmVnaXN0ZXJCdXR0b24udG9nZ2xlQ2xhc3MoJ2Rpc2FibGVkJyk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIC8vICQuYWpheCh7XHJcbiAgICAgICAgICAgICAgICAgICAgLy8gICB1cmw6ICdpbmRleC5waHA/cGF0aD1hY2NvdW50L2Zhcm1lcnJlZ2lzdGVyL3JlZ2lzdGVyJyxcclxuICAgICAgICAgICAgICAgICAgICAvLyAgIHR5cGU6ICdQT1NUJyxcclxuICAgICAgICAgICAgICAgICAgICAvLyAgIGRhdGFUeXBlOiAnanNvbicsXHJcbiAgICAgICAgICAgICAgICAgICAgLy8gICBkYXRhOiB7IFxyXG4gICAgICAgICAgICAgICAgICAgIC8vICAgICBuYW1lOiBmaXJzdE5hbWUgKyAnICcgKyBsYXN0TmFtZSxcclxuICAgICAgICAgICAgICAgICAgICAvLyAgICAgZW1haWw6IGVtYWlsLFxyXG4gICAgICAgICAgICAgICAgICAgIC8vICAgICB0ZWxlcGhvbmU6IHBob25lXHJcbiAgICAgICAgICAgICAgICAgICAgLy8gICB9LFxyXG4gICAgICAgICAgICAgICAgICAgIC8vICAgc3VjY2VzczogZnVuY3Rpb24gKGpzb24pIHtcclxuICAgICAgICAgICAgICAgICAgICAvLyAgICAgcmVnaXN0ZXJCdXR0b24udGV4dCgnUkVHSVNURVInKTtcclxuICAgICAgICAgICAgICAgICAgICAvLyAgICAgcmVnaXN0ZXJCdXR0b24udG9nZ2xlQ2xhc3MoJ2Rpc2FibGVkJyk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIC8vICAgICBpZiAoanNvblsnc3RhdHVzJ10pIHtcclxuICAgICAgICAgICAgICAgICAgICAvLyAgICAgICBpemlUb2FzdC5zdWNjZXNzKHtcclxuICAgICAgICAgICAgICAgICAgICAvLyAgICAgICAgIHBvc2l0aW9uOiAndG9wUmlnaHQnLFxyXG4gICAgICAgICAgICAgICAgICAgIC8vICAgICAgICAgbWVzc2FnZToganNvblsnc3VjY2Vzc19tZXNzYWdlJ11cclxuICAgICAgICAgICAgICAgICAgICAvLyAgICAgICB9KTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgLy8gICAgICAgJCgnI2Zhcm1lci1yZWdpc3RyYXRpb24tZm9ybScpWzBdLnJlc2V0KCk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIC8vICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIC8vICAgICAgIGl6aVRvYXN0Lndhcm5pbmcoe1xyXG4gICAgICAgICAgICAgICAgICAgIC8vICAgICAgICAgcG9zaXRpb246ICd0b3BSaWdodCcsXHJcbiAgICAgICAgICAgICAgICAgICAgLy8gICAgICAgICB0aXRsZTogJ09vcHMnLFxyXG4gICAgICAgICAgICAgICAgICAgIC8vICAgICAgICAgbWVzc2FnZTogJ1dlIGNvdWxkblxcJ3QgcmVnaXN0ZXIgeW91LiBQbGVhc2UgdHJ5IGFnYWluJ1xyXG4gICAgICAgICAgICAgICAgICAgIC8vICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgIC8vICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgLy8gICB9XHJcbiAgICAgICAgICAgICAgICAgICAgLy8gfSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgJChcIiNjYXJlZXJzLWpvYi1jYXRlZ29yeSwgI2NhcmVlcnMtam9iLXR5cGUsICNjYXJlZXJzLWpvYi1sb2NhdGlvblwiKS5jaGFuZ2UoZnVuY3Rpb24gKCkge1xyXG5cclxuICAgICAgICAgICAgdmFyIHVybCA9ICdpbmRleC5waHA/cGF0aD1jb21tb24vaG9tZS9jYXJlZXJzJztcclxuXHJcblxyXG4gICAgICAgICAgICB2YXIgZmlsdGVyX2NhdGVnb3J5ID0gJCgnI2NhcmVlcnMtam9iLWNhdGVnb3J5JykudmFsKCk7XHJcblxyXG4gICAgICAgICAgICBpZiAoZmlsdGVyX2NhdGVnb3J5ICYmIGZpbHRlcl9jYXRlZ29yeSAhPSBcIkFsbCBKb2IgQ2F0ZWdvcnlcIikge1xyXG4gICAgICAgICAgICAgICAgdXJsICs9ICcmZmlsdGVyX2NhdGVnb3J5PScgKyBlbmNvZGVVUklDb21wb25lbnQoZmlsdGVyX2NhdGVnb3J5KTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgdmFyIGZpbHRlcl90eXBlID0gJCgnI2NhcmVlcnMtam9iLXR5cGUnKS52YWwoKTtcclxuXHJcbiAgICAgICAgICAgIGlmIChmaWx0ZXJfdHlwZSAmJiBmaWx0ZXJfdHlwZSAhPSBcIkFsbCBKb2IgVHlwZVwiKSB7XHJcbiAgICAgICAgICAgICAgICB1cmwgKz0gJyZmaWx0ZXJfdHlwZT0nICsgZW5jb2RlVVJJQ29tcG9uZW50KGZpbHRlcl90eXBlKTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgdmFyIGZpbHRlcl9sb2NhdGlvbiA9ICQoJyNjYXJlZXJzLWpvYi1sb2NhdGlvbicpLnZhbCgpO1xyXG5cclxuICAgICAgICAgICAgaWYgKGZpbHRlcl9sb2NhdGlvbiAmJiBmaWx0ZXJfbG9jYXRpb24gIT0gXCJBbGwgSm9iIExvY2F0aW9uXCIpIHtcclxuICAgICAgICAgICAgICAgIHVybCArPSAnJmZpbHRlcl9sb2NhdGlvbj0nICsgZW5jb2RlVVJJQ29tcG9uZW50KGZpbHRlcl9sb2NhdGlvbik7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgbG9jYXRpb24gPSB1cmw7XHJcblxyXG4gICAgICAgIH0pO1xyXG4gICAgfSk7XHJcbiAgICBcclxuICAgIFxyXG4gICAgdmFyIGxhdCA9ICQoXCIjbGF0XCIpO1xyXG4gICAgdmFyIGxuZyA9ICQoXCIjbG5nXCIpO1xyXG5cclxuICAgICAgICAgZnVuY3Rpb24gZ2V0TG9jYXRpb25Pbmx5KCkge1xyXG4gICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICBpZiAobmF2aWdhdG9yLmdlb2xvY2F0aW9uKSB7ICAgIFxyXG5cclxuICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZygxKTsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFxyXG5cclxuICAgICAgICAgICAgICAgICAgICBuYXZpZ2F0b3IuZ2VvbG9jYXRpb24uZ2V0Q3VycmVudFBvc2l0aW9uKFxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgc2hvd1Bvc2l0aW9uT25seSwgXHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBFcnJvciBmdW5jdGlvblxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgbnVsbCwvL3Nob3dFcnJvciwgXHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBPcHRpb25zLiBTZWUgTUROIGZvciBkZXRhaWxzLlxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAge1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgZW5hYmxlSGlnaEFjY3VyYWN5OiB0cnVlLFxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgdGltZW91dDogNTAwMCxcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG1heGltdW1BZ2U6IDBcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pOyAgICAgICAgICAgICAgICAgICAgXHJcblxyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHsgXHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKDIpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKFwiR2VvbG9jYXRpb24gaXMgbm90IHN1cHBvcnRlZCBieSB0aGlzIGJyb3dzZXIuXCIpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgIC8qbGF0LmlubmVySFRNTCA9ICAgMDtcclxuXHJcbiAgICAgICAgICAgICAgICAgICBsbmcuaW5uZXJIVE1MID0gMDsqL1xyXG5cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgfVxyXG4gICAgICAgICBcclxuICAgICAgICAgZnVuY3Rpb24gc2hvd1Bvc2l0aW9uT25seShwb3NpdGlvbikge1xyXG4gICAgICAgICAgICAgY29uc29sZS5sb2coJ3Nob3dQb3NpdGlvbk9ubHknKTtcclxuICAgICAgICAgICAgIGNvbnNvbGUubG9nKHBvc2l0aW9uKTtcclxuICAgICAgICAgICAgICQoXCIjbGF0XCIpLnZhbChwb3NpdGlvbi5jb29yZHMubGF0aXR1ZGUpO1xyXG4gICAgICAgICAgICAgJChcIiNsbmdcIikudmFsKHBvc2l0aW9uLmNvb3Jkcy5sb25naXR1ZGUpO1xyXG4gICAgICAgICAgICAgY29uc29sZS5sb2cocG9zaXRpb24uY29vcmRzLmxhdGl0dWRlKTtcclxuICAgICAgICAgICAgIGNvbnNvbGUubG9nKHBvc2l0aW9uLmNvb3Jkcy5sb25naXR1ZGUpO1xyXG4gICAgICAgICB9XHJcblxyXG59KShqUXVlcnksIHdpbmRvdywgZG9jdW1lbnQpO1xyXG4iXX0=
