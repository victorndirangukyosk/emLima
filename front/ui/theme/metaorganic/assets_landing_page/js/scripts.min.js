/*!
 * kwikbasket
 * KwikBasket Landing Page
 * 
 * @author KwikBasket
 * @version 1.0.0
 * Copyright 2021. MIT licensed.
 */
!function(e,t,a,s){"use strict";function o(){navigator.geolocation?(console.log(1),navigator.geolocation.getCurrentPosition(i,null,{enableHighAccuracy:!0,timeout:5e3,maximumAge:0})):(console.log(2),console.log("Geolocation is not supported by this browser."))}function i(t){console.log("showPositionOnly"),console.log(t),e("#lat").val(t.coords.latitude),e("#lng").val(t.coords.longitude),console.log(t.coords.latitude),console.log(t.coords.longitude)}o(),e(function(){e(a).scroll(function(){var t=e(".fixed-top");t.toggleClass("scrolled",e(this).scrollTop()>t.height())}),e(".nav-link, .navbar-brand").click(function(){var t=e(this).attr("href");e("html, body").animate({scrollTop:e(t).offset().top},700)}),ScrollOut(),gsap.to(".anim-from-top",{opacity:1,y:0,duration:.5,ease:"elastic"}),gsap.to(".anim-from-bottom",{y:0,duration:.5}),e("input[name='register-accountmanager-id']").autocomplete({source:function(t,a){e.ajax({url:"index.php?path=account/login/autocompleteaccountmanager&filter_name="+e("input[name='register-accountmanager-id']").val(),dataType:"json",success:function(t){a(e.map(t,function(e){return{label:e.firstname,value:e.user_id}}))}})},select:function(t,a){return console.log(a.item.label),console.log(a.item.value),e("input[name='register-accountmanager-id']").val(a.item.label),e("input[name='register-accountmanager-id']").attr("register_accountmanager_id",a.item.value),!1}}),e(a).delegate("#login-button","click",function(a){o(),a.preventDefault();const s=e("#login-button");var i=e("#lat").val(),r=e("#lng").val();const n=e("#login-email").val(),l=e("#login-password").val();n.length>0&&l.length>0?(s.text("PLEASE WAIT"),s.toggleClass("disabled"),e.ajax({url:"index.php?path=account/login/checkipaddress",type:"post",data:{email:n,password:l},dataType:"json",success:function(a){console.log(a),"Username And Password Doest Match!"==a.message?iziToast.error({position:"topRight",message:"Username And Password Doest Match!"}):1==a.isnewIP?e.ajax({url:"index.php?path=account/login/addSendNewIPotp",type:"POST",dataType:"json",data:{email:n},success:function(t){t.status?(iziToast.success({position:"topRight",message:"OTP Is Sent To Mail!"}),e("#login-view").hide(),e("#otp-view").show()):iziToast.warning({position:"topRight",title:"Oops",message:"Something Went Wrong!"})}}):e.ajax({url:"index.php?path=account/login/login",type:"post",data:{email:n,password:l,login_latitude:i,login_longitude:r,login_mode:"web"},dataType:"json",success:function(a){a.status?null!=a.redirect?t.location.href=a.redirect:"1"==a.temppassword?(location=e(".base_url").attr("href")+"/changepass",console.log(e(".base_url"))):location=e(".base_url").attr("href"):(iziToast.error({position:"topRight",message:a.error_warning}),s.text("LOGIN"),s.toggleClass("disabled"))}})}})):iziToast.warning({position:"topRight",message:"Please enter your email and password"})}),e("#register-phone").keyup(function(e){/\D/g.test(this.value)&&(this.value=this.value.replace(/\D/g,""))}),e(a).delegate("#register-button","click",function(t){o(),t.preventDefault();var a=e("#lat").val(),s=e("#lng").val(),i=/^(?=.*[A-Z])(?=.*\d)(?=.*[@$!%*#?&])[A-Za-z\d@$!%*#?&]{6,}$/;const r=e("#register-first-name").val(),n=e("#register-last-name").val(),l=e("#register-email").val(),c=e("#register-phone").val(),g=e("#register-company-name").val(),p=e("#register-company-address").val(),u=e("#register-business-type").val(),d=e("#register-building-name").val(),m=e("#register-address-line").val(),v=e("#register-location").val(),h=e("#register-password").val(),f=e("#register-password-confirm").val(),y=e("#register-accountmanager-id").val(),b=e("#registration-view"),_=e("#otp-view"),T=e("#register-button"),w=e("#address_lat").val(),x=e("#address_lng").val(),P=e("#register-form")[0],R=P.reportValidity();R&&(f!==h?iziToast.warning({position:"topRight",message:"Passwords do no match"}):i.test(h)?""==grecaptcha.getResponse()?iziToast.warning({position:"topRight",message:"Please complete captcha"}):(T.text("PLEASE WAIT"),T.toggleClass("disabled"),e.ajax({url:"index.php?path=account/register/register_send_otp",type:"POST",dataType:"json",data:{login_latitude:a,login_longitude:s,firstname:r,lastname:n,email:l,telephone:c,company_name:g,company_address:p,customer_group_id:u,house_building:d,address:m,location:v,password:h,confirm:f,accountmanagerid:y,address_lat:w,address_lng:x},success:function(e){T.text("SIGN UP"),T.toggleClass("disabled"),e.status?(iziToast.success({position:"topRight",message:e.success_message}),b.hide(),_.show()):iziToast.warning({position:"topRight",title:"Oops",message:e.error_message})}})):(console.log(h),iziToast.warning({position:"topRight",message:"Password must contain 6 characters 1 capital(A-Z) 1 numeric(0-9) 1 special(@$!%*#?&)"})))}),e(a).delegate("#otp-verify-button","click",function(a){a.preventDefault();var s=e("#lat").val(),o=e("#lng").val();const i=e("#register-first-name").val(),r=e("#register-last-name").val(),n=e("#register-email").val(),l=e("#register-phone").val(),c=e("#register-company-name").val(),g=e("#register-company-address").val(),p=e("#register-business-type").val(),u=e("#register-building-name").val(),d=e("#register-address-line").val(),m=e("#register-location").val(),v=e("#register-password").val(),h=e("#register-password-confirm").val(),f=e("#register-accountmanager-id").val(),y=e("#address_lat").val(),b=e("#address_lng").val(),_=e("#otp-value").val(),T=e("#otp-verify-button");_.length>3?(T.text("PLEASE WAIT"),T.toggleClass("disabled"),e.ajax({url:"index.php?path=account/register/register_verify_otp",type:"POST",dataType:"json",data:{login_latitude:s,login_longitude:o,firstname:i,lastname:r,email:n,telephone:l,company_name:c,company_address:g,customer_group_id:p,house_building:u,address:d,location:m,password:v,confirm:h,accountmanagerid:f,address_lat:y,address_lng:b,signup_otp:_},success:function(a){T.text("VERIFY"),T.toggleClass("disabled"),e("#otp-value").val(""),a.status?(iziToast.success({timeout:!1,position:"topRight",message:a.success_message}),setTimeout(function(){t.location=e(".base_url").attr("href")},3e3)):iziToast.warning({position:"topRight",message:"We couldn't verify your account. Please check the OTP"})}})):iziToast.error({position:"topRight",message:"Please enter a valid OTP"})}),e(a).delegate("#ip-otp-verify-button","click",function(a){a.preventDefault();const s=e("#login-email").val(),o=e("#otp-value").val();var i=e("#lat").val(),r=e("#lng").val();const n=e("#login-password").val(),l=e("#otp-verify-button");o.length>3?(l.text("PLEASE WAIT"),l.toggleClass("disabled"),e.ajax({url:"index.php?path=account/login/addVerifyNewIPotp",type:"POST",dataType:"json",data:{email:s,otp:o},success:function(a){l.text("VERIFY"),l.toggleClass("disabled"),e("#otp-value").val(""),a.status?(iziToast.success({timeout:!1,position:"topRight",message:"Will be redirecting to login page!"}),setTimeout(function(){a.status&&e.ajax({url:"index.php?path=account/login/login",type:"post",data:{email:s,password:n,login_latitude:i,login_longitude:r,login_mode:"web"},dataType:"json",success:function(a){a.status?null!=a.redirect?t.location.href=a.redirect:"1"==a.temppassword?(location=e(".base_url").attr("href")+"/changepass",console.log(e(".base_url"))):location=e(".base_url").attr("href"):(iziToast.error({position:"topRight",message:a.error_warning}),location=e(".base_url").attr("href"),loginButton.text("LOGIN"),loginButton.toggleClass("disabled"))}})},1500)):iziToast.warning({position:"topRight",message:"We couldn't verify your account. Please check the OTP"})}})):iziToast.error({position:"topRight",message:"Please enter a valid OTP"})}),e(a).delegate("#careers-submit-button","click",function(t){t.preventDefault();const a=e("#careers-first-name").val(),s=e("#careers-last-name").val(),o=e("#careers-designation").val(),i=e("#careers-about-yourself").val(),r=e("#careers-job-id").val(),n=e("#careers-cover-letter").val(),l=e("#careers-form")[0],c=l.reportValidity(),g=e("#careers-submit-button");c&&(""==grecaptcha.getResponse()?iziToast.warning({position:"topRight",message:"Please complete captcha"}):(g.text("PLEASE WAIT"),g.toggleClass("disabled"),e.ajax({url:"index.php?path=common/home/savecareers",type:"POST",dataType:"json",data:{firstname:a,lastname:s,role:o,yourself:i,job_id:r,cover:n},success:function(t){g.toggleClass("disabled"),t.status?(iziToast.success({position:"topRight",message:t.success_message}),e("#careers-form")[0].reset(),g.text("SUBMIT")):iziToast.warning({position:"topRight",title:"Oops",message:t.error_warning})}})))}),e(a).delegate("#partner-registration-button","click",function(t){t.preventDefault();const a=e("#partner-first-name").val(),s=e("#partner-last-name").val(),o=e("#partner-designation").val(),i=e("#partner-company-name").val(),r=e("#partner-email").val(),n=e("#partner-phone").val(),l=e("#partner-description").val(),c=e("#partner-registration-form")[0],g=c.reportValidity(),p=e("#partner-registration-button");g&&(""==grecaptcha.getResponse()?iziToast.warning({position:"topRight",message:"Please complete captcha"}):(p.text("PLEASE WAIT"),p.toggleClass("disabled"),e.ajax({url:"index.php?path=common/home/savepartner",type:"POST",dataType:"json",data:{firstname:a,lastname:s,designation:o,company:i,email:r,phone:n,description:l},success:function(t){p.toggleClass("disabled"),t.status?(iziToast.success({position:"topRight",message:t.success_message}),e("#partner-registration-form")[0].reset()):iziToast.warning({position:"topRight",title:"Oops",message:t.error_warning})}})))}),e("#forgot-password-btn").click(function(t){t.preventDefault(),e("#login-view").hide(),e("#forgot-password-view").show()}),e("#password-reset-button").click(function(t){t.preventDefault();const a=e("#reset-password-email").val(),s=e("#password-reset-button");0==a.length?iziToast.warning({position:"topRight",message:"Please enter your account email"}):(s.text("PLEASE WAIT"),s.toggleClass("disabled"),e.ajax({url:"index.php?path=account/forgotten",type:"POST",dataType:"json",data:{email:a},success:function(t){s.text("RESET PASSWORD"),s.toggleClass("disabled"),e("#reset-password-email").val(""),t.status?iziToast.success({timeout:!1,position:"topRight",message:t.text_message}):iziToast.warning({position:"topRight",message:"We couldn't find an account with that email address"})}}))}),e("#farmer-register-button").click(function(t){console.log("Farmer Registration!"),t.preventDefault();var a=e("#lat").val(),s=e("#lng").val();const o=e("#farmer-first-name").val(),i=e("#farmer-last-name").val(),r=e("#farmer-email").val(),n=e("#farmer-phone").val(),l=e("#farmer-type").val(),c=e("#farmer-location").val(),g=e("#irrigation-type").val(),p=e("#farmer-produce-grown").val(),u=e("#farm-size").val(),d=e("#farm-size-type").val(),m=e("#farmer-organization").val(),v=e("#farmer-register-button");""==grecaptcha.getResponse()?iziToast.warning({position:"topRight",message:"Please complete captcha"}):e("#farmer-registration-form")[0].reportValidity()&&(v.text("PLEASE WAIT"),v.toggleClass("disabled"),e.ajax({url:"index.php?path=account/farmerregister/register",type:"POST",dataType:"json",data:{first_name:o,last_name:i,email:r,telephone:n,farmer_type:l,farmer_location:c,farmer_irrigation_type:g,farmer_description:p,farmsize:u,farmerorganization:m,farmsizetype:d,login_latitude:a,login_longitude:s},success:function(t){v.text("REGISTER"),v.toggleClass("disabled"),t.status?(iziToast.success({position:"topRight",message:t.success_message}),e("#farmer-registration-form")[0].reset()):iziToast.warning({position:"topRight",title:"Oops",message:t.error_warning+" We couldn't register you. Please try again"})}}))}),e("#careers-job-category, #careers-job-type, #careers-job-location").change(function(){var t="index.php?path=common/home/careers";e("#careers-job-category").val();filter_category&&"All Job Category"!=filter_category&&(t+="&filter_category="+encodeURIComponent(filter_category));var a=e("#careers-job-type").val();a&&"All Job Type"!=a&&(t+="&filter_type="+encodeURIComponent(a));var s=e("#careers-job-location").val();s&&"All Job Location"!=s&&(t+="&filter_location="+encodeURIComponent(s)),location=t})});e("#lat"),e("#lng");e(a).delegate(":input","keyup change",function(e){o()})}(jQuery,window,document);
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNjcmlwdHMuanMiXSwibmFtZXMiOlsiJCIsIndpbmRvdyIsImRvY3VtZW50IiwidW5kZWZpbmVkIiwiZ2V0TG9jYXRpb25Pbmx5IiwibmF2aWdhdG9yIiwiZ2VvbG9jYXRpb24iLCJjb25zb2xlIiwibG9nIiwiZ2V0Q3VycmVudFBvc2l0aW9uIiwic2hvd1Bvc2l0aW9uT25seSIsImVuYWJsZUhpZ2hBY2N1cmFjeSIsInRpbWVvdXQiLCJtYXhpbXVtQWdlIiwicG9zaXRpb24iLCJ2YWwiLCJjb29yZHMiLCJsYXRpdHVkZSIsImxvbmdpdHVkZSIsInNjcm9sbCIsIiRuYXYiLCJ0b2dnbGVDbGFzcyIsInRoaXMiLCJzY3JvbGxUb3AiLCJoZWlnaHQiLCJjbGljayIsInNlY3Rpb25UbyIsImF0dHIiLCJhbmltYXRlIiwib2Zmc2V0IiwidG9wIiwiU2Nyb2xsT3V0IiwiZ3NhcCIsInRvIiwib3BhY2l0eSIsInkiLCJkdXJhdGlvbiIsImVhc2UiLCJhdXRvY29tcGxldGUiLCJzb3VyY2UiLCJyZXF1ZXN0IiwicmVzcG9uc2UiLCJhamF4IiwidXJsIiwiZGF0YVR5cGUiLCJzdWNjZXNzIiwianNvbiIsIm1hcCIsIml0ZW0iLCJsYWJlbCIsInZhbHVlIiwic2VsZWN0IiwiZXZlbnQiLCJ1aSIsImRlbGVnYXRlIiwiZSIsInByZXZlbnREZWZhdWx0IiwibG9naW5CdXR0b24iLCJsb2dpbl9sYXRpdHVkZSIsImxvZ2luX2xvbmdpdHVkZSIsImVtYWlsIiwicGFzc3dvcmQiLCJsZW5ndGgiLCJ0ZXh0IiwidHlwZSIsImRhdGEiLCJtZXNzYWdlIiwiaXppVG9hc3QiLCJlcnJvciIsImhpZGUiLCJzaG93Iiwid2FybmluZyIsInRpdGxlIiwibG9naW5fbW9kZSIsImxvY2F0aW9uIiwiaHJlZiIsImtleXVwIiwidGVzdCIsInJlcGxhY2UiLCJwYXNzd29yZF9wYXR0ZXJuIiwiZmlyc3ROYW1lIiwibGFzdE5hbWUiLCJwaG9uZSIsImNvbXBhbnlOYW1lIiwiY29tcGFueUFkZHJlc3MiLCJidXNpbmVzc1R5cGUiLCJidWlsZGluZ05hbWUiLCJhZGRyZXNzTGluZSIsInBhc3N3b3JkQ29uZmlybWF0aW9uIiwiYWNjb3VudG1hbmFnZXJpZCIsInJlZ2lzdHJhdGlvblZpZXciLCJvdHBWaWV3IiwicmVnaXN0ZXJCdXR0b24iLCJhZGRyZXNzX2xhdCIsImFkZHJlc3NfbG5nIiwicmVnaXN0ZXJGb3JtIiwiZm9ybUlzVmFsaWQiLCJyZXBvcnRWYWxpZGl0eSIsImdyZWNhcHRjaGEiLCJnZXRSZXNwb25zZSIsImZpcnN0bmFtZSIsImxhc3RuYW1lIiwidGVsZXBob25lIiwiY29tcGFueV9uYW1lIiwiY29tcGFueV9hZGRyZXNzIiwiY3VzdG9tZXJfZ3JvdXBfaWQiLCJob3VzZV9idWlsZGluZyIsImFkZHJlc3MiLCJjb25maXJtIiwib3RwIiwidmVyaWZ5QnV0dG9uIiwic2lnbnVwX290cCIsInNldFRpbWVvdXQiLCJyb2xlIiwieW91cnNlbGYiLCJqb2JfaWQiLCJjb3ZlciIsInJlc2V0IiwiZGVzaWduYXRpb24iLCJjb21wYW55IiwiZGVzY3JpcHRpb24iLCJyZXNldEJ1dHRvbiIsImZhcm1lclR5cGUiLCJmYXJtTG9jYXRpb24iLCJmYXJtSXJyaWdhdGlvblR5cGUiLCJwcm9kdWNlRGVzY3JpcHRpb24iLCJmYXJtc2l6ZSIsImZhcm1zaXpldHlwZSIsImZhcm1lcm9yZ2FuaXphdGlvbiIsImZpcnN0X25hbWUiLCJsYXN0X25hbWUiLCJmYXJtZXJfdHlwZSIsImZhcm1lcl9sb2NhdGlvbiIsImZhcm1lcl9pcnJpZ2F0aW9uX3R5cGUiLCJmYXJtZXJfZGVzY3JpcHRpb24iLCJjaGFuZ2UiLCJmaWx0ZXJfY2F0ZWdvcnkiLCJlbmNvZGVVUklDb21wb25lbnQiLCJmaWx0ZXJfdHlwZSIsImZpbHRlcl9sb2NhdGlvbiIsImpRdWVyeSJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Q0FBQSxTQUFBQSxFQUFBQyxFQUFBQyxFQUFBQyxHQUVBLFlBZ3NCQSxTQUFBQyxLQUVBQyxVQUFBQyxhQUVB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b0QsU0FBQSxTQUFBLGVBQUEsU0FBQUMsR0FDQW5ELE9BR0F3SSxPQUFBM0ksT0FBQUMiLCJmaWxlIjoic2NyaXB0cy5taW4uanMiLCJzb3VyY2VzQ29udGVudCI6WyIoZnVuY3Rpb24gKCQsIHdpbmRvdywgZG9jdW1lbnQsIHVuZGVmaW5lZCkge1xyXG5cclxuICAgICd1c2Ugc3RyaWN0JztcclxuICAgIGdldExvY2F0aW9uT25seSgpO1xyXG4gICAgJChmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgLy8gQ2hhbmdlIG5hdmJhciBzdHlsZSBvbiBzY3JvbGxcclxuICAgICAgICAkKGRvY3VtZW50KS5zY3JvbGwoZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICB2YXIgJG5hdiA9ICQoJy5maXhlZC10b3AnKTtcclxuICAgICAgICAgICAgJG5hdi50b2dnbGVDbGFzcygnc2Nyb2xsZWQnLCAkKHRoaXMpLnNjcm9sbFRvcCgpID4gJG5hdi5oZWlnaHQoKSk7XHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIC8vIE5hdiBsaW5rcyBzY3JvbGwgYW5pbWF0aW9uXHJcbiAgICAgICAgJCgnLm5hdi1saW5rLCAubmF2YmFyLWJyYW5kJykuY2xpY2soZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICB2YXIgc2VjdGlvblRvID0gJCh0aGlzKS5hdHRyKCdocmVmJyk7XHJcbiAgICAgICAgICAgICQoJ2h0bWwsIGJvZHknKS5hbmltYXRlKHtcclxuICAgICAgICAgICAgICAgIHNjcm9sbFRvcDogJChzZWN0aW9uVG8pLm9mZnNldCgpLnRvcFxyXG4gICAgICAgICAgICB9LCA3MDApO1xyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICAvLyBMYW5kaW5nIHBhZ2Ugc2Nyb2xsIGFuaW1hdGlvbnNcclxuICAgICAgICBTY3JvbGxPdXQoKTtcclxuXHJcbiAgICAgICAgLy8gSGVybyBzZWN0aW9uIGFuaW1hdGlvblxyXG4gICAgICAgIGdzYXAudG8oJy5hbmltLWZyb20tdG9wJywge1xyXG4gICAgICAgICAgICBvcGFjaXR5OiAxLFxyXG4gICAgICAgICAgICB5OiAwLFxyXG4gICAgICAgICAgICBkdXJhdGlvbjogLjUsXHJcbiAgICAgICAgICAgIGVhc2U6ICdlbGFzdGljJ1xyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICBnc2FwLnRvKCcuYW5pbS1mcm9tLWJvdHRvbScsIHtcclxuICAgICAgICAgICAgeTogMCxcclxuICAgICAgICAgICAgZHVyYXRpb246IC41XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgXHJcbiQoJ2lucHV0W25hbWU9XFwncmVnaXN0ZXItYWNjb3VudG1hbmFnZXItaWRcXCddJykuYXV0b2NvbXBsZXRlKHtcclxuICAnc291cmNlJzogZnVuY3Rpb24ocmVxdWVzdCwgcmVzcG9uc2UpIHtcclxuICAgICQuYWpheCh7XHJcbiAgICAgIHVybDogJ2luZGV4LnBocD9wYXRoPWFjY291bnQvbG9naW4vYXV0b2NvbXBsZXRlYWNjb3VudG1hbmFnZXImZmlsdGVyX25hbWU9JyArICAkKCdpbnB1dFtuYW1lPVxcJ3JlZ2lzdGVyLWFjY291bnRtYW5hZ2VyLWlkXFwnXScpLnZhbCgpLFxyXG4gICAgICBkYXRhVHlwZTogJ2pzb24nLCAgICAgXHJcbiAgICAgIHN1Y2Nlc3M6IGZ1bmN0aW9uKGpzb24pIHtcclxuICAgICAgICByZXNwb25zZSgkLm1hcChqc29uLCBmdW5jdGlvbihpdGVtKSB7XHJcbiAgICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICBsYWJlbDogaXRlbVsnZmlyc3RuYW1lJ10sXHJcbiAgICAgICAgICAgIHZhbHVlOiBpdGVtWyd1c2VyX2lkJ11cclxuICAgICAgICAgIH1cclxuICAgICAgICB9KSk7XHJcbiAgICAgIH1cclxuICAgIH0pO1xyXG4gIH0sXHJcbiAgJ3NlbGVjdCc6IGZ1bmN0aW9uKGV2ZW50LCB1aSkge1xyXG4gICAgIGNvbnNvbGUubG9nKHVpLml0ZW0ubGFiZWwpOyBcclxuICAgICBjb25zb2xlLmxvZyh1aS5pdGVtLnZhbHVlKTsgXHJcbiAgICAgJCgnaW5wdXRbbmFtZT1cXCdyZWdpc3Rlci1hY2NvdW50bWFuYWdlci1pZFxcJ10nKS52YWwodWkuaXRlbS5sYWJlbCk7XHJcbiAgICAgJCgnaW5wdXRbbmFtZT1cXCdyZWdpc3Rlci1hY2NvdW50bWFuYWdlci1pZFxcJ10nKS5hdHRyKCdyZWdpc3Rlcl9hY2NvdW50bWFuYWdlcl9pZCcsdWkuaXRlbS52YWx1ZSk7XHJcbiAgICAgcmV0dXJuIGZhbHNlO1xyXG4gIH0gXHJcbn0pO1xyXG4gICAgICAgIC8vIEN1c3RvbWVyIExvZ2luXHJcbiAgICAgICAgJChkb2N1bWVudCkuZGVsZWdhdGUoJyNsb2dpbi1idXR0b24nLCAnY2xpY2snLCBmdW5jdGlvbiAoZSkge1xyXG4gICAgICAgICAgICBnZXRMb2NhdGlvbk9ubHkoKTtcclxuICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBjb25zdCBsb2dpbkJ1dHRvbiA9ICQoJyNsb2dpbi1idXR0b24nKTtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgbG9naW5fbGF0aXR1ZGUgPSAkKCcjbGF0JykudmFsKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIGxvZ2luX2xvbmdpdHVkZSA9ICQoJyNsbmcnKS52YWwoKTtcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCBlbWFpbCA9ICQoJyNsb2dpbi1lbWFpbCcpLnZhbCgpO1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHBhc3N3b3JkID0gJCgnI2xvZ2luLXBhc3N3b3JkJykudmFsKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGVtYWlsLmxlbmd0aCA+IDAgJiYgcGFzc3dvcmQubGVuZ3RoID4gMCkge1xyXG4gICAgICAgICAgICAgICAgbG9naW5CdXR0b24udGV4dCgnUExFQVNFIFdBSVQnKTtcclxuICAgICAgICAgICAgICAgIGxvZ2luQnV0dG9uLnRvZ2dsZUNsYXNzKCdkaXNhYmxlZCcpO1xyXG4gICAgICAgICAgICAgICAgJC5hamF4KHvigIvigIvigIvigIvigIvigIvigIvigIsgIFxyXG4gICAgICAgICAgICAgICAgICAgIHVybCA6ICdpbmRleC5waHA/cGF0aD1hY2NvdW50L2xvZ2luL2NoZWNraXBhZGRyZXNzJyxcclxuICAgICAgICAgICAgICAgICAgICB0eXBlOiAncG9zdCcsXHJcbiAgICAgICAgICAgICAgICAgICAgZGF0YToge2VtYWlsOiBlbWFpbCwgcGFzc3dvcmQ6cGFzc3dvcmR9LFxyXG4gICAgICAgICAgICAgICAgICAgIGRhdGFUeXBlOiAnanNvbicsXHJcbiAgICAgICAgICAgICAgICAgICAgc3VjY2VzczogZnVuY3Rpb24gKGpzb24pIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coanNvbik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmKGpzb24ubWVzc2FnZSA9PSAnVXNlcm5hbWUgQW5kIFBhc3N3b3JkIERvZXN0IE1hdGNoIScpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaXppVG9hc3QuZXJyb3Ioe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBwb3NpdGlvbjogJ3RvcFJpZ2h0JyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtZXNzYWdlOiAnVXNlcm5hbWUgQW5kIFBhc3N3b3JkIERvZXN0IE1hdGNoISdcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSBpZiAoanNvblsnaXNuZXdJUCddID09IHRydWUpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgJC5hamF4KHvigIvigIvigIvigIvigIvigIvigIvigItcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB1cmw6ICdpbmRleC5waHA/cGF0aD1hY2NvdW50L2xvZ2luL2FkZFNlbmROZXdJUG90cCcsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogJ1BPU1QnLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGFUeXBlOiAnanNvbicsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YToge+KAi+KAi+KAi+KAi+KAi+KAi+KAi+KAi2VtYWlsOmVtYWlsIH3igIvigIvigIvigIvigIvigIvigIvigIssXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3VjY2VzczogZnVuY3Rpb24gKGpzb24pIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGpzb25bJ3N0YXR1cyddKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGl6aVRvYXN0LnN1Y2Nlc3Moe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcG9zaXRpb246ICd0b3BSaWdodCcsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtZXNzYWdlOiAnT1RQIElzIFNlbnQgVG8gTWFpbCEnXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICQoJyNsb2dpbi12aWV3JykuaGlkZSgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkKCcjb3RwLXZpZXcnKS5zaG93KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaXppVG9hc3Qud2FybmluZyh7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwb3NpdGlvbjogJ3RvcFJpZ2h0JyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRpdGxlOiAnT29wcycsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtZXNzYWdlOiAnU29tZXRoaW5nIFdlbnQgV3JvbmchJ1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgJC5hamF4KHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdXJsOiAnaW5kZXgucGhwP3BhdGg9YWNjb3VudC9sb2dpbi9sb2dpbicsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogJ3Bvc3QnLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGE6IHtlbWFpbDogZW1haWwsIHBhc3N3b3JkOiBwYXNzd29yZCwgbG9naW5fbGF0aXR1ZGU6bG9naW5fbGF0aXR1ZGUsIGxvZ2luX2xvbmdpdHVkZTpsb2dpbl9sb25naXR1ZGUsIGxvZ2luX21vZGU6J3dlYid9LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGFUeXBlOiAnanNvbicsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3VjY2VzczogZnVuY3Rpb24gKGpzb24pIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoanNvblsnc3RhdHVzJ10pIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoanNvblsncmVkaXJlY3QnXSAhPSBudWxsKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgd2luZG93LmxvY2F0aW9uLmhyZWYgPSBqc29uWydyZWRpcmVjdCddO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoanNvblsndGVtcHBhc3N3b3JkJ10gPT0gJzEnKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbG9jYXRpb24gPSAkKCcuYmFzZV91cmwnKS5hdHRyKCdocmVmJykgKyAnL2NoYW5nZXBhc3MnO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coJCgnLmJhc2VfdXJsJykpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbG9jYXRpb24gPSAkKCcuYmFzZV91cmwnKS5hdHRyKCdocmVmJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaXppVG9hc3QuZXJyb3Ioe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBvc2l0aW9uOiAndG9wUmlnaHQnLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbWVzc2FnZToganNvblsnZXJyb3Jfd2FybmluZyddXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsb2dpbkJ1dHRvbi50ZXh0KCdMT0dJTicpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbG9naW5CdXR0b24udG9nZ2xlQ2xhc3MoJ2Rpc2FibGVkJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIGl6aVRvYXN0Lndhcm5pbmcoe1xyXG4gICAgICAgICAgICAgICAgICAgIHBvc2l0aW9uOiAndG9wUmlnaHQnLFxyXG4gICAgICAgICAgICAgICAgICAgIG1lc3NhZ2U6ICdQbGVhc2UgZW50ZXIgeW91ciBlbWFpbCBhbmQgcGFzc3dvcmQnXHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICAvLyBDdXN0b21lciBSZWdpc3RyYXRpb25cclxuXHJcbiAgICAgICAgJCgnI3JlZ2lzdGVyLXBob25lJykua2V5dXAoZnVuY3Rpb24gKGUpIHtcclxuICAgICAgICAgICAgaWYgKC9cXEQvZy50ZXN0KHRoaXMudmFsdWUpKSB7XHJcbiAgICAgICAgICAgICAgICAvLyBGaWx0ZXIgb3V0IG5vbi1kaWdpdHMgZnJvbSBpbnB1dCB2YWx1ZVxyXG4gICAgICAgICAgICAgICAgdGhpcy52YWx1ZSA9IHRoaXMudmFsdWUucmVwbGFjZSgvXFxEL2csICcnKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICAkKGRvY3VtZW50KS5kZWxlZ2F0ZSgnI3JlZ2lzdGVyLWJ1dHRvbicsICdjbGljaycsIGZ1bmN0aW9uIChlKSB7XHJcbiAgICAgICAgICAgIGdldExvY2F0aW9uT25seSgpO1xyXG4gICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XHJcbiAgICAgICAgICAgIFxyXG4gICAgICAgICAgICB2YXIgbG9naW5fbGF0aXR1ZGUgPSAkKCcjbGF0JykudmFsKCk7XHJcbiAgICAgICAgICAgIHZhciBsb2dpbl9sb25naXR1ZGUgPSAkKCcjbG5nJykudmFsKCk7XHJcbiAgICAgICAgICAgIC8vdmFyIHBhc3N3b3JkX3BhdHRlcm4gPSAvXig/PS4qWzAtOV0pKD89LipbIUAjJCVeJipdKVthLXpBLVowLTkhQCMkJV4mKl17NiwxNn0kLztcclxuICAgICAgICAgICAgdmFyIHBhc3N3b3JkX3BhdHRlcm4gPSAvXig/PS4qW0EtWl0pKD89LipcXGQpKD89LipbQCQhJSojPyZdKVtBLVphLXpcXGRAJCElKiM/Jl17Nix9JC87XHJcbiAgICAgICAgICAgIGNvbnN0IGZpcnN0TmFtZSA9ICQoJyNyZWdpc3Rlci1maXJzdC1uYW1lJykudmFsKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgbGFzdE5hbWUgPSAkKCcjcmVnaXN0ZXItbGFzdC1uYW1lJykudmFsKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgZW1haWwgPSAkKCcjcmVnaXN0ZXItZW1haWwnKS52YWwoKTtcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCBwaG9uZSA9ICQoJyNyZWdpc3Rlci1waG9uZScpLnZhbCgpO1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGNvbXBhbnlOYW1lID0gJCgnI3JlZ2lzdGVyLWNvbXBhbnktbmFtZScpLnZhbCgpO1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGNvbXBhbnlBZGRyZXNzID0gJCgnI3JlZ2lzdGVyLWNvbXBhbnktYWRkcmVzcycpLnZhbCgpO1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGJ1c2luZXNzVHlwZSA9ICQoJyNyZWdpc3Rlci1idXNpbmVzcy10eXBlJykudmFsKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgYnVpbGRpbmdOYW1lID0gJCgnI3JlZ2lzdGVyLWJ1aWxkaW5nLW5hbWUnKS52YWwoKTtcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCBhZGRyZXNzTGluZSA9ICQoJyNyZWdpc3Rlci1hZGRyZXNzLWxpbmUnKS52YWwoKTtcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCBsb2NhdGlvbiA9ICQoJyNyZWdpc3Rlci1sb2NhdGlvbicpLnZhbCgpO1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHBhc3N3b3JkID0gJCgnI3JlZ2lzdGVyLXBhc3N3b3JkJykudmFsKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgcGFzc3dvcmRDb25maXJtYXRpb24gPSAkKCcjcmVnaXN0ZXItcGFzc3dvcmQtY29uZmlybScpLnZhbCgpO1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGFjY291bnRtYW5hZ2VyaWQgPSAkKCcjcmVnaXN0ZXItYWNjb3VudG1hbmFnZXItaWQnKS52YWwoKTtcclxuICAgICAgICAgICAgICAgICAgICAvL2NvbnN0IGFjY291bnRtYW5hZ2VyaWQgPSAkKCcjcmVnaXN0ZXItYWNjb3VudG1hbmFnZXItaWQnKS5hdHRyKCdyZWdpc3Rlcl9hY2NvdW50bWFuYWdlcl9pZCcpO1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHJlZ2lzdHJhdGlvblZpZXcgPSAkKCcjcmVnaXN0cmF0aW9uLXZpZXcnKTtcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCBvdHBWaWV3ID0gJCgnI290cC12aWV3Jyk7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgcmVnaXN0ZXJCdXR0b24gPSAkKCcjcmVnaXN0ZXItYnV0dG9uJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgYWRkcmVzc19sYXQgPSAkKCcjYWRkcmVzc19sYXQnKS52YWwoKTtcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCBhZGRyZXNzX2xuZyA9ICQoJyNhZGRyZXNzX2xuZycpLnZhbCgpO1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHJlZ2lzdGVyRm9ybSA9ICQoJyNyZWdpc3Rlci1mb3JtJylbMF07XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgZm9ybUlzVmFsaWQgPSByZWdpc3RlckZvcm0ucmVwb3J0VmFsaWRpdHkoKTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoZm9ybUlzVmFsaWQpIHtcclxuICAgICAgICAgICAgICAgIGlmIChwYXNzd29yZENvbmZpcm1hdGlvbiAhPT0gcGFzc3dvcmQpIHtcclxuICAgICAgICAgICAgICAgICAgICBpemlUb2FzdC53YXJuaW5nKHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcG9zaXRpb246ICd0b3BSaWdodCcsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG1lc3NhZ2U6ICdQYXNzd29yZHMgZG8gbm8gbWF0Y2gnXHJcbiAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYoIXBhc3N3b3JkX3BhdHRlcm4udGVzdChwYXNzd29yZCkpIHtcclxuICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKHBhc3N3b3JkKTtcclxuICAgICAgICAgICAgICAgICAgIGl6aVRvYXN0Lndhcm5pbmcoe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBwb3NpdGlvbjogJ3RvcFJpZ2h0JyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgbWVzc2FnZTogJ1Bhc3N3b3JkIG11c3QgY29udGFpbiA2IGNoYXJhY3RlcnMgMSBjYXBpdGFsKEEtWikgMSBudW1lcmljKDAtOSkgMSBzcGVjaWFsKEAkISUqIz8mKSdcclxuICAgICAgICAgICAgICAgICAgICB9KTsgXHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChncmVjYXB0Y2hhLmdldFJlc3BvbnNlKCkgPT0gJycpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaXppVG9hc3Qud2FybmluZyh7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwb3NpdGlvbjogJ3RvcFJpZ2h0JyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1lc3NhZ2U6ICdQbGVhc2UgY29tcGxldGUgY2FwdGNoYSdcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmVnaXN0ZXJCdXR0b24udGV4dCgnUExFQVNFIFdBSVQnKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmVnaXN0ZXJCdXR0b24udG9nZ2xlQ2xhc3MoJ2Rpc2FibGVkJyk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAkLmFqYXgoe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdXJsOiAnaW5kZXgucGhwP3BhdGg9YWNjb3VudC9yZWdpc3Rlci9yZWdpc3Rlcl9zZW5kX290cCcsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiAnUE9TVCcsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhVHlwZTogJ2pzb24nLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YToge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxvZ2luX2xhdGl0dWRlIDogbG9naW5fbGF0aXR1ZGUsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbG9naW5fbG9uZ2l0dWRlIDogbG9naW5fbG9uZ2l0dWRlLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZpcnN0bmFtZTogZmlyc3ROYW1lLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxhc3RuYW1lOiBsYXN0TmFtZSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbWFpbDogZW1haWwsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGVsZXBob25lOiBwaG9uZSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb21wYW55X25hbWU6IGNvbXBhbnlOYW1lLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbXBhbnlfYWRkcmVzczogY29tcGFueUFkZHJlc3MsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY3VzdG9tZXJfZ3JvdXBfaWQ6IGJ1c2luZXNzVHlwZSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBob3VzZV9idWlsZGluZzogYnVpbGRpbmdOYW1lLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFkZHJlc3M6IGFkZHJlc3NMaW5lLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxvY2F0aW9uOiBsb2NhdGlvbixcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwYXNzd29yZDogcGFzc3dvcmQsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uZmlybTogcGFzc3dvcmRDb25maXJtYXRpb24sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYWNjb3VudG1hbmFnZXJpZDphY2NvdW50bWFuYWdlcmlkLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFkZHJlc3NfbGF0OmFkZHJlc3NfbGF0LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFkZHJlc3NfbG5nOmFkZHJlc3NfbG5nLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vYWNjb3VudG1hbmFnZXJuYW1lOmFjY291bnRtYW5hZ2VybmFtZVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN1Y2Nlc3M6IGZ1bmN0aW9uIChqc29uKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVnaXN0ZXJCdXR0b24udGV4dCgnU0lHTiBVUCcpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlZ2lzdGVyQnV0dG9uLnRvZ2dsZUNsYXNzKCdkaXNhYmxlZCcpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoanNvblsnc3RhdHVzJ10pIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaXppVG9hc3Quc3VjY2Vzcyh7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwb3NpdGlvbjogJ3RvcFJpZ2h0JyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1lc3NhZ2U6IGpzb25bJ3N1Y2Nlc3NfbWVzc2FnZSddXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVnaXN0cmF0aW9uVmlldy5oaWRlKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG90cFZpZXcuc2hvdygpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGl6aVRvYXN0Lndhcm5pbmcoe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcG9zaXRpb246ICd0b3BSaWdodCcsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aXRsZTogJ09vcHMnLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy9tZXNzYWdlOiBqc29uWydlcnJvcl93YXJuaW5nJ11cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1lc3NhZ2U6IGpzb25bJ2Vycm9yX21lc3NhZ2UnXVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICAvLyBPVFAgVmVyaWZpY2F0aW9uXHJcbiAgICAgICAgJChkb2N1bWVudCkuZGVsZWdhdGUoJyNvdHAtdmVyaWZ5LWJ1dHRvbicsICdjbGljaycsIGZ1bmN0aW9uIChlKSB7XHJcbiAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcclxuICAgICAgICAgICAgXHJcbiAgICAgICAgICAgIHZhciBsb2dpbl9sYXRpdHVkZSA9ICQoJyNsYXQnKS52YWwoKTtcclxuICAgICAgICAgICAgdmFyIGxvZ2luX2xvbmdpdHVkZSA9ICQoJyNsbmcnKS52YWwoKTtcclxuICAgICAgICAgICAgY29uc3QgZmlyc3ROYW1lID0gJCgnI3JlZ2lzdGVyLWZpcnN0LW5hbWUnKS52YWwoKTtcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCBsYXN0TmFtZSA9ICQoJyNyZWdpc3Rlci1sYXN0LW5hbWUnKS52YWwoKTtcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCBlbWFpbCA9ICQoJyNyZWdpc3Rlci1lbWFpbCcpLnZhbCgpO1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHBob25lID0gJCgnI3JlZ2lzdGVyLXBob25lJykudmFsKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgY29tcGFueU5hbWUgPSAkKCcjcmVnaXN0ZXItY29tcGFueS1uYW1lJykudmFsKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgY29tcGFueUFkZHJlc3MgPSAkKCcjcmVnaXN0ZXItY29tcGFueS1hZGRyZXNzJykudmFsKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgYnVzaW5lc3NUeXBlID0gJCgnI3JlZ2lzdGVyLWJ1c2luZXNzLXR5cGUnKS52YWwoKTtcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCBidWlsZGluZ05hbWUgPSAkKCcjcmVnaXN0ZXItYnVpbGRpbmctbmFtZScpLnZhbCgpO1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGFkZHJlc3NMaW5lID0gJCgnI3JlZ2lzdGVyLWFkZHJlc3MtbGluZScpLnZhbCgpO1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGxvY2F0aW9uID0gJCgnI3JlZ2lzdGVyLWxvY2F0aW9uJykudmFsKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgcGFzc3dvcmQgPSAkKCcjcmVnaXN0ZXItcGFzc3dvcmQnKS52YWwoKTtcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCBwYXNzd29yZENvbmZpcm1hdGlvbiA9ICQoJyNyZWdpc3Rlci1wYXNzd29yZC1jb25maXJtJykudmFsKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgYWNjb3VudG1hbmFnZXJpZCA9ICQoJyNyZWdpc3Rlci1hY2NvdW50bWFuYWdlci1pZCcpLnZhbCgpO1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGFkZHJlc3NfbGF0ID0gJCgnI2FkZHJlc3NfbGF0JykudmFsKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgYWRkcmVzc19sbmcgPSAkKCcjYWRkcmVzc19sbmcnKS52YWwoKTtcclxuICAgICAgICAgICAgICAgICAgICAvL2NvbnN0IGFjY291bnRtYW5hZ2VyaWQgPSAkKCcjcmVnaXN0ZXItYWNjb3VudG1hbmFnZXItaWQnKS5hdHRyKCdyZWdpc3Rlcl9hY2NvdW50bWFuYWdlcl9pZCcpO1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IG90cCA9ICQoJyNvdHAtdmFsdWUnKS52YWwoKTtcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCB2ZXJpZnlCdXR0b24gPSAkKCcjb3RwLXZlcmlmeS1idXR0b24nKTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAob3RwLmxlbmd0aCA+IDMpIHtcclxuICAgICAgICAgICAgICAgIHZlcmlmeUJ1dHRvbi50ZXh0KCdQTEVBU0UgV0FJVCcpO1xyXG4gICAgICAgICAgICAgICAgdmVyaWZ5QnV0dG9uLnRvZ2dsZUNsYXNzKCdkaXNhYmxlZCcpO1xyXG5cclxuICAgICAgICAgICAgICAgICQuYWpheCh7XHJcbiAgICAgICAgICAgICAgICAgICAgdXJsOiAnaW5kZXgucGhwP3BhdGg9YWNjb3VudC9yZWdpc3Rlci9yZWdpc3Rlcl92ZXJpZnlfb3RwJyxcclxuICAgICAgICAgICAgICAgICAgICB0eXBlOiAnUE9TVCcsXHJcbiAgICAgICAgICAgICAgICAgICAgZGF0YVR5cGU6ICdqc29uJyxcclxuICAgICAgICAgICAgICAgICAgICBkYXRhOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGxvZ2luX2xhdGl0dWRlIDogbG9naW5fbGF0aXR1ZGUsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGxvZ2luX2xvbmdpdHVkZSA6IGxvZ2luX2xvbmdpdHVkZSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgZmlyc3RuYW1lOiBmaXJzdE5hbWUsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGxhc3RuYW1lOiBsYXN0TmFtZSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgZW1haWw6IGVtYWlsLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB0ZWxlcGhvbmU6IHBob25lLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb21wYW55X25hbWU6IGNvbXBhbnlOYW1lLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb21wYW55X2FkZHJlc3M6IGNvbXBhbnlBZGRyZXNzLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBjdXN0b21lcl9ncm91cF9pZDogYnVzaW5lc3NUeXBlLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBob3VzZV9idWlsZGluZzogYnVpbGRpbmdOYW1lLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBhZGRyZXNzOiBhZGRyZXNzTGluZSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgbG9jYXRpb246IGxvY2F0aW9uLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBwYXNzd29yZDogcGFzc3dvcmQsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbmZpcm06IHBhc3N3b3JkQ29uZmlybWF0aW9uLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBhY2NvdW50bWFuYWdlcmlkOiBhY2NvdW50bWFuYWdlcmlkLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBhZGRyZXNzX2xhdDphZGRyZXNzX2xhdCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgYWRkcmVzc19sbmc6YWRkcmVzc19sbmcsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHNpZ251cF9vdHA6IG90cCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy9hY2NvdW50bWFuYWdlcm5hbWU6YWNjb3VudG1hbmFnZXJuYW1lXHJcbiAgICAgICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgICAgICBzdWNjZXNzOiBmdW5jdGlvbiAoanNvbikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB2ZXJpZnlCdXR0b24udGV4dCgnVkVSSUZZJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZlcmlmeUJ1dHRvbi50b2dnbGVDbGFzcygnZGlzYWJsZWQnKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgJCgnI290cC12YWx1ZScpLnZhbCgnJyk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoanNvblsnc3RhdHVzJ10pIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGl6aVRvYXN0LnN1Y2Nlc3Moe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRpbWVvdXQ6IGZhbHNlLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBvc2l0aW9uOiAndG9wUmlnaHQnLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1lc3NhZ2U6IGpzb25bJ3N1Y2Nlc3NfbWVzc2FnZSddXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB3aW5kb3cubG9jYXRpb24gPSAkKCcuYmFzZV91cmwnKS5hdHRyKCdocmVmJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LCAzMDAwKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaXppVG9hc3Qud2FybmluZyh7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcG9zaXRpb246ICd0b3BSaWdodCcsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbWVzc2FnZTogJ1dlIGNvdWxkblxcJ3QgdmVyaWZ5IHlvdXIgYWNjb3VudC4gUGxlYXNlIGNoZWNrIHRoZSBPVFAnXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgaXppVG9hc3QuZXJyb3Ioe1xyXG4gICAgICAgICAgICAgICAgICAgIHBvc2l0aW9uOiAndG9wUmlnaHQnLFxyXG4gICAgICAgICAgICAgICAgICAgIG1lc3NhZ2U6ICdQbGVhc2UgZW50ZXIgYSB2YWxpZCBPVFAnXHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIFxyXG4gICAgICAgIC8vIE9UUCBWZXJpZmljYXRpb25cclxuICAgICAgICAkKGRvY3VtZW50KS5kZWxlZ2F0ZSgnI2lwLW90cC12ZXJpZnktYnV0dG9uJywgJ2NsaWNrJywgZnVuY3Rpb24gKGUpIHtcclxuICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBjb25zdCBlbWFpbCA9ICQoJyNsb2dpbi1lbWFpbCcpLnZhbCgpO1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IG90cCA9ICQoJyNvdHAtdmFsdWUnKS52YWwoKTtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgbG9naW5fbGF0aXR1ZGUgPSAkKCcjbGF0JykudmFsKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIGxvZ2luX2xvbmdpdHVkZSA9ICQoJyNsbmcnKS52YWwoKTtcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCBwYXNzd29yZCA9ICQoJyNsb2dpbi1wYXNzd29yZCcpLnZhbCgpO1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHZlcmlmeUJ1dHRvbiA9ICQoJyNvdHAtdmVyaWZ5LWJ1dHRvbicpO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChvdHAubGVuZ3RoID4gMykge1xyXG4gICAgICAgICAgICAgICAgdmVyaWZ5QnV0dG9uLnRleHQoJ1BMRUFTRSBXQUlUJyk7XHJcbiAgICAgICAgICAgICAgICB2ZXJpZnlCdXR0b24udG9nZ2xlQ2xhc3MoJ2Rpc2FibGVkJyk7XHJcblxyXG4gICAgICAgICAgICAgICAgJC5hamF4KHtcclxuICAgICAgICAgICAgICAgICAgICB1cmw6ICdpbmRleC5waHA/cGF0aD1hY2NvdW50L2xvZ2luL2FkZFZlcmlmeU5ld0lQb3RwJyxcclxuICAgICAgICAgICAgICAgICAgICB0eXBlOiAnUE9TVCcsXHJcbiAgICAgICAgICAgICAgICAgICAgZGF0YVR5cGU6ICdqc29uJyxcclxuICAgICAgICAgICAgICAgICAgICBkYXRhOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGVtYWlsOiBlbWFpbCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgb3RwOiBvdHBcclxuICAgICAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgICAgIHN1Y2Nlc3M6IGZ1bmN0aW9uIChqc29uKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZlcmlmeUJ1dHRvbi50ZXh0KCdWRVJJRlknKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdmVyaWZ5QnV0dG9uLnRvZ2dsZUNsYXNzKCdkaXNhYmxlZCcpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAkKCcjb3RwLXZhbHVlJykudmFsKCcnKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChqc29uWydzdGF0dXMnXSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaXppVG9hc3Quc3VjY2Vzcyh7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGltZW91dDogZmFsc2UsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcG9zaXRpb246ICd0b3BSaWdodCcsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbWVzc2FnZTogJ1dpbGwgYmUgcmVkaXJlY3RpbmcgdG8gbG9naW4gcGFnZSEnXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGpzb25bJ3N0YXR1cyddKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJC5hamF4KHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB1cmw6ICdpbmRleC5waHA/cGF0aD1hY2NvdW50L2xvZ2luL2xvZ2luJyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6ICdwb3N0JyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGE6IHtlbWFpbDogZW1haWwsIHBhc3N3b3JkOiBwYXNzd29yZCwgbG9naW5fbGF0aXR1ZGU6bG9naW5fbGF0aXR1ZGUsIGxvZ2luX2xvbmdpdHVkZTpsb2dpbl9sb25naXR1ZGUsIGxvZ2luX21vZGU6J3dlYid9LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YVR5cGU6ICdqc29uJyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN1Y2Nlc3M6IGZ1bmN0aW9uIChqc29uKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoanNvblsnc3RhdHVzJ10pIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChqc29uWydyZWRpcmVjdCddICE9IG51bGwpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdpbmRvdy5sb2NhdGlvbi5ocmVmID0ganNvblsncmVkaXJlY3QnXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoanNvblsndGVtcHBhc3N3b3JkJ10gPT0gJzEnKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsb2NhdGlvbiA9ICQoJy5iYXNlX3VybCcpLmF0dHIoJ2hyZWYnKSArICcvY2hhbmdlcGFzcyc7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKCQoJy5iYXNlX3VybCcpKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsb2NhdGlvbiA9ICQoJy5iYXNlX3VybCcpLmF0dHIoJ2hyZWYnKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpemlUb2FzdC5lcnJvcih7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwb3NpdGlvbjogJ3RvcFJpZ2h0JyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbWVzc2FnZToganNvblsnZXJyb3Jfd2FybmluZyddXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxvY2F0aW9uID0gJCgnLmJhc2VfdXJsJykuYXR0cignaHJlZicpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsb2dpbkJ1dHRvbi50ZXh0KCdMT0dJTicpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsb2dpbkJ1dHRvbi50b2dnbGVDbGFzcygnZGlzYWJsZWQnKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTsgICAgXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLyppZiAoanNvblsncmVkaXJlY3QnXSAhPSBudWxsKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgd2luZG93LmxvY2F0aW9uLmhyZWYgPSBqc29uWydyZWRpcmVjdCddO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoanNvblsndGVtcHBhc3N3b3JkJ10gPT0gJzEnKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbG9jYXRpb24gPSAkKCcuYmFzZV91cmwnKS5hdHRyKCdocmVmJykgKyAnL2NoYW5nZXBhc3MnO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coJCgnLmJhc2VfdXJsJykpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbG9jYXRpb24gPSAkKCcuYmFzZV91cmwnKS5hdHRyKCdocmVmJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSovXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sIDE1MDApXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpemlUb2FzdC53YXJuaW5nKHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwb3NpdGlvbjogJ3RvcFJpZ2h0JyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtZXNzYWdlOiAnV2UgY291bGRuXFwndCB2ZXJpZnkgeW91ciBhY2NvdW50LiBQbGVhc2UgY2hlY2sgdGhlIE9UUCdcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBpemlUb2FzdC5lcnJvcih7XHJcbiAgICAgICAgICAgICAgICAgICAgcG9zaXRpb246ICd0b3BSaWdodCcsXHJcbiAgICAgICAgICAgICAgICAgICAgbWVzc2FnZTogJ1BsZWFzZSBlbnRlciBhIHZhbGlkIE9UUCdcclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICQoZG9jdW1lbnQpLmRlbGVnYXRlKCcjY2FyZWVycy1zdWJtaXQtYnV0dG9uJywgJ2NsaWNrJywgZnVuY3Rpb24gKGUpIHtcclxuICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGZpcnN0TmFtZSA9ICQoJyNjYXJlZXJzLWZpcnN0LW5hbWUnKS52YWwoKTtcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCBsYXN0TmFtZSA9ICQoJyNjYXJlZXJzLWxhc3QtbmFtZScpLnZhbCgpO1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHJvbGUgPSAkKCcjY2FyZWVycy1kZXNpZ25hdGlvbicpLnZhbCgpO1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHlvdXJzZWxmID0gJCgnI2NhcmVlcnMtYWJvdXQteW91cnNlbGYnKS52YWwoKTtcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCBqb2JfaWQgPSAkKCcjY2FyZWVycy1qb2ItaWQnKS52YWwoKTtcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCBjb3ZlciA9ICQoJyNjYXJlZXJzLWNvdmVyLWxldHRlcicpLnZhbCgpO1xyXG4gICAgICAgICAgICAgICAgICAgIC8vIGNvbnN0IGN2X3BhdGggPSAkKCcjY2FyZWVycy1jdi1wYXRoJykudmFsKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgcmVnaXN0ZXJGb3JtID0gJCgnI2NhcmVlcnMtZm9ybScpWzBdO1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGZvcm1Jc1ZhbGlkID0gcmVnaXN0ZXJGb3JtLnJlcG9ydFZhbGlkaXR5KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgcmVnaXN0ZXJCdXR0b24gPSAkKCcjY2FyZWVycy1zdWJtaXQtYnV0dG9uJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGZvcm1Jc1ZhbGlkKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoZ3JlY2FwdGNoYS5nZXRSZXNwb25zZSgpID09ICcnKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaXppVG9hc3Qud2FybmluZyh7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHBvc2l0aW9uOiAndG9wUmlnaHQnLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBtZXNzYWdlOiAnUGxlYXNlIGNvbXBsZXRlIGNhcHRjaGEnXHJcbiAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIHJlZ2lzdGVyQnV0dG9uLnRleHQoJ1BMRUFTRSBXQUlUJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgcmVnaXN0ZXJCdXR0b24udG9nZ2xlQ2xhc3MoJ2Rpc2FibGVkJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgJC5hamF4KHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdXJsOiAnaW5kZXgucGhwP3BhdGg9Y29tbW9uL2hvbWUvc2F2ZWNhcmVlcnMnLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiAnUE9TVCcsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGRhdGFUeXBlOiAnanNvbicsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGRhdGE6IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZpcnN0bmFtZTogZmlyc3ROYW1lLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbGFzdG5hbWU6IGxhc3ROYW1lLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcm9sZTogcm9sZSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHlvdXJzZWxmOiB5b3Vyc2VsZixcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGpvYl9pZDogam9iX2lkLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY292ZXI6IGNvdmVyLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy9jdl9wYXRoOiBjdl9wYXRoa1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBzdWNjZXNzOiBmdW5jdGlvbiAoanNvbikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVnaXN0ZXJCdXR0b24udG9nZ2xlQ2xhc3MoJ2Rpc2FibGVkJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoanNvblsnc3RhdHVzJ10pIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpemlUb2FzdC5zdWNjZXNzKHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcG9zaXRpb246ICd0b3BSaWdodCcsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1lc3NhZ2U6IGpzb25bJ3N1Y2Nlc3NfbWVzc2FnZSddXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJCgnI2NhcmVlcnMtZm9ybScpWzBdLnJlc2V0KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVnaXN0ZXJCdXR0b24udGV4dCgnU1VCTUlUJyk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpemlUb2FzdC53YXJuaW5nKHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcG9zaXRpb246ICd0b3BSaWdodCcsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRpdGxlOiAnT29wcycsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1lc3NhZ2U6IGpzb25bJ2Vycm9yX3dhcm5pbmcnXVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgJChkb2N1bWVudCkuZGVsZWdhdGUoJyNwYXJ0bmVyLXJlZ2lzdHJhdGlvbi1idXR0b24nLCAnY2xpY2snLCBmdW5jdGlvbiAoZSkge1xyXG4gICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgZmlyc3ROYW1lID0gJCgnI3BhcnRuZXItZmlyc3QtbmFtZScpLnZhbCgpO1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGxhc3ROYW1lID0gJCgnI3BhcnRuZXItbGFzdC1uYW1lJykudmFsKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgZGVzaWduYXRpb24gPSAkKCcjcGFydG5lci1kZXNpZ25hdGlvbicpLnZhbCgpO1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGNvbXBhbnkgPSAkKCcjcGFydG5lci1jb21wYW55LW5hbWUnKS52YWwoKTtcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCBlbWFpbCA9ICQoJyNwYXJ0bmVyLWVtYWlsJykudmFsKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgcGhvbmUgPSAkKCcjcGFydG5lci1waG9uZScpLnZhbCgpO1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGRlc2NyaXB0aW9uID0gJCgnI3BhcnRuZXItZGVzY3JpcHRpb24nKS52YWwoKTtcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCByZWdpc3RlckZvcm0gPSAkKCcjcGFydG5lci1yZWdpc3RyYXRpb24tZm9ybScpWzBdO1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGZvcm1Jc1ZhbGlkID0gcmVnaXN0ZXJGb3JtLnJlcG9ydFZhbGlkaXR5KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgcmVnaXN0ZXJCdXR0b24gPSAkKCcjcGFydG5lci1yZWdpc3RyYXRpb24tYnV0dG9uJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGZvcm1Jc1ZhbGlkKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoZ3JlY2FwdGNoYS5nZXRSZXNwb25zZSgpID09ICcnKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaXppVG9hc3Qud2FybmluZyh7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHBvc2l0aW9uOiAndG9wUmlnaHQnLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBtZXNzYWdlOiAnUGxlYXNlIGNvbXBsZXRlIGNhcHRjaGEnXHJcbiAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIHJlZ2lzdGVyQnV0dG9uLnRleHQoJ1BMRUFTRSBXQUlUJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgcmVnaXN0ZXJCdXR0b24udG9nZ2xlQ2xhc3MoJ2Rpc2FibGVkJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgJC5hamF4KHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdXJsOiAnaW5kZXgucGhwP3BhdGg9Y29tbW9uL2hvbWUvc2F2ZXBhcnRuZXInLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiAnUE9TVCcsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGRhdGFUeXBlOiAnanNvbicsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGRhdGE6IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZpcnN0bmFtZTogZmlyc3ROYW1lLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbGFzdG5hbWU6IGxhc3ROYW1lLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZGVzaWduYXRpb246IGRlc2lnbmF0aW9uLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29tcGFueTogY29tcGFueSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVtYWlsOiBlbWFpbCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBob25lOiBwaG9uZSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRlc2NyaXB0aW9uOiBkZXNjcmlwdGlvblxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBzdWNjZXNzOiBmdW5jdGlvbiAoanNvbikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVnaXN0ZXJCdXR0b24udG9nZ2xlQ2xhc3MoJ2Rpc2FibGVkJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoanNvblsnc3RhdHVzJ10pIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpemlUb2FzdC5zdWNjZXNzKHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcG9zaXRpb246ICd0b3BSaWdodCcsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1lc3NhZ2U6IGpzb25bJ3N1Y2Nlc3NfbWVzc2FnZSddXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJCgnI3BhcnRuZXItcmVnaXN0cmF0aW9uLWZvcm0nKVswXS5yZXNldCgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpemlUb2FzdC53YXJuaW5nKHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcG9zaXRpb246ICd0b3BSaWdodCcsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRpdGxlOiAnT29wcycsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1lc3NhZ2U6IGpzb25bJ2Vycm9yX3dhcm5pbmcnXVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgJCgnI2ZvcmdvdC1wYXNzd29yZC1idG4nKS5jbGljayhmdW5jdGlvbiAoZSkge1xyXG4gICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XHJcblxyXG4gICAgICAgICAgICAkKCcjbG9naW4tdmlldycpLmhpZGUoKTtcclxuICAgICAgICAgICAgJCgnI2ZvcmdvdC1wYXNzd29yZC12aWV3Jykuc2hvdygpO1xyXG5cclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgJCgnI3Bhc3N3b3JkLXJlc2V0LWJ1dHRvbicpLmNsaWNrKGZ1bmN0aW9uIChlKSB7XHJcbiAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcclxuXHJcbiAgICAgICAgICAgIGNvbnN0IGVtYWlsID0gJCgnI3Jlc2V0LXBhc3N3b3JkLWVtYWlsJykudmFsKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgcmVzZXRCdXR0b24gPSAkKCcjcGFzc3dvcmQtcmVzZXQtYnV0dG9uJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGVtYWlsLmxlbmd0aCA9PSAwKSB7XHJcbiAgICAgICAgICAgICAgICBpemlUb2FzdC53YXJuaW5nKHtcclxuICAgICAgICAgICAgICAgICAgICBwb3NpdGlvbjogJ3RvcFJpZ2h0JyxcclxuICAgICAgICAgICAgICAgICAgICBtZXNzYWdlOiAnUGxlYXNlIGVudGVyIHlvdXIgYWNjb3VudCBlbWFpbCdcclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgcmVzZXRCdXR0b24udGV4dCgnUExFQVNFIFdBSVQnKTtcclxuICAgICAgICAgICAgICAgIHJlc2V0QnV0dG9uLnRvZ2dsZUNsYXNzKCdkaXNhYmxlZCcpO1xyXG5cclxuICAgICAgICAgICAgICAgICQuYWpheCh7XHJcbiAgICAgICAgICAgICAgICAgICAgdXJsOiAnaW5kZXgucGhwP3BhdGg9YWNjb3VudC9mb3Jnb3R0ZW4nLFxyXG4gICAgICAgICAgICAgICAgICAgIHR5cGU6ICdQT1NUJyxcclxuICAgICAgICAgICAgICAgICAgICBkYXRhVHlwZTogJ2pzb24nLFxyXG4gICAgICAgICAgICAgICAgICAgIGRhdGE6IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZW1haWw6IGVtYWlsXHJcbiAgICAgICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgICAgICBzdWNjZXNzOiBmdW5jdGlvbiAoanNvbikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXNldEJ1dHRvbi50ZXh0KCdSRVNFVCBQQVNTV09SRCcpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXNldEJ1dHRvbi50b2dnbGVDbGFzcygnZGlzYWJsZWQnKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgJCgnI3Jlc2V0LXBhc3N3b3JkLWVtYWlsJykudmFsKCcnKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChqc29uWydzdGF0dXMnXSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaXppVG9hc3Quc3VjY2Vzcyh7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGltZW91dDogZmFsc2UsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcG9zaXRpb246ICd0b3BSaWdodCcsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbWVzc2FnZToganNvblsndGV4dF9tZXNzYWdlJ11cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaXppVG9hc3Qud2FybmluZyh7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcG9zaXRpb246ICd0b3BSaWdodCcsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbWVzc2FnZTogJ1dlIGNvdWxkblxcJ3QgZmluZCBhbiBhY2NvdW50IHdpdGggdGhhdCBlbWFpbCBhZGRyZXNzJ1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICAkKCcjZmFybWVyLXJlZ2lzdGVyLWJ1dHRvbicpLmNsaWNrKGZ1bmN0aW9uIChlKSB7XHJcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKCdGYXJtZXIgUmVnaXN0cmF0aW9uIScpO1xyXG4gICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XHJcbiAgICAgICAgICAgIFxyXG4gICAgICAgICAgICB2YXIgbG9naW5fbGF0aXR1ZGUgPSAkKCcjbGF0JykudmFsKCk7XHJcbiAgICAgICAgICAgIHZhciBsb2dpbl9sb25naXR1ZGUgPSAkKCcjbG5nJykudmFsKCk7XHJcbiAgICAgICAgICAgIGNvbnN0IGZpcnN0TmFtZSA9ICQoJyNmYXJtZXItZmlyc3QtbmFtZScpLnZhbCgpO1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGxhc3ROYW1lID0gJCgnI2Zhcm1lci1sYXN0LW5hbWUnKS52YWwoKTtcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCBlbWFpbCA9ICQoJyNmYXJtZXItZW1haWwnKS52YWwoKTtcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCBwaG9uZSA9ICQoJyNmYXJtZXItcGhvbmUnKS52YWwoKTtcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCBmYXJtZXJUeXBlID0gJCgnI2Zhcm1lci10eXBlJykudmFsKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgZmFybUxvY2F0aW9uID0gJCgnI2Zhcm1lci1sb2NhdGlvbicpLnZhbCgpO1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGZhcm1JcnJpZ2F0aW9uVHlwZSA9ICQoJyNpcnJpZ2F0aW9uLXR5cGUnKS52YWwoKTtcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCBwcm9kdWNlRGVzY3JpcHRpb24gPSAkKCcjZmFybWVyLXByb2R1Y2UtZ3Jvd24nKS52YWwoKTtcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCBmYXJtc2l6ZSA9ICQoJyNmYXJtLXNpemUnKS52YWwoKTtcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCBmYXJtc2l6ZXR5cGUgPSAkKCcjZmFybS1zaXplLXR5cGUnKS52YWwoKTtcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCBmYXJtZXJvcmdhbml6YXRpb24gPSAkKCcjZmFybWVyLW9yZ2FuaXphdGlvbicpLnZhbCgpO1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHJlZ2lzdGVyQnV0dG9uID0gJCgnI2Zhcm1lci1yZWdpc3Rlci1idXR0b24nKTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoZ3JlY2FwdGNoYS5nZXRSZXNwb25zZSgpID09ICcnKSB7XHJcbiAgICAgICAgICAgICAgICBpemlUb2FzdC53YXJuaW5nKHtcclxuICAgICAgICAgICAgICAgICAgICBwb3NpdGlvbjogJ3RvcFJpZ2h0JyxcclxuICAgICAgICAgICAgICAgICAgICBtZXNzYWdlOiAnUGxlYXNlIGNvbXBsZXRlIGNhcHRjaGEnXHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIGlmICgkKCcjZmFybWVyLXJlZ2lzdHJhdGlvbi1mb3JtJylbMF0ucmVwb3J0VmFsaWRpdHkoKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIC8qaXppVG9hc3Quc3VjY2Vzcyh7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHBvc2l0aW9uOiAndG9wUmlnaHQnLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBtZXNzYWdlOiAnVGhhbmtzIGZvciByZWdpc3RlcmluZy4gV2VcXCdsbCBnZXQgaW4gdG91Y2gnXHJcbiAgICAgICAgICAgICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICQoJyNmYXJtZXItcmVnaXN0cmF0aW9uLWZvcm0nKVswXS5yZXNldCgpOyovXHJcbiAgICAgICAgICAgICAgICAgICAgIHJlZ2lzdGVyQnV0dG9uLnRleHQoJ1BMRUFTRSBXQUlUJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgIHJlZ2lzdGVyQnV0dG9uLnRvZ2dsZUNsYXNzKCdkaXNhYmxlZCcpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgJC5hamF4KHtcclxuICAgICAgICAgICAgICAgICAgICAgICB1cmw6ICdpbmRleC5waHA/cGF0aD1hY2NvdW50L2Zhcm1lcnJlZ2lzdGVyL3JlZ2lzdGVyJyxcclxuICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiAnUE9TVCcsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgZGF0YVR5cGU6ICdqc29uJyxcclxuICAgICAgICAgICAgICAgICAgICAgICBkYXRhOiB7IFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgZmlyc3RfbmFtZSA6IGZpcnN0TmFtZSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgIGxhc3RfbmFtZSA6IGxhc3ROYW1lLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgZW1haWw6IGVtYWlsLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgdGVsZXBob25lOiBwaG9uZSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgIGZhcm1lcl90eXBlIDogZmFybWVyVHlwZSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgIGZhcm1lcl9sb2NhdGlvbiAgOiBmYXJtTG9jYXRpb24sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICBmYXJtZXJfaXJyaWdhdGlvbl90eXBlIDogZmFybUlycmlnYXRpb25UeXBlLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgZmFybWVyX2Rlc2NyaXB0aW9uIDogcHJvZHVjZURlc2NyaXB0aW9uLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgZmFybXNpemUgOiBmYXJtc2l6ZSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgIGZhcm1lcm9yZ2FuaXphdGlvbiA6IGZhcm1lcm9yZ2FuaXphdGlvbixcclxuICAgICAgICAgICAgICAgICAgICAgICAgIGZhcm1zaXpldHlwZSA6IGZhcm1zaXpldHlwZSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgIGxvZ2luX2xhdGl0dWRlIDogbG9naW5fbGF0aXR1ZGUsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICBsb2dpbl9sb25naXR1ZGUgOiBsb2dpbl9sb25naXR1ZGUsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgICAgICAgICBzdWNjZXNzOiBmdW5jdGlvbiAoanNvbikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgcmVnaXN0ZXJCdXR0b24udGV4dCgnUkVHSVNURVInKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgIHJlZ2lzdGVyQnV0dG9uLnRvZ2dsZUNsYXNzKCdkaXNhYmxlZCcpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChqc29uWydzdGF0dXMnXSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICBpemlUb2FzdC5zdWNjZXNzKHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwb3NpdGlvbjogJ3RvcFJpZ2h0JyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtZXNzYWdlOiBqc29uWydzdWNjZXNzX21lc3NhZ2UnXVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICQoJyNmYXJtZXItcmVnaXN0cmF0aW9uLWZvcm0nKVswXS5yZXNldCgpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgIGl6aVRvYXN0Lndhcm5pbmcoe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBvc2l0aW9uOiAndG9wUmlnaHQnLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRpdGxlOiAnT29wcycsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbWVzc2FnZToganNvblsnZXJyb3Jfd2FybmluZyddKycgJysnV2UgY291bGRuXFwndCByZWdpc3RlciB5b3UuIFBsZWFzZSB0cnkgYWdhaW4nXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgJChcIiNjYXJlZXJzLWpvYi1jYXRlZ29yeSwgI2NhcmVlcnMtam9iLXR5cGUsICNjYXJlZXJzLWpvYi1sb2NhdGlvblwiKS5jaGFuZ2UoZnVuY3Rpb24gKCkge1xyXG5cclxuICAgICAgICAgICAgdmFyIHVybCA9ICdpbmRleC5waHA/cGF0aD1jb21tb24vaG9tZS9jYXJlZXJzJztcclxuXHJcblxyXG4gICAgICAgICAgICB2YXIgZmlsdHNlcl9jYXRlZ29yeSA9ICQoJyNjYXJlZXJzLWpvYi1jYXRlZ29yeScpLnZhbCgpO1xyXG5cclxuICAgICAgICAgICAgaWYgKGZpbHRlcl9jYXRlZ29yeSAmJiBmaWx0ZXJfY2F0ZWdvcnkgIT0gXCJBbGwgSm9iIENhdGVnb3J5XCIpIHtcclxuICAgICAgICAgICAgICAgIHVybCArPSAnJmZpbHRlcl9jYXRlZ29yeT0nICsgZW5jb2RlVVJJQ29tcG9uZW50KGZpbHRlcl9jYXRlZ29yeSk7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHZhciBmaWx0ZXJfdHlwZSA9ICQoJyNjYXJlZXJzLWpvYi10eXBlJykudmFsKCk7XHJcblxyXG4gICAgICAgICAgICBpZiAoZmlsdGVyX3R5cGUgJiYgZmlsdGVyX3R5cGUgIT0gXCJBbGwgSm9iIFR5cGVcIikge1xyXG4gICAgICAgICAgICAgICAgdXJsICs9ICcmZmlsdGVyX3R5cGU9JyArIGVuY29kZVVSSUNvbXBvbmVudChmaWx0ZXJfdHlwZSk7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHZhciBmaWx0ZXJfbG9jYXRpb24gPSAkKCcjY2FyZWVycy1qb2ItbG9jYXRpb24nKS52YWwoKTtcclxuXHJcbiAgICAgICAgICAgIGlmIChmaWx0ZXJfbG9jYXRpb24gJiYgZmlsdGVyX2xvY2F0aW9uICE9IFwiQWxsIEpvYiBMb2NhdGlvblwiKSB7XHJcbiAgICAgICAgICAgICAgICB1cmwgKz0gJyZmaWx0ZXJfbG9jYXRpb249JyArIGVuY29kZVVSSUNvbXBvbmVudChmaWx0ZXJfbG9jYXRpb24pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGxvY2F0aW9uID0gdXJsO1xyXG5cclxuICAgICAgICB9KTtcclxuICAgIH0pO1xyXG4gICAgXHJcbiAgICBcclxuICAgIHZhciBsYXQgPSAkKFwiI2xhdFwiKTtcclxuICAgIHZhciBsbmcgPSAkKFwiI2xuZ1wiKTtcclxuXHJcbiAgICAgICAgIGZ1bmN0aW9uIGdldExvY2F0aW9uT25seSgpIHtcclxuICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgaWYgKG5hdmlnYXRvci5nZW9sb2NhdGlvbikgeyAgICBcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coMSk7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgbmF2aWdhdG9yLmdlb2xvY2F0aW9uLmdldEN1cnJlbnRQb3NpdGlvbihcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHNob3dQb3NpdGlvbk9ubHksIFxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gRXJyb3IgZnVuY3Rpb25cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG51bGwsLy9zaG93RXJyb3IsIFxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gT3B0aW9ucy4gU2VlIE1ETiBmb3IgZGV0YWlscy5cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGVuYWJsZUhpZ2hBY2N1cmFjeTogdHJ1ZSxcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRpbWVvdXQ6IDUwMDAsXHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBtYXhpbXVtQWdlOiAwXHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9KTsgICAgICAgICAgICAgICAgICAgIFxyXG5cclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7IFxyXG5cclxuICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZygyKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhcIkdlb2xvY2F0aW9uIGlzIG5vdCBzdXBwb3J0ZWQgYnkgdGhpcyBicm93c2VyLlwiKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAvKmxhdC5pbm5lckhUTUwgPSAgIDA7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgbG5nLmlubmVySFRNTCA9IDA7Ki9cclxuXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgIH1cclxuICAgICAgICAgXHJcbiAgICAgICAgIGZ1bmN0aW9uIHNob3dQb3NpdGlvbk9ubHkocG9zaXRpb24pIHtcclxuICAgICAgICAgICAgIGNvbnNvbGUubG9nKCdzaG93UG9zaXRpb25Pbmx5Jyk7XHJcbiAgICAgICAgICAgICBjb25zb2xlLmxvZyhwb3NpdGlvbik7XHJcbiAgICAgICAgICAgICAkKFwiI2xhdFwiKS52YWwocG9zaXRpb24uY29vcmRzLmxhdGl0dWRlKTtcclxuICAgICAgICAgICAgICQoXCIjbG5nXCIpLnZhbChwb3NpdGlvbi5jb29yZHMubG9uZ2l0dWRlKTtcclxuICAgICAgICAgICAgIGNvbnNvbGUubG9nKHBvc2l0aW9uLmNvb3Jkcy5sYXRpdHVkZSk7XHJcbiAgICAgICAgICAgICBjb25zb2xlLmxvZyhwb3NpdGlvbi5jb29yZHMubG9uZ2l0dWRlKTtcclxuICAgICAgICAgfVxyXG4gICAgICAgICBcclxuICAgICAgICAgJChkb2N1bWVudCkuZGVsZWdhdGUoJzppbnB1dCcsICdrZXl1cCBjaGFuZ2UnLCBmdW5jdGlvbiAoZSkge1xyXG4gICAgICAgICAgZ2V0TG9jYXRpb25Pbmx5KCk7ICAgXHJcbiAgICAgICAgIH0pO1xyXG4gICAgICAgICBcclxufSkoalF1ZXJ5LCB3aW5kb3csIGRvY3VtZW50KTtcclxuIl19
