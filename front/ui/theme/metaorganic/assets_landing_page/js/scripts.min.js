/*!
 * kwikbasket
 * KwikBasket Landing Page
 * 
 * @author KwikBasket
 * @version 1.0.0
 * Copyright 2021. MIT licensed.
 */
!function(e,t,a,o){"use strict";function s(){navigator.geolocation?(console.log(1),navigator.geolocation.getCurrentPosition(i,null,{enableHighAccuracy:!0,timeout:5e3,maximumAge:0})):(console.log(2),console.log("Geolocation is not supported by this browser."))}function i(t){console.log("showPositionOnly"),console.log(t),e("#lat").val(t.coords.latitude),e("#lng").val(t.coords.longitude),console.log(t.coords.latitude),console.log(t.coords.longitude)}s(),e(function(){e(a).scroll(function(){var t=e(".fixed-top");t.toggleClass("scrolled",e(this).scrollTop()>t.height())}),e(".nav-link, .navbar-brand").click(function(){var t=e(this).attr("href");e("html, body").animate({scrollTop:e(t).offset().top},700)}),ScrollOut(),gsap.to(".anim-from-top",{opacity:1,y:0,duration:.5,ease:"elastic"}),gsap.to(".anim-from-bottom",{y:0,duration:.5}),e("input[name='register-accountmanager-id']").autocomplete({source:function(t,a){e.ajax({url:"index.php?path=account/login/autocompleteaccountmanager&filter_name="+e("input[name='register-accountmanager-id']").val(),dataType:"json",success:function(t){a(e.map(t,function(e){return{label:e.firstname,value:e.user_id}}))}})},select:function(t,a){return console.log(a.item.label),console.log(a.item.value),e("input[name='register-accountmanager-id']").val(a.item.label),e("input[name='register-accountmanager-id']").attr("register_accountmanager_id",a.item.value),!1}}),e(a).delegate("#login-button","click",function(a){s(),a.preventDefault();const o=e("#login-button");var i=e("#lat").val(),r=e("#lng").val();const n=e("#login-email").val(),l=e("#login-password").val();n.length>0&&l.length>0?(o.text("PLEASE WAIT"),o.toggleClass("disabled"),e.ajax({url:"index.php?path=account/login/checkipaddress",type:"post",data:{email:n,password:l},dataType:"json",success:function(a){console.log(a),"Username And Password Doest Match!"==a.message?iziToast.error({position:"topRight",message:"Username And Password Doest Match!"}):1==a.isnewIP?e.ajax({url:"index.php?path=account/login/addSendNewIPotp",type:"POST",dataType:"json",data:{email:n},success:function(t){t.status?(iziToast.success({position:"topRight",message:"OTP Is Sent To Mail!"}),e("#login-view").hide(),e("#otp-view").show()):iziToast.warning({position:"topRight",title:"Oops",message:"Something Went Wrong!"})}}):e.ajax({url:"index.php?path=account/login/login",type:"post",data:{email:n,password:l,login_latitude:i,login_longitude:r,login_mode:"web"},dataType:"json",success:function(a){a.status?null!=a.redirect?t.location.href=a.redirect:"1"==a.temppassword?(location=e(".base_url").attr("href")+"/changepass",console.log(e(".base_url"))):location=e(".base_url").attr("href"):(iziToast.error({position:"topRight",message:a.error_warning}),o.text("LOGIN"),o.toggleClass("disabled"))}})}})):iziToast.warning({position:"topRight",message:"Please enter your email and password"})}),e("#register-phone").keyup(function(e){/\D/g.test(this.value)&&(this.value=this.value.replace(/\D/g,""))}),e(a).delegate("#register-button","click",function(t){s(),t.preventDefault();var a=e("#lat").val(),o=e("#lng").val();const i=e("#register-first-name").val(),r=e("#register-last-name").val(),n=e("#register-email").val(),l=e("#register-phone").val(),c=e("#register-company-name").val(),g=e("#register-company-address").val(),p=e("#register-business-type").val(),u=e("#register-building-name").val(),d=e("#register-address-line").val(),m=e("#register-location").val(),v=e("#register-password").val(),h=e("#register-password-confirm").val(),f=e("#register-accountmanager-id").val(),y=e("#register-accountmanager-id").attr("register_accountmanager_id"),b=e("#registration-view"),T=e("#otp-view"),_=e("#register-button"),w=e("#register-form")[0],x=w.reportValidity();x&&(h!==v?iziToast.warning({position:"topRight",message:"Passwords do no match"}):""==grecaptcha.getResponse()?iziToast.warning({position:"topRight",message:"Please complete captcha"}):(_.text("PLEASE WAIT"),_.toggleClass("disabled"),e.ajax({url:"index.php?path=account/register/register_send_otp",type:"POST",dataType:"json",data:{login_latitude:a,login_longitude:o,firstname:i,lastname:r,email:n,telephone:l,company_name:c,company_address:g,customer_group_id:p,house_building:u,address:d,location:m,password:v,confirm:h,accountmanagerid:y,accountmanagername:f},success:function(e){_.text("SIGN UP"),_.toggleClass("disabled"),e.status?(iziToast.success({position:"topRight",message:e.success_message}),b.hide(),T.show()):iziToast.warning({position:"topRight",title:"Oops",message:e.error_message})}})))}),e(a).delegate("#otp-verify-button","click",function(a){a.preventDefault();var o=e("#lat").val(),s=e("#lng").val();const i=e("#register-first-name").val(),r=e("#register-last-name").val(),n=e("#register-email").val(),l=e("#register-phone").val(),c=e("#register-company-name").val(),g=e("#register-company-address").val(),p=e("#register-business-type").val(),u=e("#register-building-name").val(),d=e("#register-address-line").val(),m=e("#register-location").val(),v=e("#register-password").val(),h=e("#register-password-confirm").val(),f=e("#register-accountmanager-id").val(),y=e("#register-accountmanager-id").attr("register_accountmanager_id"),b=e("#otp-value").val(),T=e("#otp-verify-button");b.length>3?(T.text("PLEASE WAIT"),T.toggleClass("disabled"),e.ajax({url:"index.php?path=account/register/register_verify_otp",type:"POST",dataType:"json",data:{login_latitude:o,login_longitude:s,firstname:i,lastname:r,email:n,telephone:l,company_name:c,company_address:g,customer_group_id:p,house_building:u,address:d,location:m,password:v,confirm:h,accountmanagerid:y,signup_otp:b,accountmanagername:f},success:function(a){T.text("VERIFY"),T.toggleClass("disabled"),e("#otp-value").val(""),a.status?(iziToast.success({timeout:!1,position:"topRight",message:a.success_message}),setTimeout(function(){t.location=e(".base_url").attr("href")},3e3)):iziToast.warning({position:"topRight",message:"We couldn't verify your account. Please check the OTP"})}})):iziToast.error({position:"topRight",message:"Please enter a valid OTP"})}),e(a).delegate("#ip-otp-verify-button","click",function(a){a.preventDefault();const o=e("#login-email").val(),s=e("#otp-value").val();var i=e("#lat").val(),r=e("#lng").val();const n=e("#login-password").val(),l=e("#otp-verify-button");s.length>3?(l.text("PLEASE WAIT"),l.toggleClass("disabled"),e.ajax({url:"index.php?path=account/login/addVerifyNewIPotp",type:"POST",dataType:"json",data:{email:o,otp:s},success:function(a){l.text("VERIFY"),l.toggleClass("disabled"),e("#otp-value").val(""),a.status?(iziToast.success({timeout:!1,position:"topRight",message:"Will be redirecting to login page!"}),setTimeout(function(){a.status&&e.ajax({url:"index.php?path=account/login/login",type:"post",data:{email:o,password:n,login_latitude:i,login_longitude:r,login_mode:"web"},dataType:"json",success:function(a){a.status?null!=a.redirect?t.location.href=a.redirect:"1"==a.temppassword?(location=e(".base_url").attr("href")+"/changepass",console.log(e(".base_url"))):location=e(".base_url").attr("href"):(iziToast.error({position:"topRight",message:a.error_warning}),location=e(".base_url").attr("href"),loginButton.text("LOGIN"),loginButton.toggleClass("disabled"))}})},1500)):iziToast.warning({position:"topRight",message:"We couldn't verify your account. Please check the OTP"})}})):iziToast.error({position:"topRight",message:"Please enter a valid OTP"})}),e(a).delegate("#careers-submit-button","click",function(t){t.preventDefault();const a=e("#careers-first-name").val(),o=e("#careers-last-name").val(),s=e("#careers-designation").val(),i=e("#careers-about-yourself").val(),r=e("#careers-job-id").val(),n=e("#careers-cover-letter").val(),l=e("#careers-form")[0],c=l.reportValidity(),g=e("#careers-submit-button");c&&(""==grecaptcha.getResponse()?iziToast.warning({position:"topRight",message:"Please complete captcha"}):(g.text("PLEASE WAIT"),g.toggleClass("disabled"),e.ajax({url:"index.php?path=common/home/savecareers",type:"POST",dataType:"json",data:{firstname:a,lastname:o,role:s,yourself:i,job_id:r,cover:n},success:function(t){g.toggleClass("disabled"),t.status?(iziToast.success({position:"topRight",message:t.success_message}),e("#careers-form")[0].reset(),g.text("SUBMIT")):iziToast.warning({position:"topRight",title:"Oops",message:t.error_warning})}})))}),e(a).delegate("#partner-registration-button","click",function(t){t.preventDefault();const a=e("#partner-first-name").val(),o=e("#partner-last-name").val(),s=e("#partner-designation").val(),i=e("#partner-company-name").val(),r=e("#partner-email").val(),n=e("#partner-phone").val(),l=e("#partner-description").val(),c=e("#partner-registration-form")[0],g=c.reportValidity(),p=e("#partner-registration-button");g&&(""==grecaptcha.getResponse()?iziToast.warning({position:"topRight",message:"Please complete captcha"}):(p.text("PLEASE WAIT"),p.toggleClass("disabled"),e.ajax({url:"index.php?path=common/home/savepartner",type:"POST",dataType:"json",data:{firstname:a,lastname:o,designation:s,company:i,email:r,phone:n,description:l},success:function(t){p.toggleClass("disabled"),t.status?(iziToast.success({position:"topRight",message:t.success_message}),e("#partner-registration-form")[0].reset()):iziToast.warning({position:"topRight",title:"Oops",message:t.error_warning})}})))}),e("#forgot-password-btn").click(function(t){t.preventDefault(),e("#login-view").hide(),e("#forgot-password-view").show()}),e("#password-reset-button").click(function(t){t.preventDefault();const a=e("#reset-password-email").val(),o=e("#password-reset-button");0==a.length?iziToast.warning({position:"topRight",message:"Please enter your account email"}):(o.text("PLEASE WAIT"),o.toggleClass("disabled"),e.ajax({url:"index.php?path=account/forgotten",type:"POST",dataType:"json",data:{email:a},success:function(t){o.text("RESET PASSWORD"),o.toggleClass("disabled"),e("#reset-password-email").val(""),t.status?iziToast.success({timeout:!1,position:"topRight",message:t.text_message}):iziToast.warning({position:"topRight",message:"We couldn't find an account with that email address"})}}))}),e("#farmer-register-button").click(function(t){console.log("Farmer Registration!"),t.preventDefault();const a=e("#farmer-first-name").val(),o=e("#farmer-last-name").val(),s=e("#farmer-email").val(),i=e("#farmer-phone").val(),r=e("#farmer-type").val(),n=e("#farmer-location").val(),l=e("#irrigation-type").val(),c=e("#farmer-produce-grown").val(),g=e("#farm-size").val(),p=e("#farm-size-type").val(),u=e("#farmer-register-button");""==grecaptcha.getResponse()?iziToast.warning({position:"topRight",message:"Please complete captcha"}):e("#farmer-registration-form")[0].reportValidity()&&(u.text("PLEASE WAIT"),u.toggleClass("disabled"),e.ajax({url:"index.php?path=account/farmerregister/register",type:"POST",dataType:"json",data:{first_name:a,last_name:o,email:s,telephone:i,farmer_type:r,farmer_location:n,farmer_irrigation_type:l,farmer_description:c,farmsize:g,farmsizetype:p},success:function(t){u.text("REGISTER"),u.toggleClass("disabled"),t.status?(iziToast.success({position:"topRight",message:t.success_message}),e("#farmer-registration-form")[0].reset()):iziToast.warning({position:"topRight",title:"Oops",message:"We couldn't register you. Please try again"})}}))}),e("#careers-job-category, #careers-job-type, #careers-job-location").change(function(){var t="index.php?path=common/home/careers";e("#careers-job-category").val();filter_category&&"All Job Category"!=filter_category&&(t+="&filter_category="+encodeURIComponent(filter_category));var a=e("#careers-job-type").val();a&&"All Job Type"!=a&&(t+="&filter_type="+encodeURIComponent(a));var o=e("#careers-job-location").val();o&&"All Job Location"!=o&&(t+="&filter_location="+encodeURIComponent(o)),location=t})});e("#lat"),e("#lng")}(jQuery,window,document);
//# sourceMappingURL=data:application/json;charset=utf8;base64,
