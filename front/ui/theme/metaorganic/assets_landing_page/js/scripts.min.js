/*!
 * kwikbasket
 * KwikBasket Landing Page
 * 
 * @author KwikBasket
 * @version 1.0.0
 * Copyright 2020. MIT licensed.
 */
!function(e,t,a,s){"use strict";function o(){navigator.geolocation?(console.log(1),navigator.geolocation.getCurrentPosition(i,null,{enableHighAccuracy:!0,timeout:5e3,maximumAge:0})):(console.log(2),console.log("Geolocation is not supported by this browser."))}function i(t){console.log("showPositionOnly"),console.log(t),e("#lat").val(t.coords.latitude),e("#lng").val(t.coords.longitude),console.log(t.coords.latitude),console.log(t.coords.longitude)}o(),e(function(){e(a).scroll(function(){var t=e(".fixed-top");t.toggleClass("scrolled",e(this).scrollTop()>t.height())}),e(".nav-link, .navbar-brand").click(function(){var t=e(this).attr("href");e("html, body").animate({scrollTop:e(t).offset().top},700)}),ScrollOut(),gsap.to(".anim-from-top",{opacity:1,y:0,duration:.5,ease:"elastic"}),gsap.to(".anim-from-bottom",{y:0,duration:.5}),e(a).delegate("#login-button","click",function(a){o(),a.preventDefault();const s=e("#login-button");var i=e("#lat").val(),n=e("#lng").val();const r=e("#login-email").val(),l=e("#login-password").val();r.length>0&&l.length>0?(s.text("PLEASE WAIT"),s.toggleClass("disabled"),e.ajax({url:"index.php?path=account/login/checkipaddress",type:"post",data:{email:r,password:l},dataType:"json",success:function(a){console.log(a),"Username And Password Doest Match!"==a.message?iziToast.success({position:"topRight",message:"Username And Password Doest Match!"}):1==a.isnewIP?e.ajax({url:"index.php?path=account/login/addSendNewIPotp",type:"POST",dataType:"json",data:{email:r},success:function(t){t.status?(iziToast.success({position:"topRight",message:"OTP Is Sent To Mail!"}),e("#login-view").hide(),e("#otp-view").show()):iziToast.warning({position:"topRight",title:"Oops",message:"Something Went Wrong!"})}}):e.ajax({url:"index.php?path=account/login/login",type:"post",data:{email:r,password:l,login_latitude:i,login_longitude:n,login_mode:"web"},dataType:"json",success:function(a){a.status?null!=a.redirect?t.location.href=a.redirect:"1"==a.temppassword?(location=e(".base_url").attr("href")+"/changepass",console.log(e(".base_url"))):location=e(".base_url").attr("href"):(iziToast.error({position:"topRight",message:a.error_warning}),s.text("LOGIN"),s.toggleClass("disabled"))}})}})):iziToast.warning({position:"topRight",message:"Please enter your email and password"})}),e("#register-phone").keyup(function(e){/\D/g.test(this.value)&&(this.value=this.value.replace(/\D/g,""))}),e(a).delegate("#register-button","click",function(t){o(),t.preventDefault();e("#lat").val(),e("#lng").val();const a=e("#register-first-name").val(),s=e("#register-last-name").val(),i=e("#register-email").val(),n=e("#register-phone").val(),r=e("#register-company-name").val(),l=e("#register-company-address").val(),c=e("#register-business-type").val(),g=e("#register-building-name").val(),p=e("#register-address-line").val(),u=e("#register-location").val(),d=e("#register-password").val(),m=e("#register-password-confirm").val(),h=e("#registration-view"),v=e("#otp-view"),f=e("#register-button"),b=e("#register-form")[0],y=b.reportValidity();y&&(m!==d?iziToast.warning({position:"topRight",message:"Passwords do no match"}):""==grecaptcha.getResponse()?iziToast.warning({position:"topRight",message:"Please complete captcha"}):(f.text("PLEASE WAIT"),f.toggleClass("disabled"),e.ajax({url:"index.php?path=account/register/register_send_otp",type:"POST",dataType:"json",data:{firstname:a,lastname:s,email:i,telephone:n,company_name:r,company_address:l,customer_group_id:c,house_building:g,address:p,location:u,password:d,confirm:m},success:function(e){f.text("SIGN UP"),f.toggleClass("disabled"),e.status?(iziToast.success({position:"topRight",message:e.success_message}),h.hide(),v.show()):iziToast.warning({position:"topRight",title:"Oops",message:e.error_warning})}})))}),e(a).delegate("#otp-verify-button","click",function(a){a.preventDefault();const s=e("#register-first-name").val(),o=e("#register-last-name").val(),i=e("#register-email").val(),n=e("#register-phone").val(),r=e("#register-company-name").val(),l=e("#register-company-address").val(),c=e("#register-business-type").val(),g=e("#register-building-name").val(),p=e("#register-address-line").val(),u=e("#register-location").val(),d=e("#register-password").val(),m=e("#register-password-confirm").val(),h=e("#otp-value").val(),v=e("#otp-verify-button");h.length>3?(v.text("PLEASE WAIT"),v.toggleClass("disabled"),e.ajax({url:"index.php?path=account/register/register_verify_otp",type:"POST",dataType:"json",data:{firstname:s,lastname:o,email:i,telephone:n,company_name:r,company_address:l,customer_group_id:c,house_building:g,address:p,location:u,password:d,confirm:m,signup_otp:h},success:function(a){v.text("VERIFY"),v.toggleClass("disabled"),e("#otp-value").val(""),a.status?(iziToast.success({timeout:!1,position:"topRight",message:a.success_message}),setTimeout(function(){t.location=e(".base_url").attr("href")},3e3)):iziToast.warning({position:"topRight",message:"We couldn't verify your account. Please check the OTP"})}})):iziToast.error({position:"topRight",message:"Please enter a valid OTP"})}),e(a).delegate("#ip-otp-verify-button","click",function(a){a.preventDefault();const s=e("#login-email").val(),o=e("#otp-value").val();var i=e("#lat").val(),n=e("#lng").val();const r=e("#login-password").val(),l=e("#otp-verify-button");o.length>3?(l.text("PLEASE WAIT"),l.toggleClass("disabled"),e.ajax({url:"index.php?path=account/login/addVerifyNewIPotp",type:"POST",dataType:"json",data:{email:s,otp:o},success:function(a){l.text("VERIFY"),l.toggleClass("disabled"),e("#otp-value").val(""),a.status?(iziToast.success({timeout:!1,position:"topRight",message:"Will be redirecting to login page!"}),setTimeout(function(){a.status&&e.ajax({url:"index.php?path=account/login/login",type:"post",data:{email:s,password:r,login_latitude:i,login_longitude:n,login_mode:"web"},dataType:"json",success:function(a){a.status?null!=a.redirect?t.location.href=a.redirect:"1"==a.temppassword?(location=e(".base_url").attr("href")+"/changepass",console.log(e(".base_url"))):location=e(".base_url").attr("href"):(iziToast.error({position:"topRight",message:a.error_warning}),location=e(".base_url").attr("href"),loginButton.text("LOGIN"),loginButton.toggleClass("disabled"))}})},1500)):iziToast.warning({position:"topRight",message:"We couldn't verify your account. Please check the OTP"})}})):iziToast.error({position:"topRight",message:"Please enter a valid OTP"})}),e(a).delegate("#careers-submit-button","click",function(t){t.preventDefault();const a=e("#careers-first-name").val(),s=e("#careers-last-name").val(),o=e("#careers-designation").val(),i=e("#careers-about-yourself").val(),n=e("#careers-job-id").val(),r=e("#careers-cover-letter").val(),l=e("#careers-form")[0],c=l.reportValidity(),g=e("#careers-submit-button");c&&(""==grecaptcha.getResponse()?iziToast.warning({position:"topRight",message:"Please complete captcha"}):(g.text("PLEASE WAIT"),g.toggleClass("disabled"),e.ajax({url:"index.php?path=common/home/savecareers",type:"POST",dataType:"json",data:{firstname:a,lastname:s,role:o,yourself:i,job_id:n,cover:r},success:function(t){g.toggleClass("disabled"),t.status?(iziToast.success({position:"topRight",message:t.success_message}),e("#careers-form")[0].reset(),g.text("SUBMIT")):iziToast.warning({position:"topRight",title:"Oops",message:t.error_warning})}})))}),e(a).delegate("#partner-registration-button","click",function(t){t.preventDefault();const a=e("#partner-first-name").val(),s=e("#partner-last-name").val(),o=e("#partner-designation").val(),i=e("#partner-company-name").val(),n=e("#partner-email").val(),r=e("#partner-phone").val(),l=e("#partner-description").val(),c=e("#partner-registration-form")[0],g=c.reportValidity(),p=e("#partner-registration-button");g&&(""==grecaptcha.getResponse()?iziToast.warning({position:"topRight",message:"Please complete captcha"}):(p.text("PLEASE WAIT"),p.toggleClass("disabled"),e.ajax({url:"index.php?path=common/home/savepartner",type:"POST",dataType:"json",data:{firstname:a,lastname:s,designation:o,company:i,email:n,phone:r,description:l},success:function(t){p.toggleClass("disabled"),t.status?(iziToast.success({position:"topRight",message:t.success_message}),e("#partner-registration-form")[0].reset()):iziToast.warning({position:"topRight",title:"Oops",message:t.error_warning})}})))}),e("#forgot-password-btn").click(function(t){t.preventDefault(),e("#login-view").hide(),e("#forgot-password-view").show()}),e("#password-reset-button").click(function(t){t.preventDefault();const a=e("#reset-password-email").val(),s=e("#password-reset-button");0==a.length?iziToast.warning({position:"topRight",message:"Please enter your account email"}):(s.text("PLEASE WAIT"),s.toggleClass("disabled"),e.ajax({url:"index.php?path=account/forgotten",type:"POST",dataType:"json",data:{email:a},success:function(t){s.text("RESET PASSWORD"),s.toggleClass("disabled"),e("#reset-password-email").val(""),t.status?iziToast.success({timeout:!1,position:"topRight",message:t.text_message}):iziToast.warning({position:"topRight",message:"We couldn't find an account with that email address"})}}))}),e("#farmer-register-button").click(function(t){t.preventDefault();e("#farmer-first-name").val(),e("#farmer-last-name").val(),e("#farmer-email").val(),e("#farmer-phone").val(),e("#farmer-type").val(),e("#farmer-location").val(),e("farmer-produce-grown").val(),e("#farmer-register-button");""==grecaptcha.getResponse()?iziToast.warning({position:"topRight",message:"Please complete captcha"}):e("#farmer-registration-form")[0].reportValidity()&&(iziToast.success({position:"topRight",message:"Thanks for registering. We'll get in touch"}),e("#farmer-registration-form")[0].reset())}),e("#careers-job-category, #careers-job-type, #careers-job-location").change(function(){var t="index.php?path=common/home/careers",a=e("#careers-job-category").val();a&&"All Job Category"!=a&&(t+="&filter_category="+encodeURIComponent(a));var s=e("#careers-job-type").val();s&&"All Job Type"!=s&&(t+="&filter_type="+encodeURIComponent(s));var o=e("#careers-job-location").val();o&&"All Job Location"!=o&&(t+="&filter_location="+encodeURIComponent(o)),location=t})});e("#lat"),e("#lng")}(jQuery,window,document);
//# sourceMappingURL=data:application/json;charset=utf8;base64,
