/*!
 * kwikbasket
 * KwikBasket Landing Page
 * 
 * @author KwikBasket
 * @version 1.0.0
 * Copyright 2020. MIT licensed.
 */
!function(e,t,a,s){"use strict";e(function(){e(a).scroll(function(){var t=e(".fixed-top");t.toggleClass("scrolled",e(this).scrollTop()>t.height())}),e(".nav-link, .navbar-brand").click(function(){var t=e(this).attr("href");e("html, body").animate({scrollTop:e(t).offset().top},700)}),ScrollOut(),gsap.to(".anim-from-top",{opacity:1,y:0,duration:.5,ease:"elastic"}),gsap.to(".anim-from-bottom",{y:0,duration:.5}),e(a).delegate("#login-button","click",function(t){t.preventDefault();const a=e("#login-button"),s=e("#login-email").val(),o=e("#login-password").val();s.length>0&&o.length>0&&(a.text("PLEASE WAIT"),a.toggleClass("disabled"),e.ajax({url:"index.php?path=account/login/beforeLogin",type:"post",data:{email:s,password:o},dataType:"json",success:function(t){console.log(t),1==t.status?null!=t.two_factor&&(e("#creds").hide(),e("#qrcode").show(),e("#qrcode_img").append("<img src='"+t.two_factor.qr_code+"'/>"),console.log(t.two_factor.qr_code),a.text("LOGIN")):(iziToast.error({position:"topRight",message:t.error_warning}),a.text("LOGIN"),a.toggleClass("disabled"))}}))}),e(a).delegate("#qr-login-button","click",function(a){a.preventDefault();const s=e("#login-button"),o=e("#login-email").val(),i=e("#login-password").val(),r=e("#secret_code").val(),n=e("#one_time_code").val();o.length>0&&i.length>0&&r.length>0&&n.length>0?(s.text("PLEASE WAIT"),s.toggleClass("disabled"),e.ajax({url:"index.php?path=account/login/login",type:"post",data:{email:o,password:i,secret_code:r,one_time_code:n},dataType:"json",success:function(a){a.status?null!=a.redirect?t.location.href=a.redirect:"1"==a.temppassword?(location=e(".base_url").attr("href")+"/changepass",console.log(e(".base_url"))):location=e(".base_url").attr("href"):(iziToast.error({position:"topRight",message:a.error_warning}),s.text("LOGIN"),s.toggleClass("disabled"))}})):iziToast.warning({position:"topRight",message:"Please enter your email and password"})}),e("#register-phone").keyup(function(e){/\D/g.test(this.value)&&(this.value=this.value.replace(/\D/g,""))}),e(a).delegate("#register-button","click",function(t){t.preventDefault();const a=e("#register-first-name").val(),s=e("#register-last-name").val(),o=e("#register-email").val(),i=e("#register-phone").val(),r=e("#register-company-name").val(),n=e("#register-company-address").val(),l=e("#register-business-type").val(),g=e("#register-building-name").val(),c=e("#register-address-line").val(),p=e("#register-location").val(),d=e("#register-password").val(),u=e("#register-password-confirm").val(),m=e("#registration-view"),h=e("#otp-view"),f=e("#register-button"),v=e("#register-form")[0],w=v.reportValidity();w&&(u!==d?iziToast.warning({position:"topRight",message:"Passwords do no match"}):""==grecaptcha.getResponse()?iziToast.warning({position:"topRight",message:"Please complete captcha"}):(f.text("PLEASE WAIT"),f.toggleClass("disabled"),e.ajax({url:"index.php?path=account/register/register_send_otp",type:"POST",dataType:"json",data:{firstname:a,lastname:s,email:o,telephone:i,company_name:r,company_address:n,customer_group_id:l,house_building:g,address:c,location:p,password:d,confirm:u},success:function(e){f.text("SIGN UP"),f.toggleClass("disabled"),e.status?(iziToast.success({position:"topRight",message:e.success_message}),m.hide(),h.show()):iziToast.warning({position:"topRight",title:"Oops",message:e.error_warning})}})))}),e(a).delegate("#otp-verify-button","click",function(a){a.preventDefault();const s=e("#register-first-name").val(),o=e("#register-last-name").val(),i=e("#register-email").val(),r=e("#register-phone").val(),n=e("#register-company-name").val(),l=e("#register-company-address").val(),g=e("#register-business-type").val(),c=e("#register-building-name").val(),p=e("#register-address-line").val(),d=e("#register-location").val(),u=e("#register-password").val(),m=e("#register-password-confirm").val(),h=e("#otp-value").val(),f=e("#otp-verify-button");h.length>3?(f.text("PLEASE WAIT"),f.toggleClass("disabled"),e.ajax({url:"index.php?path=account/register/register_verify_otp",type:"POST",dataType:"json",data:{firstname:s,lastname:o,email:i,telephone:r,company_name:n,company_address:l,customer_group_id:g,house_building:c,address:p,location:d,password:u,confirm:m,signup_otp:h},success:function(a){f.text("VERIFY"),f.toggleClass("disabled"),e("#otp-value").val(""),a.status?(iziToast.success({timeout:!1,position:"topRight",message:a.success_message}),setTimeout(function(){t.location=e(".base_url").attr("href")},3e3)):iziToast.warning({position:"topRight",message:"We couldn't verify your account. Please check the OTP"})}})):iziToast.error({position:"topRight",message:"Please enter a valid OTP"})}),e(a).delegate("#careers-submit-button","click",function(t){t.preventDefault();const a=e("#careers-first-name").val(),s=e("#careers-last-name").val(),o=e("#careers-designation").val(),i=e("#careers-about-yourself").val(),r=e("#careers-form")[0],n=r.reportValidity(),l=e("#careers-submit-button");n&&(""==grecaptcha.getResponse()?iziToast.warning({position:"topRight",message:"Please complete captcha"}):(l.text("PLEASE WAIT"),l.toggleClass("disabled"),e.ajax({url:"index.php?path=common/home/savecareers",type:"POST",dataType:"json",data:{firstname:a,lastname:s,role:o,yourself:i},success:function(t){l.toggleClass("disabled"),t.status?(iziToast.success({position:"topRight",message:t.success_message}),e("#careers-form")[0].reset()):iziToast.warning({position:"topRight",title:"Oops",message:t.error_warning})}})))}),e(a).delegate("#partner-registration-button","click",function(t){t.preventDefault();const a=e("#partner-first-name").val(),s=e("#partner-last-name").val(),o=e("#partner-designation").val(),i=e("#partner-company-name").val(),r=e("#partner-email").val(),n=e("#partner-phone").val(),l=e("#partner-description").val(),g=e("#partner-registration-form")[0],c=g.reportValidity(),p=e("#partner-registration-button");c&&(""==grecaptcha.getResponse()?iziToast.warning({position:"topRight",message:"Please complete captcha"}):(p.text("PLEASE WAIT"),p.toggleClass("disabled"),e.ajax({url:"index.php?path=common/home/savepartner",type:"POST",dataType:"json",data:{firstname:a,lastname:s,designation:o,company:i,email:r,phone:n,description:l},success:function(t){p.toggleClass("disabled"),t.status?(iziToast.success({position:"topRight",message:t.success_message}),e("#partner-registration-form")[0].reset()):iziToast.warning({position:"topRight",title:"Oops",message:t.error_warning})}})))}),e("#forgot-password-btn").click(function(t){t.preventDefault(),e("#login-view").hide(),e("#forgot-password-view").show()}),e("#password-reset-button").click(function(t){t.preventDefault();const a=e("#reset-password-email").val(),s=e("#password-reset-button");0==a.length?iziToast.warning({position:"topRight",message:"Please enter your account email"}):(s.text("PLEASE WAIT"),s.toggleClass("disabled"),e.ajax({url:"index.php?path=account/forgotten",type:"POST",dataType:"json",data:{email:a},success:function(t){s.text("RESET PASSWORD"),s.toggleClass("disabled"),e("#reset-password-email").val(""),t.status?iziToast.success({timeout:!1,position:"topRight",message:t.text_message}):iziToast.warning({position:"topRight",message:"We couldn't find an account with that email address"})}}))}),e("#farmer-register-button").click(function(t){t.preventDefault();e("#farmer-first-name").val(),e("#farmer-last-name").val(),e("#farmer-email").val(),e("#farmer-phone").val(),e("#farmer-type").val(),e("#farmer-location").val(),e("farmer-produce-grown").val(),e("#farmer-register-button");""==grecaptcha.getResponse()?iziToast.warning({position:"topRight",message:"Please complete captcha"}):e("#farmer-registration-form")[0].reportValidity()&&(iziToast.success({position:"topRight",message:"Thanks for registering. We'll get in touch"}),e("#farmer-registration-form")[0].reset())})})}(jQuery,window,document);
//# sourceMappingURL=data:application/json;charset=utf8;base64,
