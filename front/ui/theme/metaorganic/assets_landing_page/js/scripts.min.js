/*!
 * kwikbasket
 * KwikBasket Landing Page
 * 
 * @author KwikBasket
 * @version 1.0.0
 * Copyright 2020. MIT licensed.
 */
!function(e,t,a,s){"use strict";e(function(){e(a).scroll(function(){var t=e(".fixed-top");t.toggleClass("scrolled",e(this).scrollTop()>t.height())}),e(".nav-link, .navbar-brand").click(function(){var t=e(this).attr("href");e("html, body").animate({scrollTop:e(t).offset().top},700)}),ScrollOut(),gsap.to(".anim-from-top",{opacity:1,y:0,duration:.5,ease:"elastic"}),gsap.to(".anim-from-bottom",{y:0,duration:.5}),e(a).delegate("#login-button","click",function(a){a.preventDefault();const s=e("#login-button"),o=e("#login-email").val(),r=e("#login-password").val();o.length>0&&r.length>0?(s.text("PLEASE WAIT"),s.toggleClass("disabled"),e.ajax({url:"index.php?path=account/login/login",type:"post",data:{email:o,password:r},dataType:"json",success:function(a){a.status?null!=a.redirect?t.location.href=a.redirect:"1"==a.temppassword?(location=e(".base_url").attr("href")+"/changepass",console.log(e(".base_url"))):location=e(".base_url").attr("href"):(iziToast.error({position:"topRight",message:a.error_warning}),s.text("LOGIN"),s.toggleClass("disabled"))}})):iziToast.warning({position:"topRight",message:"Please enter your email and password"})}),e("#register-phone").keyup(function(e){/\D/g.test(this.value)&&(this.value=this.value.replace(/\D/g,""))}),e(a).delegate("#register-button","click",function(t){t.preventDefault();const a=e("#register-first-name").val(),s=e("#register-last-name").val(),o=e("#register-email").val(),r=e("#register-phone").val(),i=e("#register-company-name").val(),n=e("#register-company-address").val(),l=e("#register-business-type").val(),c=e("#register-building-name").val(),p=e("#register-address-line").val(),g=e("#register-location").val(),m=e("#register-password").val(),d=e("#register-password-confirm").val(),u=e("#registration-view"),v=e("#otp-view"),h=e("#register-button"),f=e("#register-form")[0],b=f.reportValidity();b&&(d!==m?iziToast.warning({position:"topRight",message:"Passwords do no match"}):""==grecaptcha.getResponse()?iziToast.warning({position:"topRight",message:"Please complete captcha"}):(h.text("PLEASE WAIT"),h.toggleClass("disabled"),e.ajax({url:"index.php?path=account/register/register_send_otp",type:"POST",dataType:"json",data:{firstname:a,lastname:s,email:o,telephone:r,company_name:i,company_address:n,customer_group_id:l,house_building:c,address:p,location:g,password:m,confirm:d},success:function(e){h.text("SIGN UP"),h.toggleClass("disabled"),e.status?(iziToast.success({position:"topRight",message:e.success_message}),u.hide(),v.show()):iziToast.warning({position:"topRight",title:"Oops",message:e.error_warning})}})))}),e(a).delegate("#otp-verify-button","click",function(a){a.preventDefault();const s=e("#register-first-name").val(),o=e("#register-last-name").val(),r=e("#register-email").val(),i=e("#register-phone").val(),n=e("#register-company-name").val(),l=e("#register-company-address").val(),c=e("#register-business-type").val(),p=e("#register-building-name").val(),g=e("#register-address-line").val(),m=e("#register-location").val(),d=e("#register-password").val(),u=e("#register-password-confirm").val(),v=e("#otp-value").val(),h=e("#otp-verify-button");v.length>3?(h.text("PLEASE WAIT"),h.toggleClass("disabled"),e.ajax({url:"index.php?path=account/register/register_verify_otp",type:"POST",dataType:"json",data:{firstname:s,lastname:o,email:r,telephone:i,company_name:n,company_address:l,customer_group_id:c,house_building:p,address:g,location:m,password:d,confirm:u,signup_otp:v},success:function(a){h.text("VERIFY"),h.toggleClass("disabled"),e("#otp-value").val(""),a.status?(iziToast.success({timeout:!1,position:"topRight",message:a.success_message}),setTimeout(function(){t.location=e(".base_url").attr("href")},3e3)):iziToast.warning({position:"topRight",message:"We couldn't verify your account. Please check the OTP"})}})):iziToast.error({position:"topRight",message:"Please enter a valid OTP"})}),e(a).delegate("#careers-submit-button","click",function(t){t.preventDefault();const a=e("#careers-first-name").val(),s=e("#careers-last-name").val(),o=e("#careers-designation").val(),r=e("#careers-about-yourself").val(),i=e("#careers-job-id").val(),n=e("#careers-cover-letter").val(),l=e("#careers-form")[0],c=l.reportValidity(),p=e("#careers-submit-button");c&&(""==grecaptcha.getResponse()?iziToast.warning({position:"topRight",message:"Please complete captcha"}):(p.text("PLEASE WAIT"),p.toggleClass("disabled"),e.ajax({url:"index.php?path=common/home/savecareers",type:"POST",dataType:"json",data:{firstname:a,lastname:s,role:o,yourself:r,job_id:i,cover:n},success:function(t){p.toggleClass("disabled"),t.status?(iziToast.success({position:"topRight",message:t.success_message}),e("#careers-form")[0].reset(),p.text("SUBMIT")):iziToast.warning({position:"topRight",title:"Oops",message:t.error_warning})}})))}),e(a).delegate("#partner-registration-button","click",function(t){t.preventDefault();const a=e("#partner-first-name").val(),s=e("#partner-last-name").val(),o=e("#partner-designation").val(),r=e("#partner-company-name").val(),i=e("#partner-email").val(),n=e("#partner-phone").val(),l=e("#partner-description").val(),c=e("#partner-registration-form")[0],p=c.reportValidity(),g=e("#partner-registration-button");p&&(""==grecaptcha.getResponse()?iziToast.warning({position:"topRight",message:"Please complete captcha"}):(g.text("PLEASE WAIT"),g.toggleClass("disabled"),e.ajax({url:"index.php?path=common/home/savepartner",type:"POST",dataType:"json",data:{firstname:a,lastname:s,designation:o,company:r,email:i,phone:n,description:l},success:function(t){g.toggleClass("disabled"),t.status?(iziToast.success({position:"topRight",message:t.success_message}),e("#partner-registration-form")[0].reset()):iziToast.warning({position:"topRight",title:"Oops",message:t.error_warning})}})))}),e("#forgot-password-btn").click(function(t){t.preventDefault(),e("#login-view").hide(),e("#forgot-password-view").show()}),e("#password-reset-button").click(function(t){t.preventDefault();const a=e("#reset-password-email").val(),s=e("#password-reset-button");0==a.length?iziToast.warning({position:"topRight",message:"Please enter your account email"}):(s.text("PLEASE WAIT"),s.toggleClass("disabled"),e.ajax({url:"index.php?path=account/forgotten",type:"POST",dataType:"json",data:{email:a},success:function(t){s.text("RESET PASSWORD"),s.toggleClass("disabled"),e("#reset-password-email").val(""),t.status?iziToast.success({timeout:!1,position:"topRight",message:t.text_message}):iziToast.warning({position:"topRight",message:"We couldn't find an account with that email address"})}}))}),e("#farmer-register-button").click(function(t){t.preventDefault();e("#farmer-first-name").val(),e("#farmer-last-name").val(),e("#farmer-email").val(),e("#farmer-phone").val(),e("#farmer-type").val(),e("#farmer-location").val(),e("farmer-produce-grown").val(),e("#farmer-register-button");""==grecaptcha.getResponse()?iziToast.warning({position:"topRight",message:"Please complete captcha"}):e("#farmer-registration-form")[0].reportValidity()&&(iziToast.success({position:"topRight",message:"Thanks for registering. We'll get in touch"}),e("#farmer-registration-form")[0].reset())}),e("#careers-job-category, #careers-job-type, #careers-job-location").change(function(){var t="index.php?path=common/home/careers",a=e("#careers-job-category").val();a&&"All Job Category"!=a&&(t+="&filter_category="+encodeURIComponent(a));var s=e("#careers-job-type").val();s&&"All Job Type"!=s&&(t+="&filter_type="+encodeURIComponent(s));var o=e("#careers-job-location").val();o&&"All Job Location"!=o&&(t+="&filter_location="+encodeURIComponent(o)),location=t})})}(jQuery,window,document);
//# sourceMappingURL=data:application/json;charset=utf8;base64,
