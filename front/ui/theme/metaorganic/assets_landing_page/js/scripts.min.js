/*!
 * kwikbasket
 * KwikBasket Landing Page
 * 
 * @author KwikBasket
 * @version 1.0.0
 * Copyright 2021. MIT licensed.
 */
!function(e,t,a,o){"use strict";function s(){navigator.geolocation?(console.log(1),navigator.geolocation.getCurrentPosition(i,null,{enableHighAccuracy:!0,timeout:5e3,maximumAge:0})):(console.log(2),console.log("Geolocation is not supported by this browser."))}function i(t){console.log("showPositionOnly"),console.log(t),e("#lat").val(t.coords.latitude),e("#lng").val(t.coords.longitude),console.log(t.coords.latitude),console.log(t.coords.longitude)}s(),e(function(){e(a).scroll(function(){var t=e(".fixed-top");t.toggleClass("scrolled",e(this).scrollTop()>t.height())}),e(".nav-link, .navbar-brand").click(function(){var t=e(this).attr("href");e("html, body").animate({scrollTop:e(t).offset().top},700)}),ScrollOut(),gsap.to(".anim-from-top",{opacity:1,y:0,duration:.5,ease:"elastic"}),gsap.to(".anim-from-bottom",{y:0,duration:.5}),e("input[name='register-accountmanager-id']").autocomplete({source:function(t,a){e.ajax({url:"index.php?path=account/login/autocompleteaccountmanager&filter_name="+e("input[name='register-accountmanager-id']").val(),dataType:"json",success:function(t){a(e.map(t,function(e){return{label:e.username,value:e.user_id}}))}})},select:function(t,a){return console.log(a.item.label),console.log(a.item.value),e("input[name='register-accountmanager-id']").val(a.item.label),e("input[name='register-accountmanager-id']").attr("register_accountmanager_id",a.item.value),!1}}),e(a).delegate("#login-button","click",function(a){s(),a.preventDefault();const o=e("#login-button");var i=e("#lat").val(),n=e("#lng").val();const r=e("#login-email").val(),l=e("#login-password").val();r.length>0&&l.length>0?(o.text("PLEASE WAIT"),o.toggleClass("disabled"),e.ajax({url:"index.php?path=account/login/checkipaddress",type:"post",data:{email:r,password:l},dataType:"json",success:function(a){console.log(a),"Username And Password Doest Match!"==a.message?iziToast.error({position:"topRight",message:"Username And Password Doest Match!"}):1==a.isnewIP?e.ajax({url:"index.php?path=account/login/addSendNewIPotp",type:"POST",dataType:"json",data:{email:r},success:function(t){t.status?(iziToast.success({position:"topRight",message:"OTP Is Sent To Mail!"}),e("#login-view").hide(),e("#otp-view").show()):iziToast.warning({position:"topRight",title:"Oops",message:"Something Went Wrong!"})}}):e.ajax({url:"index.php?path=account/login/login",type:"post",data:{email:r,password:l,login_latitude:i,login_longitude:n,login_mode:"web"},dataType:"json",success:function(a){a.status?null!=a.redirect?t.location.href=a.redirect:"1"==a.temppassword?(location=e(".base_url").attr("href")+"/changepass",console.log(e(".base_url"))):location=e(".base_url").attr("href"):(iziToast.error({position:"topRight",message:a.error_warning}),o.text("LOGIN"),o.toggleClass("disabled"))}})}})):iziToast.warning({position:"topRight",message:"Please enter your email and password"})}),e("#register-phone").keyup(function(e){/\D/g.test(this.value)&&(this.value=this.value.replace(/\D/g,""))}),e(a).delegate("#register-button","click",function(t){s(),t.preventDefault();var a=e("#lat").val(),o=e("#lng").val();const i=e("#register-first-name").val(),n=e("#register-last-name").val(),r=e("#register-email").val(),l=e("#register-phone").val(),c=e("#register-company-name").val(),g=e("#register-company-address").val(),p=e("#register-business-type").val(),u=e("#register-building-name").val(),d=e("#register-address-line").val(),m=e("#register-location").val(),v=e("#register-password").val(),h=e("#register-password-confirm").val(),f=e("#register-accountmanager-id").val(),b=e("#register-accountmanager-id").attr("register_accountmanager_id"),y=e("#registration-view"),T=e("#otp-view"),w=e("#register-button"),_=e("#register-form")[0],x=_.reportValidity();x&&(h!==v?iziToast.warning({position:"topRight",message:"Passwords do no match"}):""==grecaptcha.getResponse()?iziToast.warning({position:"topRight",message:"Please complete captcha"}):(w.text("PLEASE WAIT"),w.toggleClass("disabled"),e.ajax({url:"index.php?path=account/register/register_send_otp",type:"POST",dataType:"json",data:{login_latitude:a,login_longitude:o,firstname:i,lastname:n,email:r,telephone:l,company_name:c,company_address:g,customer_group_id:p,house_building:u,address:d,location:m,password:v,confirm:h,accountmanagerid:b,accountmanagername:f},success:function(e){w.text("SIGN UP"),w.toggleClass("disabled"),e.status?(iziToast.success({position:"topRight",message:e.success_message}),y.hide(),T.show()):iziToast.warning({position:"topRight",title:"Oops",message:e.error_message})}})))}),e(a).delegate("#otp-verify-button","click",function(a){a.preventDefault();var o=e("#lat").val(),s=e("#lng").val();const i=e("#register-first-name").val(),n=e("#register-last-name").val(),r=e("#register-email").val(),l=e("#register-phone").val(),c=e("#register-company-name").val(),g=e("#register-company-address").val(),p=e("#register-business-type").val(),u=e("#register-building-name").val(),d=e("#register-address-line").val(),m=e("#register-location").val(),v=e("#register-password").val(),h=e("#register-password-confirm").val(),f=e("#register-accountmanager-id").val(),b=e("#register-accountmanager-id").attr("register_accountmanager_id"),y=e("#otp-value").val(),T=e("#otp-verify-button");y.length>3?(T.text("PLEASE WAIT"),T.toggleClass("disabled"),e.ajax({url:"index.php?path=account/register/register_verify_otp",type:"POST",dataType:"json",data:{login_latitude:o,login_longitude:s,firstname:i,lastname:n,email:r,telephone:l,company_name:c,company_address:g,customer_group_id:p,house_building:u,address:d,location:m,password:v,confirm:h,accountmanagerid:b,signup_otp:y,accountmanagername:f},success:function(a){T.text("VERIFY"),T.toggleClass("disabled"),e("#otp-value").val(""),a.status?(iziToast.success({timeout:!1,position:"topRight",message:a.success_message}),setTimeout(function(){t.location=e(".base_url").attr("href")},3e3)):iziToast.warning({position:"topRight",message:"We couldn't verify your account. Please check the OTP"})}})):iziToast.error({position:"topRight",message:"Please enter a valid OTP"})}),e(a).delegate("#ip-otp-verify-button","click",function(a){a.preventDefault();const o=e("#login-email").val(),s=e("#otp-value").val();var i=e("#lat").val(),n=e("#lng").val();const r=e("#login-password").val(),l=e("#otp-verify-button");s.length>3?(l.text("PLEASE WAIT"),l.toggleClass("disabled"),e.ajax({url:"index.php?path=account/login/addVerifyNewIPotp",type:"POST",dataType:"json",data:{email:o,otp:s},success:function(a){l.text("VERIFY"),l.toggleClass("disabled"),e("#otp-value").val(""),a.status?(iziToast.success({timeout:!1,position:"topRight",message:"Will be redirecting to login page!"}),setTimeout(function(){a.status&&e.ajax({url:"index.php?path=account/login/login",type:"post",data:{email:o,password:r,login_latitude:i,login_longitude:n,login_mode:"web"},dataType:"json",success:function(a){a.status?null!=a.redirect?t.location.href=a.redirect:"1"==a.temppassword?(location=e(".base_url").attr("href")+"/changepass",console.log(e(".base_url"))):location=e(".base_url").attr("href"):(iziToast.error({position:"topRight",message:a.error_warning}),location=e(".base_url").attr("href"),loginButton.text("LOGIN"),loginButton.toggleClass("disabled"))}})},1500)):iziToast.warning({position:"topRight",message:"We couldn't verify your account. Please check the OTP"})}})):iziToast.error({position:"topRight",message:"Please enter a valid OTP"})}),e(a).delegate("#careers-submit-button","click",function(t){t.preventDefault();const a=e("#careers-first-name").val(),o=e("#careers-last-name").val(),s=e("#careers-designation").val(),i=e("#careers-about-yourself").val(),n=e("#careers-job-id").val(),r=e("#careers-cover-letter").val(),l=e("#careers-form")[0],c=l.reportValidity(),g=e("#careers-submit-button");c&&(""==grecaptcha.getResponse()?iziToast.warning({position:"topRight",message:"Please complete captcha"}):(g.text("PLEASE WAIT"),g.toggleClass("disabled"),e.ajax({url:"index.php?path=common/home/savecareers",type:"POST",dataType:"json",data:{firstname:a,lastname:o,role:s,yourself:i,job_id:n,cover:r},success:function(t){g.toggleClass("disabled"),t.status?(iziToast.success({position:"topRight",message:t.success_message}),e("#careers-form")[0].reset(),g.text("SUBMIT")):iziToast.warning({position:"topRight",title:"Oops",message:t.error_warning})}})))}),e(a).delegate("#partner-registration-button","click",function(t){t.preventDefault();const a=e("#partner-first-name").val(),o=e("#partner-last-name").val(),s=e("#partner-designation").val(),i=e("#partner-company-name").val(),n=e("#partner-email").val(),r=e("#partner-phone").val(),l=e("#partner-description").val(),c=e("#partner-registration-form")[0],g=c.reportValidity(),p=e("#partner-registration-button");g&&(""==grecaptcha.getResponse()?iziToast.warning({position:"topRight",message:"Please complete captcha"}):(p.text("PLEASE WAIT"),p.toggleClass("disabled"),e.ajax({url:"index.php?path=common/home/savepartner",type:"POST",dataType:"json",data:{firstname:a,lastname:o,designation:s,company:i,email:n,phone:r,description:l},success:function(t){p.toggleClass("disabled"),t.status?(iziToast.success({position:"topRight",message:t.success_message}),e("#partner-registration-form")[0].reset()):iziToast.warning({position:"topRight",title:"Oops",message:t.error_warning})}})))}),e("#forgot-password-btn").click(function(t){t.preventDefault(),e("#login-view").hide(),e("#forgot-password-view").show()}),e("#password-reset-button").click(function(t){t.preventDefault();const a=e("#reset-password-email").val(),o=e("#password-reset-button");0==a.length?iziToast.warning({position:"topRight",message:"Please enter your account email"}):(o.text("PLEASE WAIT"),o.toggleClass("disabled"),e.ajax({url:"index.php?path=account/forgotten",type:"POST",dataType:"json",data:{email:a},success:function(t){o.text("RESET PASSWORD"),o.toggleClass("disabled"),e("#reset-password-email").val(""),t.status?iziToast.success({timeout:!1,position:"topRight",message:t.text_message}):iziToast.warning({position:"topRight",message:"We couldn't find an account with that email address"})}}))}),e("#farmer-register-button").click(function(t){t.preventDefault();e("#farmer-first-name").val(),e("#farmer-last-name").val(),e("#farmer-email").val(),e("#farmer-phone").val(),e("#farmer-type").val(),e("#farmer-location").val(),e("farmer-produce-grown").val(),e("#farmer-register-button");""==grecaptcha.getResponse()?iziToast.warning({position:"topRight",message:"Please complete captcha"}):e("#farmer-registration-form")[0].reportValidity()&&(iziToast.success({position:"topRight",message:"Thanks for registering. We'll get in touch"}),e("#farmer-registration-form")[0].reset())}),e("#careers-job-category, #careers-job-type, #careers-job-location").change(function(){var t="index.php?path=common/home/careers",a=e("#careers-job-category").val();a&&"All Job Category"!=a&&(t+="&filter_category="+encodeURIComponent(a));var o=e("#careers-job-type").val();o&&"All Job Type"!=o&&(t+="&filter_type="+encodeURIComponent(o));var s=e("#careers-job-location").val();s&&"All Job Location"!=s&&(t+="&filter_location="+encodeURIComponent(s)),location=t})});e("#lat"),e("#lng")}(jQuery,window,document);
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNjcmlwdHMuanMiXSwibmFtZXMiOlsiJCIsIndpbmRvdyIsImRvY3VtZW50IiwidW5kZWZpbmVkIiwiZ2V0TG9jYXRpb25Pbmx5IiwibmF2aWdhdG9yIiwiZ2VvbG9jYXRpb24iLCJjb25zb2xlIiwibG9nIiwiZ2V0Q3VycmVudFBvc2l0aW9uIiwic2hvd1Bvc2l0aW9uT25seSIsImVuYWJsZUhpZ2hBY2N1cmFjeSIsInRpbWVvdXQiLCJtYXhpbXVtQWdlIiwicG9zaXRpb24iLCJ2YWwiLCJjb29yZHMiLCJsYXRpdHVkZSIsImxvbmdpdHVkZSIsInNjcm9sbCIsIiRuYXYiLCJ0b2dnbGVDbGFzcyIsInRoaXMiLCJzY3JvbGxUb3AiLCJoZWlnaHQiLCJjbGljayIsInNlY3Rpb25UbyIsImF0dHIiLCJhbmltYXRlIiwib2Zmc2V0IiwidG9wIiwiU2Nyb2xsT3V0IiwiZ3NhcCIsInRvIiwib3BhY2l0eSIsInkiLCJkdXJhdGlvbiIsImVhc2UiLCJhdXRvY29tcGxldGUiLCJzb3VyY2UiLCJyZXF1ZXN0IiwicmVzcG9uc2UiLCJhamF4IiwidXJsIiwiZGF0YVR5cGUiLCJzdWNjZXNzIiwianNvbiIsIm1hcCIsIml0ZW0iLCJsYWJlbCIsInZhbHVlIiwic2VsZWN0IiwiZXZlbnQiLCJ1aSIsImRlbGVnYXRlIiwiZSIsInByZXZlbnREZWZhdWx0IiwibG9naW5CdXR0b24iLCJsb2dpbl9sYXRpdHVkZSIsImxvZ2luX2xvbmdpdHVkZSIsImVtYWlsIiwicGFzc3dvcmQiLCJsZW5ndGgiLCJ0ZXh0IiwidHlwZSIsImRhdGEiLCJtZXNzYWdlIiwiaXppVG9hc3QiLCJlcnJvciIsImhpZGUiLCJzaG93Iiwid2FybmluZyIsInRpdGxlIiwibG9naW5fbW9kZSIsImxvY2F0aW9uIiwiaHJlZiIsImtleXVwIiwidGVzdCIsInJlcGxhY2UiLCJmaXJzdE5hbWUiLCJsYXN0TmFtZSIsInBob25lIiwiY29tcGFueU5hbWUiLCJjb21wYW55QWRkcmVzcyIsImJ1c2luZXNzVHlwZSIsImJ1aWxkaW5nTmFtZSIsImFkZHJlc3NMaW5lIiwicGFzc3dvcmRDb25maXJtYXRpb24iLCJhY2NvdW50bWFuYWdlcm5hbWUiLCJhY2NvdW50bWFuYWdlcmlkIiwicmVnaXN0cmF0aW9uVmlldyIsIm90cFZpZXciLCJyZWdpc3RlckJ1dHRvbiIsInJlZ2lzdGVyRm9ybSIsImZvcm1Jc1ZhbGlkIiwicmVwb3J0VmFsaWRpdHkiLCJncmVjYXB0Y2hhIiwiZ2V0UmVzcG9uc2UiLCJmaXJzdG5hbWUiLCJsYXN0bmFtZSIsInRlbGVwaG9uZSIsImNvbXBhbnlfbmFtZSIsImNvbXBhbnlfYWRkcmVzcyIsImN1c3RvbWVyX2dyb3VwX2lkIiwiaG91c2VfYnVpbGRpbmciLCJhZGRyZXNzIiwiY29uZmlybSIsIm90cCIsInZlcmlmeUJ1dHRvbiIsInNpZ251cF9vdHAiLCJzZXRUaW1lb3V0Iiwicm9sZSIsInlvdXJzZWxmIiwiam9iX2lkIiwiY292ZXIiLCJyZXNldCIsImRlc2lnbmF0aW9uIiwiY29tcGFueSIsImRlc2NyaXB0aW9uIiwicmVzZXRCdXR0b24iLCJjaGFuZ2UiLCJmaWx0ZXJfY2F0ZWdvcnkiLCJlbmNvZGVVUklDb21wb25lbnQiLCJmaWx0ZXJfdHlwZSIsImZpbHRlcl9sb2NhdGlvbiIsImpRdWVyeSJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Q0FBQSxTQUFBQSxFQUFBQyxFQUFBQyxFQUFBQyxHQUVBLFlBK3BCQSxTQUFBQyxLQUVBQyxVQUFBQyxhQUVBQyxRQUFBQyxJQUFBLEdBRUFILFVBQUFDLFlBQUFHLG1CQUVBQyxFQUlBLE1BTUFDLG9CQUFBLEVBRUFDLFFBQUEsSUFFQUMsV0FBQSxNQU1BTixRQUFBQyxJQUFBLEdBRUFELFFBQUFDLElBQUEsa0RBU0EsUUFBQUUsR0FBQUksR0FDQVAsUUFBQUMsSUFBQSxvQkFDQUQsUUFBQUMsSUFBQU0sR0FDQWQsRUFBQSxRQUFBZSxJQUFBRCxFQUFBRSxPQUFBQyxVQUNBakIsRUFBQSxRQUFBZSxJQUFBRCxFQUFBRSxPQUFBRSxXQUNBWCxRQUFB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QWUsSUFBQSxJQUVBK0IsRUFBQSxPQUNBcUIsU0FBQXRCLFNBQ0FqQyxTQUFBLEVBQ0FFLFNBQUEsV0FDQW9ELFFBQUFwQixFQUFBLGVBR0FxQixTQUFBSSxTQUNBekQsU0FBQSxXQUNBb0QsUUFBQSw4REFRQWxFLEVBQUEsMkJBQUF5QixNQUFBLFNBQUE4QixHQUNBQSxFQUFBQyxnQkFFQXhELEdBQUEsc0JBQUFlLE1BQ0FmLEVBQUEscUJBQUFlLE1BQ0FmLEVBQUEsaUJBQUFlLE1BQ0FmLEVBQUEsaUJBQUFlLE1BQ0FmLEVBQUEsZ0JBQUFlLE1BQ0FmLEVBQUEsb0JBQUFlLE1BQ0FmLEVBQUEsd0JBQUFlLE1BQ0FmLEVBQUEsMEJBQ0EsS0FBQWdHLFdBQUFDLGNBQ0E5QixTQUFBSSxTQUNBekQsU0FBQSxXQUNBb0QsUUFBQSw0QkFHQWxFLEVBQUEsNkJBQUEsR0FBQStGLG1CQUNBNUIsU0FBQXRCLFNBQ0EvQixTQUFBLFdBQ0FvRCxRQUFBLCtDQUdBbEUsRUFBQSw2QkFBQSxHQUFBbUgsV0FzQ0FuSCxFQUFBLG1FQUFBd0gsT0FBQSxXQUVBLEdBQUE3RSxHQUFBLHFDQUdBOEUsRUFBQXpILEVBQUEseUJBQUFlLEtBRUEwRyxJQUFBLG9CQUFBQSxJQUNBOUUsR0FBQSxvQkFBQStFLG1CQUFBRCxHQUdBLElBQUFFLEdBQUEzSCxFQUFBLHFCQUFBZSxLQUVBNEcsSUFBQSxnQkFBQUEsSUFDQWhGLEdBQUEsZ0JBQUErRSxtQkFBQUMsR0FHQSxJQUFBQyxHQUFBNUgsRUFBQSx5QkFBQWUsS0FFQTZHLElBQUEsb0JBQUFBLElBQ0FqRixHQUFBLG9CQUFBK0UsbUJBQUFFLElBRUFsRCxTQUFBL0IsS0FNQTNDLEdBQUEsUUFDQUEsRUFBQSxTQWtEQTZILE9BQUE1SCxPQUFBQyIsImZpbGUiOiJzY3JpcHRzLm1pbi5qcyIsInNvdXJjZXNDb250ZW50IjpbIihmdW5jdGlvbiAoJCwgd2luZG93LCBkb2N1bWVudCwgdW5kZWZpbmVkKSB7XHJcblxyXG4gICAgJ3VzZSBzdHJpY3QnO1xyXG4gICAgZ2V0TG9jYXRpb25Pbmx5KCk7XHJcbiAgICAkKGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAvLyBDaGFuZ2UgbmF2YmFyIHN0eWxlIG9uIHNjcm9sbFxyXG4gICAgICAgICQoZG9jdW1lbnQpLnNjcm9sbChmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHZhciAkbmF2ID0gJCgnLmZpeGVkLXRvcCcpO1xyXG4gICAgICAgICAgICAkbmF2LnRvZ2dsZUNsYXNzKCdzY3JvbGxlZCcsICQodGhpcykuc2Nyb2xsVG9wKCkgPiAkbmF2LmhlaWdodCgpKTtcclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgLy8gTmF2IGxpbmtzIHNjcm9sbCBhbmltYXRpb25cclxuICAgICAgICAkKCcubmF2LWxpbmssIC5uYXZiYXItYnJhbmQnKS5jbGljayhmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHZhciBzZWN0aW9uVG8gPSAkKHRoaXMpLmF0dHIoJ2hyZWYnKTtcclxuICAgICAgICAgICAgJCgnaHRtbCwgYm9keScpLmFuaW1hdGUoe1xyXG4gICAgICAgICAgICAgICAgc2Nyb2xsVG9wOiAkKHNlY3Rpb25Ubykub2Zmc2V0KCkudG9wXHJcbiAgICAgICAgICAgIH0sIDcwMCk7XHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIC8vIExhbmRpbmcgcGFnZSBzY3JvbGwgYW5pbWF0aW9uc1xyXG4gICAgICAgIFNjcm9sbE91dCgpO1xyXG5cclxuICAgICAgICAvLyBIZXJvIHNlY3Rpb24gYW5pbWF0aW9uXHJcbiAgICAgICAgZ3NhcC50bygnLmFuaW0tZnJvbS10b3AnLCB7XHJcbiAgICAgICAgICAgIG9wYWNpdHk6IDEsXHJcbiAgICAgICAgICAgIHk6IDAsXHJcbiAgICAgICAgICAgIGR1cmF0aW9uOiAuNSxcclxuICAgICAgICAgICAgZWFzZTogJ2VsYXN0aWMnXHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIGdzYXAudG8oJy5hbmltLWZyb20tYm90dG9tJywge1xyXG4gICAgICAgICAgICB5OiAwLFxyXG4gICAgICAgICAgICBkdXJhdGlvbjogLjVcclxuICAgICAgICB9KTtcclxuICAgICAgICBcclxuJCgnaW5wdXRbbmFtZT1cXCdyZWdpc3Rlci1hY2NvdW50bWFuYWdlci1pZFxcJ10nKS5hdXRvY29tcGxldGUoe1xyXG4gICdzb3VyY2UnOiBmdW5jdGlvbihyZXF1ZXN0LCByZXNwb25zZSkge1xyXG4gICAgJC5hamF4KHtcclxuICAgICAgdXJsOiAnaW5kZXgucGhwP3BhdGg9YWNjb3VudC9sb2dpbi9hdXRvY29tcGxldGVhY2NvdW50bWFuYWdlciZmaWx0ZXJfbmFtZT0nICsgICQoJ2lucHV0W25hbWU9XFwncmVnaXN0ZXItYWNjb3VudG1hbmFnZXItaWRcXCddJykudmFsKCksXHJcbiAgICAgIGRhdGFUeXBlOiAnanNvbicsICAgICBcclxuICAgICAgc3VjY2VzczogZnVuY3Rpb24oanNvbikge1xyXG4gICAgICAgIHJlc3BvbnNlKCQubWFwKGpzb24sIGZ1bmN0aW9uKGl0ZW0pIHtcclxuICAgICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgIGxhYmVsOiBpdGVtWyd1c2VybmFtZSddLFxyXG4gICAgICAgICAgICB2YWx1ZTogaXRlbVsndXNlcl9pZCddXHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfSkpO1xyXG4gICAgICB9XHJcbiAgICB9KTtcclxuICB9LFxyXG4gICdzZWxlY3QnOiBmdW5jdGlvbihldmVudCwgdWkpIHtcclxuICAgICBjb25zb2xlLmxvZyh1aS5pdGVtLmxhYmVsKTsgXHJcbiAgICAgY29uc29sZS5sb2codWkuaXRlbS52YWx1ZSk7IFxyXG4gICAgICQoJ2lucHV0W25hbWU9XFwncmVnaXN0ZXItYWNjb3VudG1hbmFnZXItaWRcXCddJykudmFsKHVpLml0ZW0ubGFiZWwpO1xyXG4gICAgICQoJ2lucHV0W25hbWU9XFwncmVnaXN0ZXItYWNjb3VudG1hbmFnZXItaWRcXCddJykuYXR0cigncmVnaXN0ZXJfYWNjb3VudG1hbmFnZXJfaWQnLHVpLml0ZW0udmFsdWUpO1xyXG4gICAgIHJldHVybiBmYWxzZTtcclxuICB9IFxyXG59KTtcclxuICAgICAgICAvLyBDdXN0b21lciBMb2dpblxyXG4gICAgICAgICQoZG9jdW1lbnQpLmRlbGVnYXRlKCcjbG9naW4tYnV0dG9uJywgJ2NsaWNrJywgZnVuY3Rpb24gKGUpIHtcclxuICAgICAgICAgICAgZ2V0TG9jYXRpb25Pbmx5KCk7XHJcbiAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgbG9naW5CdXR0b24gPSAkKCcjbG9naW4tYnV0dG9uJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIGxvZ2luX2xhdGl0dWRlID0gJCgnI2xhdCcpLnZhbCgpO1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBsb2dpbl9sb25naXR1ZGUgPSAkKCcjbG5nJykudmFsKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgZW1haWwgPSAkKCcjbG9naW4tZW1haWwnKS52YWwoKTtcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCBwYXNzd29yZCA9ICQoJyNsb2dpbi1wYXNzd29yZCcpLnZhbCgpO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChlbWFpbC5sZW5ndGggPiAwICYmIHBhc3N3b3JkLmxlbmd0aCA+IDApIHtcclxuICAgICAgICAgICAgICAgIGxvZ2luQnV0dG9uLnRleHQoJ1BMRUFTRSBXQUlUJyk7XHJcbiAgICAgICAgICAgICAgICBsb2dpbkJ1dHRvbi50b2dnbGVDbGFzcygnZGlzYWJsZWQnKTtcclxuICAgICAgICAgICAgICAgICQuYWpheCh74oCL4oCL4oCL4oCL4oCL4oCL4oCL4oCLICBcclxuICAgICAgICAgICAgICAgICAgICB1cmwgOiAnaW5kZXgucGhwP3BhdGg9YWNjb3VudC9sb2dpbi9jaGVja2lwYWRkcmVzcycsXHJcbiAgICAgICAgICAgICAgICAgICAgdHlwZTogJ3Bvc3QnLFxyXG4gICAgICAgICAgICAgICAgICAgIGRhdGE6IHtlbWFpbDogZW1haWwsIHBhc3N3b3JkOnBhc3N3b3JkfSxcclxuICAgICAgICAgICAgICAgICAgICBkYXRhVHlwZTogJ2pzb24nLFxyXG4gICAgICAgICAgICAgICAgICAgIHN1Y2Nlc3M6IGZ1bmN0aW9uIChqc29uKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKGpzb24pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZihqc29uLm1lc3NhZ2UgPT0gJ1VzZXJuYW1lIEFuZCBQYXNzd29yZCBEb2VzdCBNYXRjaCEnKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGl6aVRvYXN0LmVycm9yKHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcG9zaXRpb246ICd0b3BSaWdodCcsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbWVzc2FnZTogJ1VzZXJuYW1lIEFuZCBQYXNzd29yZCBEb2VzdCBNYXRjaCEnXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGVsc2UgaWYgKGpzb25bJ2lzbmV3SVAnXSA9PSB0cnVlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICQuYWpheCh74oCL4oCL4oCL4oCL4oCL4oCL4oCL4oCLXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdXJsOiAnaW5kZXgucGhwP3BhdGg9YWNjb3VudC9sb2dpbi9hZGRTZW5kTmV3SVBvdHAnLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6ICdQT1NUJyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhVHlwZTogJ2pzb24nLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGE6IHvigIvigIvigIvigIvigIvigIvigIvigItlbWFpbDplbWFpbCB94oCL4oCL4oCL4oCL4oCL4oCL4oCL4oCLLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN1Y2Nlc3M6IGZ1bmN0aW9uIChqc29uKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChqc29uWydzdGF0dXMnXSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpemlUb2FzdC5zdWNjZXNzKHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBvc2l0aW9uOiAndG9wUmlnaHQnLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbWVzc2FnZTogJ09UUCBJcyBTZW50IFRvIE1haWwhJ1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcclxuIFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkKCcjbG9naW4tdmlldycpLmhpZGUoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJCgnI290cC12aWV3Jykuc2hvdygpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGl6aVRvYXN0Lndhcm5pbmcoe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcG9zaXRpb246ICd0b3BSaWdodCcsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aXRsZTogJ09vcHMnLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbWVzc2FnZTogJ1NvbWV0aGluZyBXZW50IFdyb25nISdcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICQuYWpheCh7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHVybDogJ2luZGV4LnBocD9wYXRoPWFjY291bnQvbG9naW4vbG9naW4nLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6ICdwb3N0JyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhOiB7ZW1haWw6IGVtYWlsLCBwYXNzd29yZDogcGFzc3dvcmQsIGxvZ2luX2xhdGl0dWRlOmxvZ2luX2xhdGl0dWRlLCBsb2dpbl9sb25naXR1ZGU6bG9naW5fbG9uZ2l0dWRlLCBsb2dpbl9tb2RlOid3ZWInfSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhVHlwZTogJ2pzb24nLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN1Y2Nlc3M6IGZ1bmN0aW9uIChqc29uKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGpzb25bJ3N0YXR1cyddKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGpzb25bJ3JlZGlyZWN0J10gIT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdpbmRvdy5sb2NhdGlvbi5ocmVmID0ganNvblsncmVkaXJlY3QnXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGpzb25bJ3RlbXBwYXNzd29yZCddID09ICcxJykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxvY2F0aW9uID0gJCgnLmJhc2VfdXJsJykuYXR0cignaHJlZicpICsgJy9jaGFuZ2VwYXNzJztcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKCQoJy5iYXNlX3VybCcpKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxvY2F0aW9uID0gJCgnLmJhc2VfdXJsJykuYXR0cignaHJlZicpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGl6aVRvYXN0LmVycm9yKHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwb3NpdGlvbjogJ3RvcFJpZ2h0JyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1lc3NhZ2U6IGpzb25bJ2Vycm9yX3dhcm5pbmcnXVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbG9naW5CdXR0b24udGV4dCgnTE9HSU4nKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxvZ2luQnV0dG9uLnRvZ2dsZUNsYXNzKCdkaXNhYmxlZCcpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBpemlUb2FzdC53YXJuaW5nKHtcclxuICAgICAgICAgICAgICAgICAgICBwb3NpdGlvbjogJ3RvcFJpZ2h0JyxcclxuICAgICAgICAgICAgICAgICAgICBtZXNzYWdlOiAnUGxlYXNlIGVudGVyIHlvdXIgZW1haWwgYW5kIHBhc3N3b3JkJ1xyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgLy8gQ3VzdG9tZXIgUmVnaXN0cmF0aW9uXHJcblxyXG4gICAgICAgICQoJyNyZWdpc3Rlci1waG9uZScpLmtleXVwKGZ1bmN0aW9uIChlKSB7XHJcbiAgICAgICAgICAgIGlmICgvXFxEL2cudGVzdCh0aGlzLnZhbHVlKSkge1xyXG4gICAgICAgICAgICAgICAgLy8gRmlsdGVyIG91dCBub24tZGlnaXRzIGZyb20gaW5wdXQgdmFsdWVcclxuICAgICAgICAgICAgICAgIHRoaXMudmFsdWUgPSB0aGlzLnZhbHVlLnJlcGxhY2UoL1xcRC9nLCAnJyk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgJChkb2N1bWVudCkuZGVsZWdhdGUoJyNyZWdpc3Rlci1idXR0b24nLCAnY2xpY2snLCBmdW5jdGlvbiAoZSkge1xyXG4gICAgICAgICAgICBnZXRMb2NhdGlvbk9ubHkoKTtcclxuICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gICAgICAgICAgICBcclxuICAgICAgICAgICAgdmFyIGxvZ2luX2xhdGl0dWRlID0gJCgnI2xhdCcpLnZhbCgpO1xyXG4gICAgICAgICAgICB2YXIgbG9naW5fbG9uZ2l0dWRlID0gJCgnI2xuZycpLnZhbCgpO1xyXG4gICAgICAgICAgICBjb25zdCBmaXJzdE5hbWUgPSAkKCcjcmVnaXN0ZXItZmlyc3QtbmFtZScpLnZhbCgpO1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGxhc3ROYW1lID0gJCgnI3JlZ2lzdGVyLWxhc3QtbmFtZScpLnZhbCgpO1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGVtYWlsID0gJCgnI3JlZ2lzdGVyLWVtYWlsJykudmFsKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgcGhvbmUgPSAkKCcjcmVnaXN0ZXItcGhvbmUnKS52YWwoKTtcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCBjb21wYW55TmFtZSA9ICQoJyNyZWdpc3Rlci1jb21wYW55LW5hbWUnKS52YWwoKTtcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCBjb21wYW55QWRkcmVzcyA9ICQoJyNyZWdpc3Rlci1jb21wYW55LWFkZHJlc3MnKS52YWwoKTtcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCBidXNpbmVzc1R5cGUgPSAkKCcjcmVnaXN0ZXItYnVzaW5lc3MtdHlwZScpLnZhbCgpO1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGJ1aWxkaW5nTmFtZSA9ICQoJyNyZWdpc3Rlci1idWlsZGluZy1uYW1lJykudmFsKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgYWRkcmVzc0xpbmUgPSAkKCcjcmVnaXN0ZXItYWRkcmVzcy1saW5lJykudmFsKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgbG9jYXRpb24gPSAkKCcjcmVnaXN0ZXItbG9jYXRpb24nKS52YWwoKTtcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCBwYXNzd29yZCA9ICQoJyNyZWdpc3Rlci1wYXNzd29yZCcpLnZhbCgpO1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHBhc3N3b3JkQ29uZmlybWF0aW9uID0gJCgnI3JlZ2lzdGVyLXBhc3N3b3JkLWNvbmZpcm0nKS52YWwoKTtcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCBhY2NvdW50bWFuYWdlcm5hbWUgPSAkKCcjcmVnaXN0ZXItYWNjb3VudG1hbmFnZXItaWQnKS52YWwoKTtcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCBhY2NvdW50bWFuYWdlcmlkID0gJCgnI3JlZ2lzdGVyLWFjY291bnRtYW5hZ2VyLWlkJykuYXR0cigncmVnaXN0ZXJfYWNjb3VudG1hbmFnZXJfaWQnKTtcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCByZWdpc3RyYXRpb25WaWV3ID0gJCgnI3JlZ2lzdHJhdGlvbi12aWV3Jyk7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3Qgb3RwVmlldyA9ICQoJyNvdHAtdmlldycpO1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHJlZ2lzdGVyQnV0dG9uID0gJCgnI3JlZ2lzdGVyLWJ1dHRvbicpO1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHJlZ2lzdGVyRm9ybSA9ICQoJyNyZWdpc3Rlci1mb3JtJylbMF07XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgZm9ybUlzVmFsaWQgPSByZWdpc3RlckZvcm0ucmVwb3J0VmFsaWRpdHkoKTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoZm9ybUlzVmFsaWQpIHtcclxuICAgICAgICAgICAgICAgIGlmIChwYXNzd29yZENvbmZpcm1hdGlvbiAhPT0gcGFzc3dvcmQpIHtcclxuICAgICAgICAgICAgICAgICAgICBpemlUb2FzdC53YXJuaW5nKHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcG9zaXRpb246ICd0b3BSaWdodCcsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG1lc3NhZ2U6ICdQYXNzd29yZHMgZG8gbm8gbWF0Y2gnXHJcbiAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChncmVjYXB0Y2hhLmdldFJlc3BvbnNlKCkgPT0gJycpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaXppVG9hc3Qud2FybmluZyh7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwb3NpdGlvbjogJ3RvcFJpZ2h0JyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1lc3NhZ2U6ICdQbGVhc2UgY29tcGxldGUgY2FwdGNoYSdcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmVnaXN0ZXJCdXR0b24udGV4dCgnUExFQVNFIFdBSVQnKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmVnaXN0ZXJCdXR0b24udG9nZ2xlQ2xhc3MoJ2Rpc2FibGVkJyk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAkLmFqYXgoe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdXJsOiAnaW5kZXgucGhwP3BhdGg9YWNjb3VudC9yZWdpc3Rlci9yZWdpc3Rlcl9zZW5kX290cCcsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiAnUE9TVCcsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhVHlwZTogJ2pzb24nLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YToge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxvZ2luX2xhdGl0dWRlIDogbG9naW5fbGF0aXR1ZGUsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbG9naW5fbG9uZ2l0dWRlIDogbG9naW5fbG9uZ2l0dWRlLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZpcnN0bmFtZTogZmlyc3ROYW1lLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxhc3RuYW1lOiBsYXN0TmFtZSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbWFpbDogZW1haWwsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGVsZXBob25lOiBwaG9uZSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb21wYW55X25hbWU6IGNvbXBhbnlOYW1lLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbXBhbnlfYWRkcmVzczogY29tcGFueUFkZHJlc3MsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY3VzdG9tZXJfZ3JvdXBfaWQ6IGJ1c2luZXNzVHlwZSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBob3VzZV9idWlsZGluZzogYnVpbGRpbmdOYW1lLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFkZHJlc3M6IGFkZHJlc3NMaW5lLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxvY2F0aW9uOiBsb2NhdGlvbixcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwYXNzd29yZDogcGFzc3dvcmQsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uZmlybTogcGFzc3dvcmRDb25maXJtYXRpb24sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYWNjb3VudG1hbmFnZXJpZDphY2NvdW50bWFuYWdlcmlkLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFjY291bnRtYW5hZ2VybmFtZTphY2NvdW50bWFuYWdlcm5hbWVcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdWNjZXNzOiBmdW5jdGlvbiAoanNvbikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlZ2lzdGVyQnV0dG9uLnRleHQoJ1NJR04gVVAnKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZWdpc3RlckJ1dHRvbi50b2dnbGVDbGFzcygnZGlzYWJsZWQnKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGpzb25bJ3N0YXR1cyddKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGl6aVRvYXN0LnN1Y2Nlc3Moe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcG9zaXRpb246ICd0b3BSaWdodCcsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtZXNzYWdlOiBqc29uWydzdWNjZXNzX21lc3NhZ2UnXVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlZ2lzdHJhdGlvblZpZXcuaGlkZSgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvdHBWaWV3LnNob3coKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpemlUb2FzdC53YXJuaW5nKHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBvc2l0aW9uOiAndG9wUmlnaHQnLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGl0bGU6ICdPb3BzJyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vbWVzc2FnZToganNvblsnZXJyb3Jfd2FybmluZyddXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtZXNzYWdlOiBqc29uWydlcnJvcl9tZXNzYWdlJ11cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgLy8gT1RQIFZlcmlmaWNhdGlvblxyXG4gICAgICAgICQoZG9jdW1lbnQpLmRlbGVnYXRlKCcjb3RwLXZlcmlmeS1idXR0b24nLCAnY2xpY2snLCBmdW5jdGlvbiAoZSkge1xyXG4gICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XHJcbiAgICAgICAgICAgIFxyXG4gICAgICAgICAgICB2YXIgbG9naW5fbGF0aXR1ZGUgPSAkKCcjbGF0JykudmFsKCk7XHJcbiAgICAgICAgICAgIHZhciBsb2dpbl9sb25naXR1ZGUgPSAkKCcjbG5nJykudmFsKCk7XHJcbiAgICAgICAgICAgIGNvbnN0IGZpcnN0TmFtZSA9ICQoJyNyZWdpc3Rlci1maXJzdC1uYW1lJykudmFsKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgbGFzdE5hbWUgPSAkKCcjcmVnaXN0ZXItbGFzdC1uYW1lJykudmFsKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgZW1haWwgPSAkKCcjcmVnaXN0ZXItZW1haWwnKS52YWwoKTtcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCBwaG9uZSA9ICQoJyNyZWdpc3Rlci1waG9uZScpLnZhbCgpO1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGNvbXBhbnlOYW1lID0gJCgnI3JlZ2lzdGVyLWNvbXBhbnktbmFtZScpLnZhbCgpO1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGNvbXBhbnlBZGRyZXNzID0gJCgnI3JlZ2lzdGVyLWNvbXBhbnktYWRkcmVzcycpLnZhbCgpO1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGJ1c2luZXNzVHlwZSA9ICQoJyNyZWdpc3Rlci1idXNpbmVzcy10eXBlJykudmFsKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgYnVpbGRpbmdOYW1lID0gJCgnI3JlZ2lzdGVyLWJ1aWxkaW5nLW5hbWUnKS52YWwoKTtcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCBhZGRyZXNzTGluZSA9ICQoJyNyZWdpc3Rlci1hZGRyZXNzLWxpbmUnKS52YWwoKTtcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCBsb2NhdGlvbiA9ICQoJyNyZWdpc3Rlci1sb2NhdGlvbicpLnZhbCgpO1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHBhc3N3b3JkID0gJCgnI3JlZ2lzdGVyLXBhc3N3b3JkJykudmFsKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgcGFzc3dvcmRDb25maXJtYXRpb24gPSAkKCcjcmVnaXN0ZXItcGFzc3dvcmQtY29uZmlybScpLnZhbCgpO1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGFjY291bnRtYW5hZ2VybmFtZSA9ICQoJyNyZWdpc3Rlci1hY2NvdW50bWFuYWdlci1pZCcpLnZhbCgpO1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGFjY291bnRtYW5hZ2VyaWQgPSAkKCcjcmVnaXN0ZXItYWNjb3VudG1hbmFnZXItaWQnKS5hdHRyKCdyZWdpc3Rlcl9hY2NvdW50bWFuYWdlcl9pZCcpO1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IG90cCA9ICQoJyNvdHAtdmFsdWUnKS52YWwoKTtcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCB2ZXJpZnlCdXR0b24gPSAkKCcjb3RwLXZlcmlmeS1idXR0b24nKTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAob3RwLmxlbmd0aCA+IDMpIHtcclxuICAgICAgICAgICAgICAgIHZlcmlmeUJ1dHRvbi50ZXh0KCdQTEVBU0UgV0FJVCcpO1xyXG4gICAgICAgICAgICAgICAgdmVyaWZ5QnV0dG9uLnRvZ2dsZUNsYXNzKCdkaXNhYmxlZCcpO1xyXG5cclxuICAgICAgICAgICAgICAgICQuYWpheCh7XHJcbiAgICAgICAgICAgICAgICAgICAgdXJsOiAnaW5kZXgucGhwP3BhdGg9YWNjb3VudC9yZWdpc3Rlci9yZWdpc3Rlcl92ZXJpZnlfb3RwJyxcclxuICAgICAgICAgICAgICAgICAgICB0eXBlOiAnUE9TVCcsXHJcbiAgICAgICAgICAgICAgICAgICAgZGF0YVR5cGU6ICdqc29uJyxcclxuICAgICAgICAgICAgICAgICAgICBkYXRhOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGxvZ2luX2xhdGl0dWRlIDogbG9naW5fbGF0aXR1ZGUsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGxvZ2luX2xvbmdpdHVkZSA6IGxvZ2luX2xvbmdpdHVkZSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgZmlyc3RuYW1lOiBmaXJzdE5hbWUsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGxhc3RuYW1lOiBsYXN0TmFtZSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgZW1haWw6IGVtYWlsLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB0ZWxlcGhvbmU6IHBob25lLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb21wYW55X25hbWU6IGNvbXBhbnlOYW1lLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb21wYW55X2FkZHJlc3M6IGNvbXBhbnlBZGRyZXNzLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBjdXN0b21lcl9ncm91cF9pZDogYnVzaW5lc3NUeXBlLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBob3VzZV9idWlsZGluZzogYnVpbGRpbmdOYW1lLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBhZGRyZXNzOiBhZGRyZXNzTGluZSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgbG9jYXRpb246IGxvY2F0aW9uLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBwYXNzd29yZDogcGFzc3dvcmQsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbmZpcm06IHBhc3N3b3JkQ29uZmlybWF0aW9uLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBhY2NvdW50bWFuYWdlcmlkOiBhY2NvdW50bWFuYWdlcmlkLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBzaWdudXBfb3RwOiBvdHAsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGFjY291bnRtYW5hZ2VybmFtZTphY2NvdW50bWFuYWdlcm5hbWVcclxuICAgICAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgICAgIHN1Y2Nlc3M6IGZ1bmN0aW9uIChqc29uKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZlcmlmeUJ1dHRvbi50ZXh0KCdWRVJJRlknKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdmVyaWZ5QnV0dG9uLnRvZ2dsZUNsYXNzKCdkaXNhYmxlZCcpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAkKCcjb3RwLXZhbHVlJykudmFsKCcnKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChqc29uWydzdGF0dXMnXSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaXppVG9hc3Quc3VjY2Vzcyh7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGltZW91dDogZmFsc2UsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcG9zaXRpb246ICd0b3BSaWdodCcsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbWVzc2FnZToganNvblsnc3VjY2Vzc19tZXNzYWdlJ11cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdpbmRvdy5sb2NhdGlvbiA9ICQoJy5iYXNlX3VybCcpLmF0dHIoJ2hyZWYnKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sIDMwMDApXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpemlUb2FzdC53YXJuaW5nKHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwb3NpdGlvbjogJ3RvcFJpZ2h0JyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtZXNzYWdlOiAnV2UgY291bGRuXFwndCB2ZXJpZnkgeW91ciBhY2NvdW50LiBQbGVhc2UgY2hlY2sgdGhlIE9UUCdcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBpemlUb2FzdC5lcnJvcih7XHJcbiAgICAgICAgICAgICAgICAgICAgcG9zaXRpb246ICd0b3BSaWdodCcsXHJcbiAgICAgICAgICAgICAgICAgICAgbWVzc2FnZTogJ1BsZWFzZSBlbnRlciBhIHZhbGlkIE9UUCdcclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgXHJcbiAgICAgICAgLy8gT1RQIFZlcmlmaWNhdGlvblxyXG4gICAgICAgICQoZG9jdW1lbnQpLmRlbGVnYXRlKCcjaXAtb3RwLXZlcmlmeS1idXR0b24nLCAnY2xpY2snLCBmdW5jdGlvbiAoZSkge1xyXG4gICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGVtYWlsID0gJCgnI2xvZ2luLWVtYWlsJykudmFsKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3Qgb3RwID0gJCgnI290cC12YWx1ZScpLnZhbCgpO1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBsb2dpbl9sYXRpdHVkZSA9ICQoJyNsYXQnKS52YWwoKTtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgbG9naW5fbG9uZ2l0dWRlID0gJCgnI2xuZycpLnZhbCgpO1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHBhc3N3b3JkID0gJCgnI2xvZ2luLXBhc3N3b3JkJykudmFsKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgdmVyaWZ5QnV0dG9uID0gJCgnI290cC12ZXJpZnktYnV0dG9uJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKG90cC5sZW5ndGggPiAzKSB7XHJcbiAgICAgICAgICAgICAgICB2ZXJpZnlCdXR0b24udGV4dCgnUExFQVNFIFdBSVQnKTtcclxuICAgICAgICAgICAgICAgIHZlcmlmeUJ1dHRvbi50b2dnbGVDbGFzcygnZGlzYWJsZWQnKTtcclxuXHJcbiAgICAgICAgICAgICAgICAkLmFqYXgoe1xyXG4gICAgICAgICAgICAgICAgICAgIHVybDogJ2luZGV4LnBocD9wYXRoPWFjY291bnQvbG9naW4vYWRkVmVyaWZ5TmV3SVBvdHAnLFxyXG4gICAgICAgICAgICAgICAgICAgIHR5cGU6ICdQT1NUJyxcclxuICAgICAgICAgICAgICAgICAgICBkYXRhVHlwZTogJ2pzb24nLFxyXG4gICAgICAgICAgICAgICAgICAgIGRhdGE6IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZW1haWw6IGVtYWlsLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBvdHA6IG90cFxyXG4gICAgICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICAgICAgc3VjY2VzczogZnVuY3Rpb24gKGpzb24pIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdmVyaWZ5QnV0dG9uLnRleHQoJ1ZFUklGWScpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB2ZXJpZnlCdXR0b24udG9nZ2xlQ2xhc3MoJ2Rpc2FibGVkJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICQoJyNvdHAtdmFsdWUnKS52YWwoJycpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGpzb25bJ3N0YXR1cyddKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpemlUb2FzdC5zdWNjZXNzKHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aW1lb3V0OiBmYWxzZSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwb3NpdGlvbjogJ3RvcFJpZ2h0JyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtZXNzYWdlOiAnV2lsbCBiZSByZWRpcmVjdGluZyB0byBsb2dpbiBwYWdlISdcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoanNvblsnc3RhdHVzJ10pIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkLmFqYXgoe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHVybDogJ2luZGV4LnBocD9wYXRoPWFjY291bnQvbG9naW4vbG9naW4nLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogJ3Bvc3QnLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YToge2VtYWlsOiBlbWFpbCwgcGFzc3dvcmQ6IHBhc3N3b3JkLCBsb2dpbl9sYXRpdHVkZTpsb2dpbl9sYXRpdHVkZSwgbG9naW5fbG9uZ2l0dWRlOmxvZ2luX2xvbmdpdHVkZSwgbG9naW5fbW9kZTond2ViJ30sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhVHlwZTogJ2pzb24nLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3VjY2VzczogZnVuY3Rpb24gKGpzb24pIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChqc29uWydzdGF0dXMnXSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGpzb25bJ3JlZGlyZWN0J10gIT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgd2luZG93LmxvY2F0aW9uLmhyZWYgPSBqc29uWydyZWRpcmVjdCddO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChqc29uWyd0ZW1wcGFzc3dvcmQnXSA9PSAnMScpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxvY2F0aW9uID0gJCgnLmJhc2VfdXJsJykuYXR0cignaHJlZicpICsgJy9jaGFuZ2VwYXNzJztcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coJCgnLmJhc2VfdXJsJykpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxvY2F0aW9uID0gJCgnLmJhc2VfdXJsJykuYXR0cignaHJlZicpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGl6aVRvYXN0LmVycm9yKHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBvc2l0aW9uOiAndG9wUmlnaHQnLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtZXNzYWdlOiBqc29uWydlcnJvcl93YXJuaW5nJ11cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbG9jYXRpb24gPSAkKCcuYmFzZV91cmwnKS5hdHRyKCdocmVmJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxvZ2luQnV0dG9uLnRleHQoJ0xPR0lOJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxvZ2luQnV0dG9uLnRvZ2dsZUNsYXNzKCdkaXNhYmxlZCcpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pOyAgICBcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvKmlmIChqc29uWydyZWRpcmVjdCddICE9IG51bGwpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB3aW5kb3cubG9jYXRpb24uaHJlZiA9IGpzb25bJ3JlZGlyZWN0J107XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChqc29uWyd0ZW1wcGFzc3dvcmQnXSA9PSAnMScpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsb2NhdGlvbiA9ICQoJy5iYXNlX3VybCcpLmF0dHIoJ2hyZWYnKSArICcvY2hhbmdlcGFzcyc7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZygkKCcuYmFzZV91cmwnKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsb2NhdGlvbiA9ICQoJy5iYXNlX3VybCcpLmF0dHIoJ2hyZWYnKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9Ki9cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSwgMTUwMClcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGl6aVRvYXN0Lndhcm5pbmcoe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBvc2l0aW9uOiAndG9wUmlnaHQnLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1lc3NhZ2U6ICdXZSBjb3VsZG5cXCd0IHZlcmlmeSB5b3VyIGFjY291bnQuIFBsZWFzZSBjaGVjayB0aGUgT1RQJ1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIGl6aVRvYXN0LmVycm9yKHtcclxuICAgICAgICAgICAgICAgICAgICBwb3NpdGlvbjogJ3RvcFJpZ2h0JyxcclxuICAgICAgICAgICAgICAgICAgICBtZXNzYWdlOiAnUGxlYXNlIGVudGVyIGEgdmFsaWQgT1RQJ1xyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgJChkb2N1bWVudCkuZGVsZWdhdGUoJyNjYXJlZXJzLXN1Ym1pdC1idXR0b24nLCAnY2xpY2snLCBmdW5jdGlvbiAoZSkge1xyXG4gICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgZmlyc3ROYW1lID0gJCgnI2NhcmVlcnMtZmlyc3QtbmFtZScpLnZhbCgpO1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGxhc3ROYW1lID0gJCgnI2NhcmVlcnMtbGFzdC1uYW1lJykudmFsKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3Qgcm9sZSA9ICQoJyNjYXJlZXJzLWRlc2lnbmF0aW9uJykudmFsKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgeW91cnNlbGYgPSAkKCcjY2FyZWVycy1hYm91dC15b3Vyc2VsZicpLnZhbCgpO1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGpvYl9pZCA9ICQoJyNjYXJlZXJzLWpvYi1pZCcpLnZhbCgpO1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGNvdmVyID0gJCgnI2NhcmVlcnMtY292ZXItbGV0dGVyJykudmFsKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgLy8gY29uc3QgY3ZfcGF0aCA9ICQoJyNjYXJlZXJzLWN2LXBhdGgnKS52YWwoKTtcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCByZWdpc3RlckZvcm0gPSAkKCcjY2FyZWVycy1mb3JtJylbMF07XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgZm9ybUlzVmFsaWQgPSByZWdpc3RlckZvcm0ucmVwb3J0VmFsaWRpdHkoKTtcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCByZWdpc3RlckJ1dHRvbiA9ICQoJyNjYXJlZXJzLXN1Ym1pdC1idXR0b24nKTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoZm9ybUlzVmFsaWQpIHtcclxuICAgICAgICAgICAgICAgIGlmIChncmVjYXB0Y2hhLmdldFJlc3BvbnNlKCkgPT0gJycpIHtcclxuICAgICAgICAgICAgICAgICAgICBpemlUb2FzdC53YXJuaW5nKHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcG9zaXRpb246ICd0b3BSaWdodCcsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG1lc3NhZ2U6ICdQbGVhc2UgY29tcGxldGUgY2FwdGNoYSdcclxuICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmVnaXN0ZXJCdXR0b24udGV4dCgnUExFQVNFIFdBSVQnKTtcclxuICAgICAgICAgICAgICAgICAgICByZWdpc3RlckJ1dHRvbi50b2dnbGVDbGFzcygnZGlzYWJsZWQnKTtcclxuICAgICAgICAgICAgICAgICAgICAkLmFqYXgoe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB1cmw6ICdpbmRleC5waHA/cGF0aD1jb21tb24vaG9tZS9zYXZlY2FyZWVycycsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6ICdQT1NUJyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgZGF0YVR5cGU6ICdqc29uJyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgZGF0YToge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZmlyc3RuYW1lOiBmaXJzdE5hbWUsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsYXN0bmFtZTogbGFzdE5hbWUsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByb2xlOiByb2xlLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgeW91cnNlbGY6IHlvdXJzZWxmLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgam9iX2lkOiBqb2JfaWQsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb3ZlcjogY292ZXIsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvL2N2X3BhdGg6IGN2X3BhdGhrXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHN1Y2Nlc3M6IGZ1bmN0aW9uIChqc29uKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZWdpc3RlckJ1dHRvbi50b2dnbGVDbGFzcygnZGlzYWJsZWQnKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChqc29uWydzdGF0dXMnXSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGl6aVRvYXN0LnN1Y2Nlc3Moe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwb3NpdGlvbjogJ3RvcFJpZ2h0JyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbWVzc2FnZToganNvblsnc3VjY2Vzc19tZXNzYWdlJ11cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkKCcjY2FyZWVycy1mb3JtJylbMF0ucmVzZXQoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZWdpc3RlckJ1dHRvbi50ZXh0KCdTVUJNSVQnKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGl6aVRvYXN0Lndhcm5pbmcoe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwb3NpdGlvbjogJ3RvcFJpZ2h0JyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGl0bGU6ICdPb3BzJyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbWVzc2FnZToganNvblsnZXJyb3Jfd2FybmluZyddXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICAkKGRvY3VtZW50KS5kZWxlZ2F0ZSgnI3BhcnRuZXItcmVnaXN0cmF0aW9uLWJ1dHRvbicsICdjbGljaycsIGZ1bmN0aW9uIChlKSB7XHJcbiAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCBmaXJzdE5hbWUgPSAkKCcjcGFydG5lci1maXJzdC1uYW1lJykudmFsKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgbGFzdE5hbWUgPSAkKCcjcGFydG5lci1sYXN0LW5hbWUnKS52YWwoKTtcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCBkZXNpZ25hdGlvbiA9ICQoJyNwYXJ0bmVyLWRlc2lnbmF0aW9uJykudmFsKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgY29tcGFueSA9ICQoJyNwYXJ0bmVyLWNvbXBhbnktbmFtZScpLnZhbCgpO1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGVtYWlsID0gJCgnI3BhcnRuZXItZW1haWwnKS52YWwoKTtcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCBwaG9uZSA9ICQoJyNwYXJ0bmVyLXBob25lJykudmFsKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgZGVzY3JpcHRpb24gPSAkKCcjcGFydG5lci1kZXNjcmlwdGlvbicpLnZhbCgpO1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHJlZ2lzdGVyRm9ybSA9ICQoJyNwYXJ0bmVyLXJlZ2lzdHJhdGlvbi1mb3JtJylbMF07XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgZm9ybUlzVmFsaWQgPSByZWdpc3RlckZvcm0ucmVwb3J0VmFsaWRpdHkoKTtcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCByZWdpc3RlckJ1dHRvbiA9ICQoJyNwYXJ0bmVyLXJlZ2lzdHJhdGlvbi1idXR0b24nKTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoZm9ybUlzVmFsaWQpIHtcclxuICAgICAgICAgICAgICAgIGlmIChncmVjYXB0Y2hhLmdldFJlc3BvbnNlKCkgPT0gJycpIHtcclxuICAgICAgICAgICAgICAgICAgICBpemlUb2FzdC53YXJuaW5nKHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcG9zaXRpb246ICd0b3BSaWdodCcsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG1lc3NhZ2U6ICdQbGVhc2UgY29tcGxldGUgY2FwdGNoYSdcclxuICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmVnaXN0ZXJCdXR0b24udGV4dCgnUExFQVNFIFdBSVQnKTtcclxuICAgICAgICAgICAgICAgICAgICByZWdpc3RlckJ1dHRvbi50b2dnbGVDbGFzcygnZGlzYWJsZWQnKTtcclxuICAgICAgICAgICAgICAgICAgICAkLmFqYXgoe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB1cmw6ICdpbmRleC5waHA/cGF0aD1jb21tb24vaG9tZS9zYXZlcGFydG5lcicsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6ICdQT1NUJyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgZGF0YVR5cGU6ICdqc29uJyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgZGF0YToge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZmlyc3RuYW1lOiBmaXJzdE5hbWUsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsYXN0bmFtZTogbGFzdE5hbWUsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkZXNpZ25hdGlvbjogZGVzaWduYXRpb24sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb21wYW55OiBjb21wYW55LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZW1haWw6IGVtYWlsLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcGhvbmU6IHBob25lLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZGVzY3JpcHRpb246IGRlc2NyaXB0aW9uXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHN1Y2Nlc3M6IGZ1bmN0aW9uIChqc29uKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZWdpc3RlckJ1dHRvbi50b2dnbGVDbGFzcygnZGlzYWJsZWQnKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChqc29uWydzdGF0dXMnXSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGl6aVRvYXN0LnN1Y2Nlc3Moe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwb3NpdGlvbjogJ3RvcFJpZ2h0JyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbWVzc2FnZToganNvblsnc3VjY2Vzc19tZXNzYWdlJ11cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkKCcjcGFydG5lci1yZWdpc3RyYXRpb24tZm9ybScpWzBdLnJlc2V0KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGl6aVRvYXN0Lndhcm5pbmcoe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwb3NpdGlvbjogJ3RvcFJpZ2h0JyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGl0bGU6ICdPb3BzJyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbWVzc2FnZToganNvblsnZXJyb3Jfd2FybmluZyddXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICAkKCcjZm9yZ290LXBhc3N3b3JkLWJ0bicpLmNsaWNrKGZ1bmN0aW9uIChlKSB7XHJcbiAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcclxuXHJcbiAgICAgICAgICAgICQoJyNsb2dpbi12aWV3JykuaGlkZSgpO1xyXG4gICAgICAgICAgICAkKCcjZm9yZ290LXBhc3N3b3JkLXZpZXcnKS5zaG93KCk7XHJcblxyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICAkKCcjcGFzc3dvcmQtcmVzZXQtYnV0dG9uJykuY2xpY2soZnVuY3Rpb24gKGUpIHtcclxuICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xyXG5cclxuICAgICAgICAgICAgY29uc3QgZW1haWwgPSAkKCcjcmVzZXQtcGFzc3dvcmQtZW1haWwnKS52YWwoKTtcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCByZXNldEJ1dHRvbiA9ICQoJyNwYXNzd29yZC1yZXNldC1idXR0b24nKTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoZW1haWwubGVuZ3RoID09IDApIHtcclxuICAgICAgICAgICAgICAgIGl6aVRvYXN0Lndhcm5pbmcoe1xyXG4gICAgICAgICAgICAgICAgICAgIHBvc2l0aW9uOiAndG9wUmlnaHQnLFxyXG4gICAgICAgICAgICAgICAgICAgIG1lc3NhZ2U6ICdQbGVhc2UgZW50ZXIgeW91ciBhY2NvdW50IGVtYWlsJ1xyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICByZXNldEJ1dHRvbi50ZXh0KCdQTEVBU0UgV0FJVCcpO1xyXG4gICAgICAgICAgICAgICAgcmVzZXRCdXR0b24udG9nZ2xlQ2xhc3MoJ2Rpc2FibGVkJyk7XHJcblxyXG4gICAgICAgICAgICAgICAgJC5hamF4KHtcclxuICAgICAgICAgICAgICAgICAgICB1cmw6ICdpbmRleC5waHA/cGF0aD1hY2NvdW50L2ZvcmdvdHRlbicsXHJcbiAgICAgICAgICAgICAgICAgICAgdHlwZTogJ1BPU1QnLFxyXG4gICAgICAgICAgICAgICAgICAgIGRhdGFUeXBlOiAnanNvbicsXHJcbiAgICAgICAgICAgICAgICAgICAgZGF0YToge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBlbWFpbDogZW1haWxcclxuICAgICAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgICAgIHN1Y2Nlc3M6IGZ1bmN0aW9uIChqc29uKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlc2V0QnV0dG9uLnRleHQoJ1JFU0VUIFBBU1NXT1JEJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlc2V0QnV0dG9uLnRvZ2dsZUNsYXNzKCdkaXNhYmxlZCcpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAkKCcjcmVzZXQtcGFzc3dvcmQtZW1haWwnKS52YWwoJycpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGpzb25bJ3N0YXR1cyddKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpemlUb2FzdC5zdWNjZXNzKHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aW1lb3V0OiBmYWxzZSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwb3NpdGlvbjogJ3RvcFJpZ2h0JyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtZXNzYWdlOiBqc29uWyd0ZXh0X21lc3NhZ2UnXVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpemlUb2FzdC53YXJuaW5nKHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwb3NpdGlvbjogJ3RvcFJpZ2h0JyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtZXNzYWdlOiAnV2UgY291bGRuXFwndCBmaW5kIGFuIGFjY291bnQgd2l0aCB0aGF0IGVtYWlsIGFkZHJlc3MnXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICQoJyNmYXJtZXItcmVnaXN0ZXItYnV0dG9uJykuY2xpY2soZnVuY3Rpb24gKGUpIHtcclxuICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xyXG5cclxuICAgICAgICAgICAgY29uc3QgZmlyc3ROYW1lID0gJCgnI2Zhcm1lci1maXJzdC1uYW1lJykudmFsKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgbGFzdE5hbWUgPSAkKCcjZmFybWVyLWxhc3QtbmFtZScpLnZhbCgpO1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGVtYWlsID0gJCgnI2Zhcm1lci1lbWFpbCcpLnZhbCgpO1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHBob25lID0gJCgnI2Zhcm1lci1waG9uZScpLnZhbCgpO1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGZhcm1lclR5cGUgPSAkKCcjZmFybWVyLXR5cGUnKS52YWwoKTtcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCBmYXJtTG9jYXRpb24gPSAkKCcjZmFybWVyLWxvY2F0aW9uJykudmFsKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgcHJvZHVjZURlc2NyaXB0aW9uID0gJCgnZmFybWVyLXByb2R1Y2UtZ3Jvd24nKS52YWwoKTtcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCByZWdpc3RlckJ1dHRvbiA9ICQoJyNmYXJtZXItcmVnaXN0ZXItYnV0dG9uJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGdyZWNhcHRjaGEuZ2V0UmVzcG9uc2UoKSA9PSAnJykge1xyXG4gICAgICAgICAgICAgICAgaXppVG9hc3Qud2FybmluZyh7XHJcbiAgICAgICAgICAgICAgICAgICAgcG9zaXRpb246ICd0b3BSaWdodCcsXHJcbiAgICAgICAgICAgICAgICAgICAgbWVzc2FnZTogJ1BsZWFzZSBjb21wbGV0ZSBjYXB0Y2hhJ1xyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoJCgnI2Zhcm1lci1yZWdpc3RyYXRpb24tZm9ybScpWzBdLnJlcG9ydFZhbGlkaXR5KCkpIHtcclxuICAgICAgICAgICAgICAgICAgICBpemlUb2FzdC5zdWNjZXNzKHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcG9zaXRpb246ICd0b3BSaWdodCcsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG1lc3NhZ2U6ICdUaGFua3MgZm9yIHJlZ2lzdGVyaW5nLiBXZVxcJ2xsIGdldCBpbiB0b3VjaCdcclxuICAgICAgICAgICAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgJCgnI2Zhcm1lci1yZWdpc3RyYXRpb24tZm9ybScpWzBdLnJlc2V0KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgLy8gcmVnaXN0ZXJCdXR0b24udGV4dCgnUExFQVNFIFdBSVQnKTtcclxuICAgICAgICAgICAgICAgICAgICAvLyByZWdpc3RlckJ1dHRvbi50b2dnbGVDbGFzcygnZGlzYWJsZWQnKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgLy8gJC5hamF4KHtcclxuICAgICAgICAgICAgICAgICAgICAvLyAgIHVybDogJ2luZGV4LnBocD9wYXRoPWFjY291bnQvZmFybWVycmVnaXN0ZXIvcmVnaXN0ZXInLFxyXG4gICAgICAgICAgICAgICAgICAgIC8vICAgdHlwZTogJ1BPU1QnLFxyXG4gICAgICAgICAgICAgICAgICAgIC8vICAgZGF0YVR5cGU6ICdqc29uJyxcclxuICAgICAgICAgICAgICAgICAgICAvLyAgIGRhdGE6IHsgXHJcbiAgICAgICAgICAgICAgICAgICAgLy8gICAgIG5hbWU6IGZpcnN0TmFtZSArICcgJyArIGxhc3ROYW1lLFxyXG4gICAgICAgICAgICAgICAgICAgIC8vICAgICBlbWFpbDogZW1haWwsXHJcbiAgICAgICAgICAgICAgICAgICAgLy8gICAgIHRlbGVwaG9uZTogcGhvbmVcclxuICAgICAgICAgICAgICAgICAgICAvLyAgIH0sXHJcbiAgICAgICAgICAgICAgICAgICAgLy8gICBzdWNjZXNzOiBmdW5jdGlvbiAoanNvbikge1xyXG4gICAgICAgICAgICAgICAgICAgIC8vICAgICByZWdpc3RlckJ1dHRvbi50ZXh0KCdSRUdJU1RFUicpO1xyXG4gICAgICAgICAgICAgICAgICAgIC8vICAgICByZWdpc3RlckJ1dHRvbi50b2dnbGVDbGFzcygnZGlzYWJsZWQnKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgLy8gICAgIGlmIChqc29uWydzdGF0dXMnXSkge1xyXG4gICAgICAgICAgICAgICAgICAgIC8vICAgICAgIGl6aVRvYXN0LnN1Y2Nlc3Moe1xyXG4gICAgICAgICAgICAgICAgICAgIC8vICAgICAgICAgcG9zaXRpb246ICd0b3BSaWdodCcsXHJcbiAgICAgICAgICAgICAgICAgICAgLy8gICAgICAgICBtZXNzYWdlOiBqc29uWydzdWNjZXNzX21lc3NhZ2UnXVxyXG4gICAgICAgICAgICAgICAgICAgIC8vICAgICAgIH0pO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAvLyAgICAgICAkKCcjZmFybWVyLXJlZ2lzdHJhdGlvbi1mb3JtJylbMF0ucmVzZXQoKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgLy8gICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgLy8gICAgICAgaXppVG9hc3Qud2FybmluZyh7XHJcbiAgICAgICAgICAgICAgICAgICAgLy8gICAgICAgICBwb3NpdGlvbjogJ3RvcFJpZ2h0JyxcclxuICAgICAgICAgICAgICAgICAgICAvLyAgICAgICAgIHRpdGxlOiAnT29wcycsXHJcbiAgICAgICAgICAgICAgICAgICAgLy8gICAgICAgICBtZXNzYWdlOiAnV2UgY291bGRuXFwndCByZWdpc3RlciB5b3UuIFBsZWFzZSB0cnkgYWdhaW4nXHJcbiAgICAgICAgICAgICAgICAgICAgLy8gICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgLy8gICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAvLyAgIH1cclxuICAgICAgICAgICAgICAgICAgICAvLyB9KTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICAkKFwiI2NhcmVlcnMtam9iLWNhdGVnb3J5LCAjY2FyZWVycy1qb2ItdHlwZSwgI2NhcmVlcnMtam9iLWxvY2F0aW9uXCIpLmNoYW5nZShmdW5jdGlvbiAoKSB7XHJcblxyXG4gICAgICAgICAgICB2YXIgdXJsID0gJ2luZGV4LnBocD9wYXRoPWNvbW1vbi9ob21lL2NhcmVlcnMnO1xyXG5cclxuXHJcbiAgICAgICAgICAgIHZhciBmaWx0ZXJfY2F0ZWdvcnkgPSAkKCcjY2FyZWVycy1qb2ItY2F0ZWdvcnknKS52YWwoKTtcclxuXHJcbiAgICAgICAgICAgIGlmIChmaWx0ZXJfY2F0ZWdvcnkgJiYgZmlsdGVyX2NhdGVnb3J5ICE9IFwiQWxsIEpvYiBDYXRlZ29yeVwiKSB7XHJcbiAgICAgICAgICAgICAgICB1cmwgKz0gJyZmaWx0ZXJfY2F0ZWdvcnk9JyArIGVuY29kZVVSSUNvbXBvbmVudChmaWx0ZXJfY2F0ZWdvcnkpO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICB2YXIgZmlsdGVyX3R5cGUgPSAkKCcjY2FyZWVycy1qb2ItdHlwZScpLnZhbCgpO1xyXG5cclxuICAgICAgICAgICAgaWYgKGZpbHRlcl90eXBlICYmIGZpbHRlcl90eXBlICE9IFwiQWxsIEpvYiBUeXBlXCIpIHtcclxuICAgICAgICAgICAgICAgIHVybCArPSAnJmZpbHRlcl90eXBlPScgKyBlbmNvZGVVUklDb21wb25lbnQoZmlsdGVyX3R5cGUpO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICB2YXIgZmlsdGVyX2xvY2F0aW9uID0gJCgnI2NhcmVlcnMtam9iLWxvY2F0aW9uJykudmFsKCk7XHJcblxyXG4gICAgICAgICAgICBpZiAoZmlsdGVyX2xvY2F0aW9uICYmIGZpbHRlcl9sb2NhdGlvbiAhPSBcIkFsbCBKb2IgTG9jYXRpb25cIikge1xyXG4gICAgICAgICAgICAgICAgdXJsICs9ICcmZmlsdGVyX2xvY2F0aW9uPScgKyBlbmNvZGVVUklDb21wb25lbnQoZmlsdGVyX2xvY2F0aW9uKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBsb2NhdGlvbiA9IHVybDtcclxuXHJcbiAgICAgICAgfSk7XHJcbiAgICB9KTtcclxuICAgIFxyXG4gICAgXHJcbiAgICB2YXIgbGF0ID0gJChcIiNsYXRcIik7XHJcbiAgICB2YXIgbG5nID0gJChcIiNsbmdcIik7XHJcblxyXG4gICAgICAgICBmdW5jdGlvbiBnZXRMb2NhdGlvbk9ubHkoKSB7XHJcbiAgICAgICAgICAgICBcclxuICAgICAgICAgICAgIGlmIChuYXZpZ2F0b3IuZ2VvbG9jYXRpb24pIHsgICAgXHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKDEpOyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXHJcblxyXG4gICAgICAgICAgICAgICAgICAgIG5hdmlnYXRvci5nZW9sb2NhdGlvbi5nZXRDdXJyZW50UG9zaXRpb24oXHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBzaG93UG9zaXRpb25Pbmx5LCBcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIEVycm9yIGZ1bmN0aW9uXHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBudWxsLC8vc2hvd0Vycm9yLCBcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIE9wdGlvbnMuIFNlZSBNRE4gZm9yIGRldGFpbHMuXHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICB7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBlbmFibGVIaWdoQWNjdXJhY3k6IHRydWUsXHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aW1lb3V0OiA1MDAwLFxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgbWF4aW11bUFnZTogMFxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgfSk7ICAgICAgICAgICAgICAgICAgICBcclxuXHJcbiAgICAgICAgICAgICAgICB9IGVsc2UgeyBcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coMik7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coXCJHZW9sb2NhdGlvbiBpcyBub3Qgc3VwcG9ydGVkIGJ5IHRoaXMgYnJvd3Nlci5cIik7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgLypsYXQuaW5uZXJIVE1MID0gICAwO1xyXG5cclxuICAgICAgICAgICAgICAgICAgIGxuZy5pbm5lckhUTUwgPSAwOyovXHJcblxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICB9XHJcbiAgICAgICAgIFxyXG4gICAgICAgICBmdW5jdGlvbiBzaG93UG9zaXRpb25Pbmx5KHBvc2l0aW9uKSB7XHJcbiAgICAgICAgICAgICBjb25zb2xlLmxvZygnc2hvd1Bvc2l0aW9uT25seScpO1xyXG4gICAgICAgICAgICAgY29uc29sZS5sb2cocG9zaXRpb24pO1xyXG4gICAgICAgICAgICAgJChcIiNsYXRcIikudmFsKHBvc2l0aW9uLmNvb3Jkcy5sYXRpdHVkZSk7XHJcbiAgICAgICAgICAgICAkKFwiI2xuZ1wiKS52YWwocG9zaXRpb24uY29vcmRzLmxvbmdpdHVkZSk7XHJcbiAgICAgICAgICAgICBjb25zb2xlLmxvZyhwb3NpdGlvbi5jb29yZHMubGF0aXR1ZGUpO1xyXG4gICAgICAgICAgICAgY29uc29sZS5sb2cocG9zaXRpb24uY29vcmRzLmxvbmdpdHVkZSk7XHJcbiAgICAgICAgIH1cclxuXHJcbn0pKGpRdWVyeSwgd2luZG93LCBkb2N1bWVudCk7XHJcbiJdfQ==
